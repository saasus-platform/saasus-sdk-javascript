/**
 * SaaSus AWS Marketplace API Schema
 * SaaSus AWS Marketplace API Schema
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import { Configuration } from './configuration';
import { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { RequestArgs, BaseAPI } from './base';
/**
 *
 * @export
 * @interface CatalogEntityVisibility
 */
export interface CatalogEntityVisibility {
    /**
     *
     * @type {VisibilityStatus}
     * @memberof CatalogEntityVisibility
     */
    'visibility': VisibilityStatus;
}
/**
 *
 * @export
 * @interface CloudFormationLaunchStackLink
 */
export interface CloudFormationLaunchStackLink {
    /**
     *
     * @type {string}
     * @memberof CloudFormationLaunchStackLink
     */
    'link': string;
}
/**
 *
 * @export
 * @interface CreateCustomerParam
 */
export interface CreateCustomerParam {
    /**
     *
     * @type {string}
     * @memberof CreateCustomerParam
     */
    'tenant_id': string;
    /**
     *
     * @type {string}
     * @memberof CreateCustomerParam
     */
    'registration_token': string;
}
/**
 *
 * @export
 * @interface Customer
 */
export interface Customer {
    /**
     *
     * @type {string}
     * @memberof Customer
     */
    'customer_identifier': string;
    /**
     *
     * @type {string}
     * @memberof Customer
     */
    'customer_aws_account_id': string;
    /**
     *
     * @type {string}
     * @memberof Customer
     */
    'tenant_id': string;
}
/**
 *
 * @export
 * @interface Customers
 */
export interface Customers {
    /**
     *
     * @type {Array<Customer>}
     * @memberof Customers
     */
    'customers': Array<Customer>;
}
/**
 *
 * @export
 * @interface GetListingStatusResult
 */
export interface GetListingStatusResult {
    /**
     *
     * @type {ListingStatus}
     * @memberof GetListingStatusResult
     */
    'listing_status': ListingStatus;
}
/**
 *
 * @export
 * @enum {string}
 */
export declare const ListingStatus: {
    readonly NoListing: "no_listing";
    readonly FirstStepWorking: "first_step_working";
    readonly FirstStepCompleted: "first_step_completed";
    readonly SecondStepWorking: "second_step_working";
    readonly SecondStepPlanCreated: "second_step_plan_created";
    readonly SecondStepCompleted: "second_step_completed";
    readonly ThirdStepWorking: "third_step_working";
    readonly ThirdStepCompleted: "third_step_completed";
    readonly Limited: "limited";
    readonly Restricted: "restricted";
    readonly Public: "public";
};
export declare type ListingStatus = typeof ListingStatus[keyof typeof ListingStatus];
/**
 *
 * @export
 * @interface ModelError
 */
export interface ModelError {
    /**
     *
     * @type {string}
     * @memberof ModelError
     */
    'type': string;
    /**
     *
     * @type {string}
     * @memberof ModelError
     */
    'message': string;
}
/**
 *
 * @export
 * @interface Plan
 */
export interface Plan {
    /**
     *
     * @type {string}
     * @memberof Plan
     */
    'plan_id': string;
    /**
     *
     * @type {string}
     * @memberof Plan
     */
    'plan_name': string;
}
/**
 *
 * @export
 * @interface Plans
 */
export interface Plans {
    /**
     *
     * @type {Array<Plan>}
     * @memberof Plans
     */
    'plans': Array<Plan>;
}
/**
 *
 * @export
 * @interface SavePlanParam
 */
export interface SavePlanParam {
    /**
     *
     * @type {string}
     * @memberof SavePlanParam
     */
    'plan_id': string;
    /**
     *
     * @type {string}
     * @memberof SavePlanParam
     */
    'plan_name': string;
}
/**
 *
 * @export
 * @interface Settings
 */
export interface Settings {
    /**
     *
     * @type {string}
     * @memberof Settings
     */
    'product_code': string;
    /**
     *
     * @type {string}
     * @memberof Settings
     */
    'role_arn': string;
    /**
     *
     * @type {string}
     * @memberof Settings
     */
    'role_external_id': string;
    /**
     *
     * @type {string}
     * @memberof Settings
     */
    'sns_topic_arn': string;
    /**
     *
     * @type {string}
     * @memberof Settings
     */
    'cas_bucket_name': string;
    /**
     *
     * @type {string}
     * @memberof Settings
     */
    'cas_sns_topic_arn': string;
    /**
     *
     * @type {string}
     * @memberof Settings
     */
    'seller_sns_topic_arn': string;
    /**
     *
     * @type {string}
     * @memberof Settings
     */
    'redirect_sign_up_page_function_url': string;
    /**
     *
     * @type {string}
     * @memberof Settings
     */
    'sqs_arn': string;
}
/**
 *
 * @export
 * @interface UpdateListingStatusParam
 */
export interface UpdateListingStatusParam {
    /**
     *
     * @type {ListingStatus}
     * @memberof UpdateListingStatusParam
     */
    'listing_status': ListingStatus;
}
/**
 *
 * @export
 * @interface UpdateSettingsParam
 */
export interface UpdateSettingsParam {
    /**
     *
     * @type {string}
     * @memberof UpdateSettingsParam
     */
    'product_code'?: string;
    /**
     *
     * @type {string}
     * @memberof UpdateSettingsParam
     */
    'role_arn'?: string;
    /**
     *
     * @type {string}
     * @memberof UpdateSettingsParam
     */
    'role_external_id'?: string;
    /**
     *
     * @type {string}
     * @memberof UpdateSettingsParam
     */
    'sns_topic_arn'?: string;
    /**
     *
     * @type {string}
     * @memberof UpdateSettingsParam
     */
    'cas_bucket_name'?: string;
    /**
     *
     * @type {string}
     * @memberof UpdateSettingsParam
     */
    'cas_sns_topic_arn'?: string;
    /**
     *
     * @type {string}
     * @memberof UpdateSettingsParam
     */
    'seller_sns_topic_arn'?: string;
    /**
     *
     * @type {string}
     * @memberof UpdateSettingsParam
     */
    'sqs_arn'?: string;
}
/**
 *
 * @export
 * @interface VerifyRegistrationTokenParam
 */
export interface VerifyRegistrationTokenParam {
    /**
     *
     * @type {string}
     * @memberof VerifyRegistrationTokenParam
     */
    'registration_token': string;
}
/**
 *
 * @export
 * @enum {string}
 */
export declare const VisibilityStatus: {
    readonly Public: "Public";
    readonly Limited: "Limited";
    readonly Restricted: "Restricted";
};
export declare type VisibilityStatus = typeof VisibilityStatus[keyof typeof VisibilityStatus];
/**
 * AwsMarketplaceApi - axios parameter creator
 * @export
 */
export declare const AwsMarketplaceApiAxiosParamCreator: (configuration?: Configuration | undefined) => {
    /**
     * AWS Marketplaceに連携する顧客情報を新規作成します。  Create customer information to be linked to AWS Marketplace.
     * @summary AWS Marketplaceに連携する顧客情報を新規作成(Create customer information to be linked to AWS Marketplace)
     * @param {CreateCustomerParam} [createCustomerParam]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createCustomer: (createCustomerParam?: CreateCustomerParam | undefined, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * AWS Marketplaceから商品の公開状況を取得します。  Retrieve the product\'s publication status from AWS Marketplace.
     * @summary AWS Marketplaceから商品の公開状況を取得(Obtain product publication status from AWS Marketplace)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCatalogEntityVisibility: (options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * CloudFormationのクイック作成リンクを取得します。  Get the CloudFormation Quick Create link.
     * @summary AWS CloudFormationのスタック作成リンクを取得(Get the link to create the AWS CloudFormation stack)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCloudFormationLaunchStackLink: (options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * AWS Marketplaceに連携する顧客情報を取得します。  Get customer information to be linked to AWS Marketplace.
     * @summary AWS Marketplaceに連携する顧客情報を取得(Get customer information to be linked to AWS Marketplace)
     * @param {string} customerIdentifier 顧客ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCustomer: (customerIdentifier: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * AWS Marketplaceに連携する顧客情報の一覧を取得します。  Get a list of customer information to be linked to AWS Marketplace.
     * @summary AWS Marketplaceに連携する顧客情報の一覧を取得(Get a list of customer information to be linked to AWS Marketplace)
     * @param {Array<string>} [tenantIds] 指定したテナントIDの顧客を取得する(Get customers with the specified tenant ID)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCustomers: (tenantIds?: string[] | undefined, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * AWS Marketplaceの出品状況を取得します。  Get AWS Marketplace Listing Status.
     * @summary AWS Marketplaceの出品状況を取得(Get AWS Marketplace Listing Status)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getListingStatus: (options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Marketplaceと連携するプラン情報を取得します。  Obtain plan information to link to AWS Marketplace.
     * @summary AWSMarketplaceに連携するプラン情報を取得(Obtain plan information to link to AWS Marketplace)
     * @param {string} planName AWS Marketplace連携プラン名
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getPlanByPlanName: (planName: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Marketplaceと連携するプラン情報を取得します。  Obtain plan information to link to AWS Marketplace.
     * @summary AWS Marketplaceに連携するプラン情報を取得(Obtain plan information to link to AWS Marketplace)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getPlans: (options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * AWS Marketplaceの設定を取得します。  Get AWS Marketplace Settings.
     * @summary AWS Marketplaceの設定を取得(Get AWS Marketplace Settings)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getSettings: (options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * AWSMarketplaceに連携するプラン情報を登録します。  Save plan information to be linked to AWSMarketplace.
     * @summary AWS Marketplaceに連携するプラン情報を登録(Save plan information to be linked to AWSMarketplace)
     * @param {SavePlanParam} [savePlanParam]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    savePlan: (savePlanParam?: SavePlanParam | undefined, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * AWS Marketplaceの顧客情報をSaaSusに同期します。  Sync AWS Marketplace customer information to SaaSus.
     * @summary AWS Marketplaceの顧客情報をSaaSusに同期します(Sync AWS Marketplace customer information to SaaSus)
     * @param {string} customerIdentifier 顧客ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    syncCustomer: (customerIdentifier: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * AWS Marketplaceの出品状況を更新します。  Update AWS Marketplace Listing Status.
     * @summary AWS Marketplaceの出品状況を更新(Update AWS Marketplace Listing Status)
     * @param {UpdateListingStatusParam} [updateListingStatusParam]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateListingStatus: (updateListingStatusParam?: UpdateListingStatusParam | undefined, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * AWS Marketplaceの設定を更新します。  Update AWS Marketplace Settings.
     * @summary AWS Marketplaceの設定を更新(Update AWS Marketplace Settings)
     * @param {UpdateSettingsParam} [updateSettingsParam]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateSettings: (updateSettingsParam?: UpdateSettingsParam | undefined, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Registration Tokenを検証します。  Verify Registration Token.
     * @summary Registration Tokenを検証(Verify Registration Token)
     * @param {VerifyRegistrationTokenParam} [verifyRegistrationTokenParam]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    verifyRegistrationToken: (verifyRegistrationTokenParam?: VerifyRegistrationTokenParam | undefined, options?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * AwsMarketplaceApi - functional programming interface
 * @export
 */
export declare const AwsMarketplaceApiFp: (configuration?: Configuration | undefined) => {
    /**
     * AWS Marketplaceに連携する顧客情報を新規作成します。  Create customer information to be linked to AWS Marketplace.
     * @summary AWS Marketplaceに連携する顧客情報を新規作成(Create customer information to be linked to AWS Marketplace)
     * @param {CreateCustomerParam} [createCustomerParam]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createCustomer(createCustomerParam?: CreateCustomerParam | undefined, options?: AxiosRequestConfig<any> | undefined): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<Customer>>;
    /**
     * AWS Marketplaceから商品の公開状況を取得します。  Retrieve the product\'s publication status from AWS Marketplace.
     * @summary AWS Marketplaceから商品の公開状況を取得(Obtain product publication status from AWS Marketplace)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCatalogEntityVisibility(options?: AxiosRequestConfig<any> | undefined): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<CatalogEntityVisibility>>;
    /**
     * CloudFormationのクイック作成リンクを取得します。  Get the CloudFormation Quick Create link.
     * @summary AWS CloudFormationのスタック作成リンクを取得(Get the link to create the AWS CloudFormation stack)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCloudFormationLaunchStackLink(options?: AxiosRequestConfig<any> | undefined): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<CloudFormationLaunchStackLink>>;
    /**
     * AWS Marketplaceに連携する顧客情報を取得します。  Get customer information to be linked to AWS Marketplace.
     * @summary AWS Marketplaceに連携する顧客情報を取得(Get customer information to be linked to AWS Marketplace)
     * @param {string} customerIdentifier 顧客ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCustomer(customerIdentifier: string, options?: AxiosRequestConfig<any> | undefined): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<Customer>>;
    /**
     * AWS Marketplaceに連携する顧客情報の一覧を取得します。  Get a list of customer information to be linked to AWS Marketplace.
     * @summary AWS Marketplaceに連携する顧客情報の一覧を取得(Get a list of customer information to be linked to AWS Marketplace)
     * @param {Array<string>} [tenantIds] 指定したテナントIDの顧客を取得する(Get customers with the specified tenant ID)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCustomers(tenantIds?: string[] | undefined, options?: AxiosRequestConfig<any> | undefined): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<Customers>>;
    /**
     * AWS Marketplaceの出品状況を取得します。  Get AWS Marketplace Listing Status.
     * @summary AWS Marketplaceの出品状況を取得(Get AWS Marketplace Listing Status)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getListingStatus(options?: AxiosRequestConfig<any> | undefined): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<GetListingStatusResult>>;
    /**
     * Marketplaceと連携するプラン情報を取得します。  Obtain plan information to link to AWS Marketplace.
     * @summary AWSMarketplaceに連携するプラン情報を取得(Obtain plan information to link to AWS Marketplace)
     * @param {string} planName AWS Marketplace連携プラン名
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getPlanByPlanName(planName: string, options?: AxiosRequestConfig<any> | undefined): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<Plan>>;
    /**
     * Marketplaceと連携するプラン情報を取得します。  Obtain plan information to link to AWS Marketplace.
     * @summary AWS Marketplaceに連携するプラン情報を取得(Obtain plan information to link to AWS Marketplace)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getPlans(options?: AxiosRequestConfig<any> | undefined): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<Plans>>;
    /**
     * AWS Marketplaceの設定を取得します。  Get AWS Marketplace Settings.
     * @summary AWS Marketplaceの設定を取得(Get AWS Marketplace Settings)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getSettings(options?: AxiosRequestConfig<any> | undefined): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<Settings>>;
    /**
     * AWSMarketplaceに連携するプラン情報を登録します。  Save plan information to be linked to AWSMarketplace.
     * @summary AWS Marketplaceに連携するプラン情報を登録(Save plan information to be linked to AWSMarketplace)
     * @param {SavePlanParam} [savePlanParam]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    savePlan(savePlanParam?: SavePlanParam | undefined, options?: AxiosRequestConfig<any> | undefined): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<void>>;
    /**
     * AWS Marketplaceの顧客情報をSaaSusに同期します。  Sync AWS Marketplace customer information to SaaSus.
     * @summary AWS Marketplaceの顧客情報をSaaSusに同期します(Sync AWS Marketplace customer information to SaaSus)
     * @param {string} customerIdentifier 顧客ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    syncCustomer(customerIdentifier: string, options?: AxiosRequestConfig<any> | undefined): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<void>>;
    /**
     * AWS Marketplaceの出品状況を更新します。  Update AWS Marketplace Listing Status.
     * @summary AWS Marketplaceの出品状況を更新(Update AWS Marketplace Listing Status)
     * @param {UpdateListingStatusParam} [updateListingStatusParam]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateListingStatus(updateListingStatusParam?: UpdateListingStatusParam | undefined, options?: AxiosRequestConfig<any> | undefined): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<void>>;
    /**
     * AWS Marketplaceの設定を更新します。  Update AWS Marketplace Settings.
     * @summary AWS Marketplaceの設定を更新(Update AWS Marketplace Settings)
     * @param {UpdateSettingsParam} [updateSettingsParam]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateSettings(updateSettingsParam?: UpdateSettingsParam | undefined, options?: AxiosRequestConfig<any> | undefined): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<void>>;
    /**
     * Registration Tokenを検証します。  Verify Registration Token.
     * @summary Registration Tokenを検証(Verify Registration Token)
     * @param {VerifyRegistrationTokenParam} [verifyRegistrationTokenParam]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    verifyRegistrationToken(verifyRegistrationTokenParam?: VerifyRegistrationTokenParam | undefined, options?: AxiosRequestConfig<any> | undefined): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<void>>;
};
/**
 * AwsMarketplaceApi - factory interface
 * @export
 */
export declare const AwsMarketplaceApiFactory: (configuration?: Configuration | undefined, basePath?: string | undefined, axios?: AxiosInstance | undefined) => {
    /**
     * AWS Marketplaceに連携する顧客情報を新規作成します。  Create customer information to be linked to AWS Marketplace.
     * @summary AWS Marketplaceに連携する顧客情報を新規作成(Create customer information to be linked to AWS Marketplace)
     * @param {CreateCustomerParam} [createCustomerParam]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createCustomer(createCustomerParam?: CreateCustomerParam | undefined, options?: any): AxiosPromise<Customer>;
    /**
     * AWS Marketplaceから商品の公開状況を取得します。  Retrieve the product\'s publication status from AWS Marketplace.
     * @summary AWS Marketplaceから商品の公開状況を取得(Obtain product publication status from AWS Marketplace)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCatalogEntityVisibility(options?: any): AxiosPromise<CatalogEntityVisibility>;
    /**
     * CloudFormationのクイック作成リンクを取得します。  Get the CloudFormation Quick Create link.
     * @summary AWS CloudFormationのスタック作成リンクを取得(Get the link to create the AWS CloudFormation stack)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCloudFormationLaunchStackLink(options?: any): AxiosPromise<CloudFormationLaunchStackLink>;
    /**
     * AWS Marketplaceに連携する顧客情報を取得します。  Get customer information to be linked to AWS Marketplace.
     * @summary AWS Marketplaceに連携する顧客情報を取得(Get customer information to be linked to AWS Marketplace)
     * @param {string} customerIdentifier 顧客ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCustomer(customerIdentifier: string, options?: any): AxiosPromise<Customer>;
    /**
     * AWS Marketplaceに連携する顧客情報の一覧を取得します。  Get a list of customer information to be linked to AWS Marketplace.
     * @summary AWS Marketplaceに連携する顧客情報の一覧を取得(Get a list of customer information to be linked to AWS Marketplace)
     * @param {Array<string>} [tenantIds] 指定したテナントIDの顧客を取得する(Get customers with the specified tenant ID)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCustomers(tenantIds?: string[] | undefined, options?: any): AxiosPromise<Customers>;
    /**
     * AWS Marketplaceの出品状況を取得します。  Get AWS Marketplace Listing Status.
     * @summary AWS Marketplaceの出品状況を取得(Get AWS Marketplace Listing Status)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getListingStatus(options?: any): AxiosPromise<GetListingStatusResult>;
    /**
     * Marketplaceと連携するプラン情報を取得します。  Obtain plan information to link to AWS Marketplace.
     * @summary AWSMarketplaceに連携するプラン情報を取得(Obtain plan information to link to AWS Marketplace)
     * @param {string} planName AWS Marketplace連携プラン名
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getPlanByPlanName(planName: string, options?: any): AxiosPromise<Plan>;
    /**
     * Marketplaceと連携するプラン情報を取得します。  Obtain plan information to link to AWS Marketplace.
     * @summary AWS Marketplaceに連携するプラン情報を取得(Obtain plan information to link to AWS Marketplace)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getPlans(options?: any): AxiosPromise<Plans>;
    /**
     * AWS Marketplaceの設定を取得します。  Get AWS Marketplace Settings.
     * @summary AWS Marketplaceの設定を取得(Get AWS Marketplace Settings)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getSettings(options?: any): AxiosPromise<Settings>;
    /**
     * AWSMarketplaceに連携するプラン情報を登録します。  Save plan information to be linked to AWSMarketplace.
     * @summary AWS Marketplaceに連携するプラン情報を登録(Save plan information to be linked to AWSMarketplace)
     * @param {SavePlanParam} [savePlanParam]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    savePlan(savePlanParam?: SavePlanParam | undefined, options?: any): AxiosPromise<void>;
    /**
     * AWS Marketplaceの顧客情報をSaaSusに同期します。  Sync AWS Marketplace customer information to SaaSus.
     * @summary AWS Marketplaceの顧客情報をSaaSusに同期します(Sync AWS Marketplace customer information to SaaSus)
     * @param {string} customerIdentifier 顧客ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    syncCustomer(customerIdentifier: string, options?: any): AxiosPromise<void>;
    /**
     * AWS Marketplaceの出品状況を更新します。  Update AWS Marketplace Listing Status.
     * @summary AWS Marketplaceの出品状況を更新(Update AWS Marketplace Listing Status)
     * @param {UpdateListingStatusParam} [updateListingStatusParam]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateListingStatus(updateListingStatusParam?: UpdateListingStatusParam | undefined, options?: any): AxiosPromise<void>;
    /**
     * AWS Marketplaceの設定を更新します。  Update AWS Marketplace Settings.
     * @summary AWS Marketplaceの設定を更新(Update AWS Marketplace Settings)
     * @param {UpdateSettingsParam} [updateSettingsParam]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateSettings(updateSettingsParam?: UpdateSettingsParam | undefined, options?: any): AxiosPromise<void>;
    /**
     * Registration Tokenを検証します。  Verify Registration Token.
     * @summary Registration Tokenを検証(Verify Registration Token)
     * @param {VerifyRegistrationTokenParam} [verifyRegistrationTokenParam]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    verifyRegistrationToken(verifyRegistrationTokenParam?: VerifyRegistrationTokenParam | undefined, options?: any): AxiosPromise<void>;
};
/**
 * AwsMarketplaceApi - object-oriented interface
 * @export
 * @class AwsMarketplaceApi
 * @extends {BaseAPI}
 */
export declare class AwsMarketplaceApi extends BaseAPI {
    /**
     * AWS Marketplaceに連携する顧客情報を新規作成します。  Create customer information to be linked to AWS Marketplace.
     * @summary AWS Marketplaceに連携する顧客情報を新規作成(Create customer information to be linked to AWS Marketplace)
     * @param {CreateCustomerParam} [createCustomerParam]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AwsMarketplaceApi
     */
    createCustomer(createCustomerParam?: CreateCustomerParam, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<Customer, any>>;
    /**
     * AWS Marketplaceから商品の公開状況を取得します。  Retrieve the product\'s publication status from AWS Marketplace.
     * @summary AWS Marketplaceから商品の公開状況を取得(Obtain product publication status from AWS Marketplace)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AwsMarketplaceApi
     */
    getCatalogEntityVisibility(options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<CatalogEntityVisibility, any>>;
    /**
     * CloudFormationのクイック作成リンクを取得します。  Get the CloudFormation Quick Create link.
     * @summary AWS CloudFormationのスタック作成リンクを取得(Get the link to create the AWS CloudFormation stack)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AwsMarketplaceApi
     */
    getCloudFormationLaunchStackLink(options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<CloudFormationLaunchStackLink, any>>;
    /**
     * AWS Marketplaceに連携する顧客情報を取得します。  Get customer information to be linked to AWS Marketplace.
     * @summary AWS Marketplaceに連携する顧客情報を取得(Get customer information to be linked to AWS Marketplace)
     * @param {string} customerIdentifier 顧客ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AwsMarketplaceApi
     */
    getCustomer(customerIdentifier: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<Customer, any>>;
    /**
     * AWS Marketplaceに連携する顧客情報の一覧を取得します。  Get a list of customer information to be linked to AWS Marketplace.
     * @summary AWS Marketplaceに連携する顧客情報の一覧を取得(Get a list of customer information to be linked to AWS Marketplace)
     * @param {Array<string>} [tenantIds] 指定したテナントIDの顧客を取得する(Get customers with the specified tenant ID)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AwsMarketplaceApi
     */
    getCustomers(tenantIds?: Array<string>, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<Customers, any>>;
    /**
     * AWS Marketplaceの出品状況を取得します。  Get AWS Marketplace Listing Status.
     * @summary AWS Marketplaceの出品状況を取得(Get AWS Marketplace Listing Status)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AwsMarketplaceApi
     */
    getListingStatus(options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<GetListingStatusResult, any>>;
    /**
     * Marketplaceと連携するプラン情報を取得します。  Obtain plan information to link to AWS Marketplace.
     * @summary AWSMarketplaceに連携するプラン情報を取得(Obtain plan information to link to AWS Marketplace)
     * @param {string} planName AWS Marketplace連携プラン名
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AwsMarketplaceApi
     */
    getPlanByPlanName(planName: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<Plan, any>>;
    /**
     * Marketplaceと連携するプラン情報を取得します。  Obtain plan information to link to AWS Marketplace.
     * @summary AWS Marketplaceに連携するプラン情報を取得(Obtain plan information to link to AWS Marketplace)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AwsMarketplaceApi
     */
    getPlans(options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<Plans, any>>;
    /**
     * AWS Marketplaceの設定を取得します。  Get AWS Marketplace Settings.
     * @summary AWS Marketplaceの設定を取得(Get AWS Marketplace Settings)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AwsMarketplaceApi
     */
    getSettings(options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<Settings, any>>;
    /**
     * AWSMarketplaceに連携するプラン情報を登録します。  Save plan information to be linked to AWSMarketplace.
     * @summary AWS Marketplaceに連携するプラン情報を登録(Save plan information to be linked to AWSMarketplace)
     * @param {SavePlanParam} [savePlanParam]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AwsMarketplaceApi
     */
    savePlan(savePlanParam?: SavePlanParam, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * AWS Marketplaceの顧客情報をSaaSusに同期します。  Sync AWS Marketplace customer information to SaaSus.
     * @summary AWS Marketplaceの顧客情報をSaaSusに同期します(Sync AWS Marketplace customer information to SaaSus)
     * @param {string} customerIdentifier 顧客ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AwsMarketplaceApi
     */
    syncCustomer(customerIdentifier: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * AWS Marketplaceの出品状況を更新します。  Update AWS Marketplace Listing Status.
     * @summary AWS Marketplaceの出品状況を更新(Update AWS Marketplace Listing Status)
     * @param {UpdateListingStatusParam} [updateListingStatusParam]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AwsMarketplaceApi
     */
    updateListingStatus(updateListingStatusParam?: UpdateListingStatusParam, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * AWS Marketplaceの設定を更新します。  Update AWS Marketplace Settings.
     * @summary AWS Marketplaceの設定を更新(Update AWS Marketplace Settings)
     * @param {UpdateSettingsParam} [updateSettingsParam]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AwsMarketplaceApi
     */
    updateSettings(updateSettingsParam?: UpdateSettingsParam, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * Registration Tokenを検証します。  Verify Registration Token.
     * @summary Registration Tokenを検証(Verify Registration Token)
     * @param {VerifyRegistrationTokenParam} [verifyRegistrationTokenParam]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AwsMarketplaceApi
     */
    verifyRegistrationToken(verifyRegistrationTokenParam?: VerifyRegistrationTokenParam, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
}
/**
 * ErrorApi - axios parameter creator
 * @export
 */
export declare const ErrorApiAxiosParamCreator: (configuration?: Configuration | undefined) => {
    /**
     * テスト用途で使用するエンドポイントです。ステータスコード500でサーバーエラーを返却します。  This endpoint is used for testing purposes. Returns a server error with status code 500.
     * @summary ステータスコード500でサーバーエラーを返却(Return Internal Server Error)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    returnInternalServerError: (options?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * ErrorApi - functional programming interface
 * @export
 */
export declare const ErrorApiFp: (configuration?: Configuration | undefined) => {
    /**
     * テスト用途で使用するエンドポイントです。ステータスコード500でサーバーエラーを返却します。  This endpoint is used for testing purposes. Returns a server error with status code 500.
     * @summary ステータスコード500でサーバーエラーを返却(Return Internal Server Error)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    returnInternalServerError(options?: AxiosRequestConfig<any> | undefined): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<void>>;
};
/**
 * ErrorApi - factory interface
 * @export
 */
export declare const ErrorApiFactory: (configuration?: Configuration | undefined, basePath?: string | undefined, axios?: AxiosInstance | undefined) => {
    /**
     * テスト用途で使用するエンドポイントです。ステータスコード500でサーバーエラーを返却します。  This endpoint is used for testing purposes. Returns a server error with status code 500.
     * @summary ステータスコード500でサーバーエラーを返却(Return Internal Server Error)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    returnInternalServerError(options?: any): AxiosPromise<void>;
};
/**
 * ErrorApi - object-oriented interface
 * @export
 * @class ErrorApi
 * @extends {BaseAPI}
 */
export declare class ErrorApi extends BaseAPI {
    /**
     * テスト用途で使用するエンドポイントです。ステータスコード500でサーバーエラーを返却します。  This endpoint is used for testing purposes. Returns a server error with status code 500.
     * @summary ステータスコード500でサーバーエラーを返却(Return Internal Server Error)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ErrorApi
     */
    returnInternalServerError(options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
}
