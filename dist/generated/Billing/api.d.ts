/**
 * SaaSus Billing API Schema
 * SaaSus Billing API Schema
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import { Configuration } from './configuration';
import { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { RequestArgs, BaseAPI } from './base';
/**
 *
 * @export
 * @interface ModelError
 */
export interface ModelError {
    /**
     * permission_denied
     * @type {string}
     * @memberof ModelError
     */
    'type': string;
    /**
     * Error message
     * @type {string}
     * @memberof ModelError
     */
    'message': string;
}
/**
 *
 * @export
 * @interface StripeInfo
 */
export interface StripeInfo {
    /**
     *
     * @type {boolean}
     * @memberof StripeInfo
     */
    'is_registered': boolean;
}
/**
 *
 * @export
 * @interface UpdateStripeInfoParam
 */
export interface UpdateStripeInfoParam {
    /**
     * secret key
     * @type {string}
     * @memberof UpdateStripeInfoParam
     */
    'secret_key': string;
}
/**
 * ErrorApi - axios parameter creator
 * @export
 */
export declare const ErrorApiAxiosParamCreator: (configuration?: Configuration | undefined) => {
    /**
     * This endpoint is used for testing purposes. Returns a server error with status code 500.
     * @summary Return Internal Server Error
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    returnInternalServerError: (options?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * ErrorApi - functional programming interface
 * @export
 */
export declare const ErrorApiFp: (configuration?: Configuration | undefined) => {
    /**
     * This endpoint is used for testing purposes. Returns a server error with status code 500.
     * @summary Return Internal Server Error
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    returnInternalServerError(options?: AxiosRequestConfig<any> | undefined): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<void>>;
};
/**
 * ErrorApi - factory interface
 * @export
 */
export declare const ErrorApiFactory: (configuration?: Configuration | undefined, basePath?: string | undefined, axios?: AxiosInstance | undefined) => {
    /**
     * This endpoint is used for testing purposes. Returns a server error with status code 500.
     * @summary Return Internal Server Error
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    returnInternalServerError(options?: any): AxiosPromise<void>;
};
/**
 * ErrorApi - object-oriented interface
 * @export
 * @class ErrorApi
 * @extends {BaseAPI}
 */
export declare class ErrorApi extends BaseAPI {
    /**
     * This endpoint is used for testing purposes. Returns a server error with status code 500.
     * @summary Return Internal Server Error
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ErrorApi
     */
    returnInternalServerError(options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
}
/**
 * StripeApi - axios parameter creator
 * @export
 */
export declare const StripeApiAxiosParamCreator: (configuration?: Configuration | undefined) => {
    /**
     * Delete connection with external billing SaaS
     * @summary Delete Stripe Connection
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteStripeInfo: (options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Get information on connnections with external billing SaaS. Currently possible to integrate with Stripe. Without integration, you will need to implement billing using the SaaSus SDK/API.
     * @summary Get Stripe Connection information
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getStripeInfo: (options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Updates information on connection with external billing SaaS. Currently possible to connect to Stripe.
     * @summary Update Stripe Connection Info
     * @param {UpdateStripeInfoParam} [updateStripeInfoParam]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateStripeInfo: (updateStripeInfoParam?: UpdateStripeInfoParam | undefined, options?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * StripeApi - functional programming interface
 * @export
 */
export declare const StripeApiFp: (configuration?: Configuration | undefined) => {
    /**
     * Delete connection with external billing SaaS
     * @summary Delete Stripe Connection
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteStripeInfo(options?: AxiosRequestConfig<any> | undefined): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<void>>;
    /**
     * Get information on connnections with external billing SaaS. Currently possible to integrate with Stripe. Without integration, you will need to implement billing using the SaaSus SDK/API.
     * @summary Get Stripe Connection information
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getStripeInfo(options?: AxiosRequestConfig<any> | undefined): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<StripeInfo>>;
    /**
     * Updates information on connection with external billing SaaS. Currently possible to connect to Stripe.
     * @summary Update Stripe Connection Info
     * @param {UpdateStripeInfoParam} [updateStripeInfoParam]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateStripeInfo(updateStripeInfoParam?: UpdateStripeInfoParam | undefined, options?: AxiosRequestConfig<any> | undefined): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<void>>;
};
/**
 * StripeApi - factory interface
 * @export
 */
export declare const StripeApiFactory: (configuration?: Configuration | undefined, basePath?: string | undefined, axios?: AxiosInstance | undefined) => {
    /**
     * Delete connection with external billing SaaS
     * @summary Delete Stripe Connection
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteStripeInfo(options?: any): AxiosPromise<void>;
    /**
     * Get information on connnections with external billing SaaS. Currently possible to integrate with Stripe. Without integration, you will need to implement billing using the SaaSus SDK/API.
     * @summary Get Stripe Connection information
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getStripeInfo(options?: any): AxiosPromise<StripeInfo>;
    /**
     * Updates information on connection with external billing SaaS. Currently possible to connect to Stripe.
     * @summary Update Stripe Connection Info
     * @param {UpdateStripeInfoParam} [updateStripeInfoParam]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateStripeInfo(updateStripeInfoParam?: UpdateStripeInfoParam | undefined, options?: any): AxiosPromise<void>;
};
/**
 * StripeApi - object-oriented interface
 * @export
 * @class StripeApi
 * @extends {BaseAPI}
 */
export declare class StripeApi extends BaseAPI {
    /**
     * Delete connection with external billing SaaS
     * @summary Delete Stripe Connection
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StripeApi
     */
    deleteStripeInfo(options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * Get information on connnections with external billing SaaS. Currently possible to integrate with Stripe. Without integration, you will need to implement billing using the SaaSus SDK/API.
     * @summary Get Stripe Connection information
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StripeApi
     */
    getStripeInfo(options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<StripeInfo, any>>;
    /**
     * Updates information on connection with external billing SaaS. Currently possible to connect to Stripe.
     * @summary Update Stripe Connection Info
     * @param {UpdateStripeInfoParam} [updateStripeInfoParam]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StripeApi
     */
    updateStripeInfo(updateStripeInfoParam?: UpdateStripeInfoParam, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
}
