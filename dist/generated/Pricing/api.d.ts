/**
 * SaaSus Pricing API Schema
 * SaaSus Pricing API Schema
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import { Configuration } from './configuration';
import { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { RequestArgs, BaseAPI } from './base';
/**
 *
 * @export
 * @interface MeteringUnitDateCount
 */
export interface MeteringUnitDateCount {
    /**
     * 計測ユニット名
     * @type {string}
     * @memberof MeteringUnitDateCount
     */
    'metering_unit_name': string;
    /**
     * 日
     * @type {string}
     * @memberof MeteringUnitDateCount
     */
    'date': string;
    /**
     * 件数
     * @type {number}
     * @memberof MeteringUnitDateCount
     */
    'count': number;
}
/**
 *
 * @export
 * @interface MeteringUnitDateCounts
 */
export interface MeteringUnitDateCounts {
    /**
     *
     * @type {Array<MeteringUnitDateCount>}
     * @memberof MeteringUnitDateCounts
     */
    'counts': Array<MeteringUnitDateCount>;
}
/**
 *
 * @export
 * @interface MeteringUnitMonthCount
 */
export interface MeteringUnitMonthCount {
    /**
     * 計測ユニット名
     * @type {string}
     * @memberof MeteringUnitMonthCount
     */
    'metering_unit_name': string;
    /**
     * 月
     * @type {string}
     * @memberof MeteringUnitMonthCount
     */
    'month': string;
    /**
     * 件数
     * @type {number}
     * @memberof MeteringUnitMonthCount
     */
    'count': number;
}
/**
 *
 * @export
 * @interface MeteringUnitMonthCounts
 */
export interface MeteringUnitMonthCounts {
    /**
     *
     * @type {Array<MeteringUnitMonthCount>}
     * @memberof MeteringUnitMonthCounts
     */
    'counts': Array<MeteringUnitMonthCount>;
}
/**
 *
 * @export
 * @interface MeteringUnitTimestampCount
 */
export interface MeteringUnitTimestampCount {
    /**
     * 計測ユニット名
     * @type {string}
     * @memberof MeteringUnitTimestampCount
     */
    'metering_unit_name': string;
    /**
     * タイムスタンプ
     * @type {number}
     * @memberof MeteringUnitTimestampCount
     */
    'timestamp': number;
    /**
     * 件数
     * @type {number}
     * @memberof MeteringUnitTimestampCount
     */
    'count': number;
}
/**
 *
 * @export
 * @interface ModelError
 */
export interface ModelError {
    /**
     * permission_denied
     * @type {string}
     * @memberof ModelError
     */
    'type': string;
    /**
     * Error message
     * @type {string}
     * @memberof ModelError
     */
    'message': string;
}
/**
 *
 * @export
 * @interface PricingFixedUnit
 */
export interface PricingFixedUnit {
    /**
     *
     * @type {string}
     * @memberof PricingFixedUnit
     */
    'id': string;
    /**
     *
     * @type {boolean}
     * @memberof PricingFixedUnit
     */
    'used': boolean;
    /**
     * 金額
     * @type {number}
     * @memberof PricingFixedUnit
     */
    'unit_amount': number;
    /**
     *
     * @type {RecurringInterval}
     * @memberof PricingFixedUnit
     */
    'recurring_interval': RecurringInterval;
    /**
     *
     * @type {string}
     * @memberof PricingFixedUnit
     */
    'name': string;
    /**
     *
     * @type {string}
     * @memberof PricingFixedUnit
     */
    'display_name': string;
    /**
     *
     * @type {string}
     * @memberof PricingFixedUnit
     */
    'description': string;
    /**
     *
     * @type {UnitType}
     * @memberof PricingFixedUnit
     */
    'type': UnitType;
    /**
     *
     * @type {string}
     * @memberof PricingFixedUnit
     */
    'currency': string;
}
/**
 *
 * @export
 * @interface PricingFixedUnitAllOf
 */
export interface PricingFixedUnitAllOf {
    /**
     *
     * @type {string}
     * @memberof PricingFixedUnitAllOf
     */
    'id': string;
    /**
     *
     * @type {boolean}
     * @memberof PricingFixedUnitAllOf
     */
    'used': boolean;
}
/**
 *
 * @export
 * @interface PricingFixedUnitForSave
 */
export interface PricingFixedUnitForSave {
    /**
     * 金額
     * @type {number}
     * @memberof PricingFixedUnitForSave
     */
    'unit_amount': number;
    /**
     *
     * @type {RecurringInterval}
     * @memberof PricingFixedUnitForSave
     */
    'recurring_interval': RecurringInterval;
    /**
     *
     * @type {string}
     * @memberof PricingFixedUnitForSave
     */
    'name': string;
    /**
     *
     * @type {string}
     * @memberof PricingFixedUnitForSave
     */
    'display_name': string;
    /**
     *
     * @type {string}
     * @memberof PricingFixedUnitForSave
     */
    'description': string;
    /**
     *
     * @type {UnitType}
     * @memberof PricingFixedUnitForSave
     */
    'type': UnitType;
    /**
     *
     * @type {string}
     * @memberof PricingFixedUnitForSave
     */
    'currency': string;
}
/**
 *
 * @export
 * @interface PricingFixedUnitForSaveAllOf
 */
export interface PricingFixedUnitForSaveAllOf {
    /**
     * 金額
     * @type {number}
     * @memberof PricingFixedUnitForSaveAllOf
     */
    'unit_amount': number;
    /**
     *
     * @type {RecurringInterval}
     * @memberof PricingFixedUnitForSaveAllOf
     */
    'recurring_interval': RecurringInterval;
}
/**
 *
 * @export
 * @interface PricingMenu
 */
export interface PricingMenu {
    /**
     *
     * @type {string}
     * @memberof PricingMenu
     */
    'id': string;
    /**
     * メニュー名
     * @type {string}
     * @memberof PricingMenu
     */
    'name': string;
    /**
     * メニュー表示名
     * @type {string}
     * @memberof PricingMenu
     */
    'display_name': string;
    /**
     * メニュー説明
     * @type {string}
     * @memberof PricingMenu
     */
    'description': string;
    /**
     * メニューの使用済み設定
     * @type {boolean}
     * @memberof PricingMenu
     */
    'used': boolean;
    /**
     *
     * @type {Array<PricingUnit>}
     * @memberof PricingMenu
     */
    'units': Array<PricingUnit>;
}
/**
 *
 * @export
 * @interface PricingMenuAllOf
 */
export interface PricingMenuAllOf {
    /**
     *
     * @type {string}
     * @memberof PricingMenuAllOf
     */
    'id': string;
}
/**
 *
 * @export
 * @interface PricingMenuProps
 */
export interface PricingMenuProps {
    /**
     * メニュー名
     * @type {string}
     * @memberof PricingMenuProps
     */
    'name': string;
    /**
     * メニュー表示名
     * @type {string}
     * @memberof PricingMenuProps
     */
    'display_name': string;
    /**
     * メニュー説明
     * @type {string}
     * @memberof PricingMenuProps
     */
    'description': string;
    /**
     * メニューの使用済み設定
     * @type {boolean}
     * @memberof PricingMenuProps
     */
    'used': boolean;
    /**
     *
     * @type {Array<PricingUnit>}
     * @memberof PricingMenuProps
     */
    'units': Array<PricingUnit>;
}
/**
 *
 * @export
 * @interface PricingMenuPropsAllOf
 */
export interface PricingMenuPropsAllOf {
    /**
     * メニュー名
     * @type {string}
     * @memberof PricingMenuPropsAllOf
     */
    'name': string;
    /**
     * メニュー表示名
     * @type {string}
     * @memberof PricingMenuPropsAllOf
     */
    'display_name': string;
    /**
     * メニュー説明
     * @type {string}
     * @memberof PricingMenuPropsAllOf
     */
    'description': string;
    /**
     * メニューの使用済み設定
     * @type {boolean}
     * @memberof PricingMenuPropsAllOf
     */
    'used': boolean;
}
/**
 *
 * @export
 * @interface PricingMenus
 */
export interface PricingMenus {
    /**
     *
     * @type {Array<PricingMenu>}
     * @memberof PricingMenus
     */
    'pricing_menus': Array<PricingMenu>;
}
/**
 *
 * @export
 * @interface PricingPlan
 */
export interface PricingPlan {
    /**
     *
     * @type {string}
     * @memberof PricingPlan
     */
    'id': string;
    /**
     * 料金プラン名
     * @type {string}
     * @memberof PricingPlan
     */
    'name': string;
    /**
     *
     * @type {string}
     * @memberof PricingPlan
     */
    'display_name': string;
    /**
     * 料金プラン説明
     * @type {string}
     * @memberof PricingPlan
     */
    'description': string;
    /**
     * 料金プランの使用済み設定
     * @type {boolean}
     * @memberof PricingPlan
     */
    'used': boolean;
    /**
     *
     * @type {Array<PricingMenu>}
     * @memberof PricingPlan
     */
    'pricing_menus': Array<PricingMenu>;
}
/**
 *
 * @export
 * @interface PricingPlanProps
 */
export interface PricingPlanProps {
    /**
     * 料金プラン名
     * @type {string}
     * @memberof PricingPlanProps
     */
    'name': string;
    /**
     *
     * @type {string}
     * @memberof PricingPlanProps
     */
    'display_name': string;
    /**
     * 料金プラン説明
     * @type {string}
     * @memberof PricingPlanProps
     */
    'description': string;
    /**
     * 料金プランの使用済み設定
     * @type {boolean}
     * @memberof PricingPlanProps
     */
    'used': boolean;
    /**
     *
     * @type {Array<PricingMenu>}
     * @memberof PricingPlanProps
     */
    'pricing_menus': Array<PricingMenu>;
}
/**
 *
 * @export
 * @interface PricingPlanPropsAllOf
 */
export interface PricingPlanPropsAllOf {
    /**
     * 料金プラン名
     * @type {string}
     * @memberof PricingPlanPropsAllOf
     */
    'name': string;
    /**
     *
     * @type {string}
     * @memberof PricingPlanPropsAllOf
     */
    'display_name': string;
    /**
     * 料金プラン説明
     * @type {string}
     * @memberof PricingPlanPropsAllOf
     */
    'description': string;
    /**
     * 料金プランの使用済み設定
     * @type {boolean}
     * @memberof PricingPlanPropsAllOf
     */
    'used': boolean;
}
/**
 *
 * @export
 * @interface PricingPlans
 */
export interface PricingPlans {
    /**
     *
     * @type {Array<PricingPlan>}
     * @memberof PricingPlans
     */
    'pricing_plans': Array<PricingPlan>;
}
/**
 *
 * @export
 * @interface PricingTier
 */
export interface PricingTier {
    /**
     * 上限
     * @type {number}
     * @memberof PricingTier
     */
    'up_to': number;
    /**
     * 単位金額
     * @type {number}
     * @memberof PricingTier
     */
    'unit_amount': number;
    /**
     * 固定金額
     * @type {number}
     * @memberof PricingTier
     */
    'flat_amount': number;
    /**
     * inf /確認/
     * @type {boolean}
     * @memberof PricingTier
     */
    'inf': boolean;
}
/**
 *
 * @export
 * @interface PricingTieredUnit
 */
export interface PricingTieredUnit {
    /**
     *
     * @type {string}
     * @memberof PricingTieredUnit
     */
    'id': string;
    /**
     *
     * @type {string}
     * @memberof PricingTieredUnit
     */
    'metering_unit_id': string;
    /**
     *
     * @type {RecurringInterval}
     * @memberof PricingTieredUnit
     */
    'recurring_interval': RecurringInterval;
    /**
     *
     * @type {boolean}
     * @memberof PricingTieredUnit
     */
    'used': boolean;
    /**
     * 上限値
     * @type {number}
     * @memberof PricingTieredUnit
     */
    'upper_count': number;
    /**
     *
     * @type {string}
     * @memberof PricingTieredUnit
     */
    'metering_unit_name': string;
    /**
     *
     * @type {string}
     * @memberof PricingTieredUnit
     */
    'name': string;
    /**
     *
     * @type {string}
     * @memberof PricingTieredUnit
     */
    'display_name': string;
    /**
     *
     * @type {string}
     * @memberof PricingTieredUnit
     */
    'description': string;
    /**
     *
     * @type {UnitType}
     * @memberof PricingTieredUnit
     */
    'type': UnitType;
    /**
     *
     * @type {string}
     * @memberof PricingTieredUnit
     */
    'currency': string;
    /**
     *
     * @type {Array<PricingTier>}
     * @memberof PricingTieredUnit
     */
    'tiers': Array<PricingTier>;
}
/**
 *
 * @export
 * @interface PricingTieredUnitForSave
 */
export interface PricingTieredUnitForSave {
    /**
     * 上限値
     * @type {number}
     * @memberof PricingTieredUnitForSave
     */
    'upper_count': number;
    /**
     *
     * @type {string}
     * @memberof PricingTieredUnitForSave
     */
    'metering_unit_name': string;
    /**
     *
     * @type {string}
     * @memberof PricingTieredUnitForSave
     */
    'name': string;
    /**
     *
     * @type {string}
     * @memberof PricingTieredUnitForSave
     */
    'display_name': string;
    /**
     *
     * @type {string}
     * @memberof PricingTieredUnitForSave
     */
    'description': string;
    /**
     *
     * @type {UnitType}
     * @memberof PricingTieredUnitForSave
     */
    'type': UnitType;
    /**
     *
     * @type {string}
     * @memberof PricingTieredUnitForSave
     */
    'currency': string;
    /**
     *
     * @type {Array<PricingTier>}
     * @memberof PricingTieredUnitForSave
     */
    'tiers': Array<PricingTier>;
}
/**
 *
 * @export
 * @interface PricingTieredUsageUnit
 */
export interface PricingTieredUsageUnit {
    /**
     *
     * @type {string}
     * @memberof PricingTieredUsageUnit
     */
    'id': string;
    /**
     *
     * @type {string}
     * @memberof PricingTieredUsageUnit
     */
    'metering_unit_id': string;
    /**
     *
     * @type {RecurringInterval}
     * @memberof PricingTieredUsageUnit
     */
    'recurring_interval': RecurringInterval;
    /**
     *
     * @type {boolean}
     * @memberof PricingTieredUsageUnit
     */
    'used': boolean;
    /**
     * 上限値
     * @type {number}
     * @memberof PricingTieredUsageUnit
     */
    'upper_count': number;
    /**
     *
     * @type {string}
     * @memberof PricingTieredUsageUnit
     */
    'metering_unit_name': string;
    /**
     *
     * @type {string}
     * @memberof PricingTieredUsageUnit
     */
    'name': string;
    /**
     *
     * @type {string}
     * @memberof PricingTieredUsageUnit
     */
    'display_name': string;
    /**
     *
     * @type {string}
     * @memberof PricingTieredUsageUnit
     */
    'description': string;
    /**
     *
     * @type {UnitType}
     * @memberof PricingTieredUsageUnit
     */
    'type': UnitType;
    /**
     *
     * @type {string}
     * @memberof PricingTieredUsageUnit
     */
    'currency': string;
    /**
     *
     * @type {Array<PricingTier>}
     * @memberof PricingTieredUsageUnit
     */
    'tiers': Array<PricingTier>;
}
/**
 *
 * @export
 * @interface PricingTieredUsageUnitAllOf
 */
export interface PricingTieredUsageUnitAllOf {
    /**
     *
     * @type {string}
     * @memberof PricingTieredUsageUnitAllOf
     */
    'id': string;
    /**
     *
     * @type {string}
     * @memberof PricingTieredUsageUnitAllOf
     */
    'metering_unit_id': string;
    /**
     *
     * @type {RecurringInterval}
     * @memberof PricingTieredUsageUnitAllOf
     */
    'recurring_interval': RecurringInterval;
    /**
     *
     * @type {boolean}
     * @memberof PricingTieredUsageUnitAllOf
     */
    'used': boolean;
}
/**
 *
 * @export
 * @interface PricingTieredUsageUnitForSave
 */
export interface PricingTieredUsageUnitForSave {
    /**
     * 上限値
     * @type {number}
     * @memberof PricingTieredUsageUnitForSave
     */
    'upper_count': number;
    /**
     *
     * @type {string}
     * @memberof PricingTieredUsageUnitForSave
     */
    'metering_unit_name': string;
    /**
     *
     * @type {string}
     * @memberof PricingTieredUsageUnitForSave
     */
    'name': string;
    /**
     *
     * @type {string}
     * @memberof PricingTieredUsageUnitForSave
     */
    'display_name': string;
    /**
     *
     * @type {string}
     * @memberof PricingTieredUsageUnitForSave
     */
    'description': string;
    /**
     *
     * @type {UnitType}
     * @memberof PricingTieredUsageUnitForSave
     */
    'type': UnitType;
    /**
     *
     * @type {string}
     * @memberof PricingTieredUsageUnitForSave
     */
    'currency': string;
    /**
     *
     * @type {Array<PricingTier>}
     * @memberof PricingTieredUsageUnitForSave
     */
    'tiers': Array<PricingTier>;
}
/**
 *
 * @export
 * @interface PricingTieredUsageUnitForSaveAllOf
 */
export interface PricingTieredUsageUnitForSaveAllOf {
    /**
     * 上限値
     * @type {number}
     * @memberof PricingTieredUsageUnitForSaveAllOf
     */
    'upper_count': number;
    /**
     *
     * @type {string}
     * @memberof PricingTieredUsageUnitForSaveAllOf
     */
    'metering_unit_name': string;
}
/**
 *
 * @export
 * @interface PricingTiers
 */
export interface PricingTiers {
    /**
     *
     * @type {Array<PricingTier>}
     * @memberof PricingTiers
     */
    'tiers': Array<PricingTier>;
}
/**
 * @type PricingUnit
 * @export
 */
export declare type PricingUnit = PricingFixedUnit | PricingTieredUnit | PricingTieredUsageUnit | PricingUsageUnit;
/**
 *
 * @export
 * @interface PricingUnitBaseProps
 */
export interface PricingUnitBaseProps {
    /**
     *
     * @type {string}
     * @memberof PricingUnitBaseProps
     */
    'name': string;
    /**
     *
     * @type {string}
     * @memberof PricingUnitBaseProps
     */
    'display_name': string;
    /**
     *
     * @type {string}
     * @memberof PricingUnitBaseProps
     */
    'description': string;
    /**
     *
     * @type {UnitType}
     * @memberof PricingUnitBaseProps
     */
    'type': UnitType;
    /**
     *
     * @type {string}
     * @memberof PricingUnitBaseProps
     */
    'currency': string;
}
/**
 * @type PricingUnitForSave
 * @export
 */
export declare type PricingUnitForSave = PricingFixedUnitForSave | PricingTieredUnitForSave | PricingTieredUsageUnitForSave | PricingUsageUnitForSave;
/**
 *
 * @export
 * @interface PricingUnits
 */
export interface PricingUnits {
    /**
     *
     * @type {Array<PricingUnit>}
     * @memberof PricingUnits
     */
    'units': Array<PricingUnit>;
}
/**
 *
 * @export
 * @interface PricingUsageUnit
 */
export interface PricingUsageUnit {
    /**
     *
     * @type {string}
     * @memberof PricingUsageUnit
     */
    'id': string;
    /**
     *
     * @type {string}
     * @memberof PricingUsageUnit
     */
    'metering_unit_id': string;
    /**
     *
     * @type {RecurringInterval}
     * @memberof PricingUsageUnit
     */
    'recurring_interval': RecurringInterval;
    /**
     *
     * @type {boolean}
     * @memberof PricingUsageUnit
     */
    'used': boolean;
    /**
     * 上限値
     * @type {number}
     * @memberof PricingUsageUnit
     */
    'upper_count': number;
    /**
     * 使用量あたりの金額
     * @type {number}
     * @memberof PricingUsageUnit
     */
    'unit_amount': number;
    /**
     *
     * @type {string}
     * @memberof PricingUsageUnit
     */
    'metering_unit_name': string;
    /**
     *
     * @type {string}
     * @memberof PricingUsageUnit
     */
    'name': string;
    /**
     *
     * @type {string}
     * @memberof PricingUsageUnit
     */
    'display_name': string;
    /**
     *
     * @type {string}
     * @memberof PricingUsageUnit
     */
    'description': string;
    /**
     *
     * @type {UnitType}
     * @memberof PricingUsageUnit
     */
    'type': UnitType;
    /**
     *
     * @type {string}
     * @memberof PricingUsageUnit
     */
    'currency': string;
}
/**
 *
 * @export
 * @interface PricingUsageUnitForSave
 */
export interface PricingUsageUnitForSave {
    /**
     * 上限値
     * @type {number}
     * @memberof PricingUsageUnitForSave
     */
    'upper_count': number;
    /**
     * 使用量あたりの金額
     * @type {number}
     * @memberof PricingUsageUnitForSave
     */
    'unit_amount': number;
    /**
     *
     * @type {string}
     * @memberof PricingUsageUnitForSave
     */
    'metering_unit_name': string;
    /**
     *
     * @type {string}
     * @memberof PricingUsageUnitForSave
     */
    'name': string;
    /**
     *
     * @type {string}
     * @memberof PricingUsageUnitForSave
     */
    'display_name': string;
    /**
     *
     * @type {string}
     * @memberof PricingUsageUnitForSave
     */
    'description': string;
    /**
     *
     * @type {UnitType}
     * @memberof PricingUsageUnitForSave
     */
    'type': UnitType;
    /**
     *
     * @type {string}
     * @memberof PricingUsageUnitForSave
     */
    'currency': string;
}
/**
 *
 * @export
 * @interface PricingUsageUnitForSaveAllOf
 */
export interface PricingUsageUnitForSaveAllOf {
    /**
     * 上限値
     * @type {number}
     * @memberof PricingUsageUnitForSaveAllOf
     */
    'upper_count': number;
    /**
     * 使用量あたりの金額
     * @type {number}
     * @memberof PricingUsageUnitForSaveAllOf
     */
    'unit_amount': number;
    /**
     *
     * @type {string}
     * @memberof PricingUsageUnitForSaveAllOf
     */
    'metering_unit_name': string;
}
/**
 * 繰り返し期間 month: 月単位 year: 年単位
 * @export
 * @enum {string}
 */
export declare const RecurringInterval: {
    readonly Month: "month";
    readonly Year: "year";
};
export declare type RecurringInterval = typeof RecurringInterval[keyof typeof RecurringInterval];
/**
 *
 * @export
 * @interface SavePricingMenuParam
 */
export interface SavePricingMenuParam {
    /**
     * メニュー名
     * @type {string}
     * @memberof SavePricingMenuParam
     */
    'name': string;
    /**
     * メニュー表示名
     * @type {string}
     * @memberof SavePricingMenuParam
     */
    'display_name': string;
    /**
     * メニュー説明
     * @type {string}
     * @memberof SavePricingMenuParam
     */
    'description': string;
    /**
     * 追加するユニットID
     * @type {Array<string>}
     * @memberof SavePricingMenuParam
     */
    'unit_ids': Array<string>;
}
/**
 *
 * @export
 * @interface SavePricingPlanParam
 */
export interface SavePricingPlanParam {
    /**
     * 料金プラン名
     * @type {string}
     * @memberof SavePricingPlanParam
     */
    'name': string;
    /**
     * 料金プラン表示名
     * @type {string}
     * @memberof SavePricingPlanParam
     */
    'display_name': string;
    /**
     * 料金プラン説明
     * @type {string}
     * @memberof SavePricingPlanParam
     */
    'description': string;
    /**
     * メニューID（料金プランに追加するメニューIDを設定）
     * @type {Array<string>}
     * @memberof SavePricingPlanParam
     */
    'menu_ids': Array<string>;
}
/**
 * 計測単位の種別 fixed: 固定ユニット usage: 使用量ユニット tiered: 段階ユニット tiered_usage: 段階的使用量ユニット
 * @export
 * @enum {string}
 */
export declare const UnitType: {
    readonly Fixed: "fixed";
    readonly Usage: "usage";
    readonly Tiered: "tiered";
    readonly TieredUsage: "tiered_usage";
};
export declare type UnitType = typeof UnitType[keyof typeof UnitType];
/**
 * 更新方法 add: 加算 sub: 減算 direct: 上書き
 * @export
 * @enum {string}
 */
export declare const UpdateMeteringUnitTimestampCountMethod: {
    readonly Add: "add";
    readonly Sub: "sub";
    readonly Direct: "direct";
};
export declare type UpdateMeteringUnitTimestampCountMethod = typeof UpdateMeteringUnitTimestampCountMethod[keyof typeof UpdateMeteringUnitTimestampCountMethod];
/**
 *
 * @export
 * @interface UpdateMeteringUnitTimestampCountNowParam
 */
export interface UpdateMeteringUnitTimestampCountNowParam {
    /**
     *
     * @type {UpdateMeteringUnitTimestampCountMethod}
     * @memberof UpdateMeteringUnitTimestampCountNowParam
     */
    'method': UpdateMeteringUnitTimestampCountMethod;
    /**
     * 件数
     * @type {number}
     * @memberof UpdateMeteringUnitTimestampCountNowParam
     */
    'count': number;
}
/**
 *
 * @export
 * @interface UpdateMeteringUnitTimestampCountParam
 */
export interface UpdateMeteringUnitTimestampCountParam {
    /**
     *
     * @type {UpdateMeteringUnitTimestampCountMethod}
     * @memberof UpdateMeteringUnitTimestampCountParam
     */
    'method': UpdateMeteringUnitTimestampCountMethod;
    /**
     * 件数
     * @type {number}
     * @memberof UpdateMeteringUnitTimestampCountParam
     */
    'count': number;
}
/**
 *
 * @export
 * @interface UpdatePricingPlansUsedParam
 */
export interface UpdatePricingPlansUsedParam {
    /**
     *
     * @type {Array<string>}
     * @memberof UpdatePricingPlansUsedParam
     */
    'plan_ids': Array<string>;
}
/**
 * MeteringApi - axios parameter creator
 * @export
 */
export declare const MeteringApiAxiosParamCreator: (configuration?: Configuration | undefined) => {
    /**
     * 指定したタイムスタンプのメータリングユニットカウントを削除します。
     * @summary 指定したタイムスタンプのメータリングユニットカウントを削除
     * @param {string} tenantId テナントID
     * @param {string} meteringUnitName 計測ユニット名
     * @param {number} timestamp タイムスタンプ
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteMeteringUnitTimestampCount: (tenantId: string, meteringUnitName: string, timestamp: number, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * 現在時刻のメータリングユニットカウントを削除します。
     * @summary 現在時刻のメータリングユニットカウントを削除
     * @param {string} tenantId テナントID
     * @param {string} meteringUnitName 計測ユニット名
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteMeteringUnitTimestampCountNow: (tenantId: string, meteringUnitName: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * 指定した日付のメータリングユニットカウントを取得します。
     * @summary 指定した日付のメータリングユニットカウントを取得
     * @param {string} tenantId テナントID
     * @param {string} meteringUnitName 計測ユニット名
     * @param {string} date 日
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getMeteringUnitDateCountByTenantIdAndUnitNameAndDate: (tenantId: string, meteringUnitName: string, date: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * 当日のメータリングユニットカウントを取得します。
     * @summary 当日のメータリングユニットカウントを取得
     * @param {string} tenantId テナントID
     * @param {string} meteringUnitName 計測ユニット名
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getMeteringUnitDateCountByTenantIdAndUnitNameToday: (tenantId: string, meteringUnitName: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * 指定した日の全メータリングユニットカウントを取得します。
     * @summary 指定日の全メータリングユニットカウントを取得
     * @param {string} tenantId テナントID
     * @param {string} date 日
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getMeteringUnitDateCountsByTenantIdAndDate: (tenantId: string, date: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * 指定した月のメータリングユニットカウントを取得します。
     * @summary 指定月のメータリングユニットカウントを取得
     * @param {string} tenantId テナントID
     * @param {string} meteringUnitName 計測ユニット名
     * @param {string} month 月
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getMeteringUnitMonthCountByTenantIdAndUnitNameAndMonth: (tenantId: string, meteringUnitName: string, month: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * 当月のメータリングユニットカウントを取得します。
     * @summary 当月のメータリングユニットカウントを取得
     * @param {string} tenantId テナントID
     * @param {string} meteringUnitName 計測ユニット名
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getMeteringUnitMonthCountByTenantIdAndUnitNameThisMonth: (tenantId: string, meteringUnitName: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * 指定した月の全メータリングユニットカウントを取得します。
     * @summary 指定月の全メータリングユニットカウントを取得
     * @param {string} tenantId テナントID
     * @param {string} month 月
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getMeteringUnitMonthCountsByTenantIdAndMonth: (tenantId: string, month: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * 指定したタイムスタンプのメータリングユニットカウントを更新します。
     * @summary 指定したタイムスタンプのメータリングユニットカウントを更新
     * @param {string} tenantId テナントID
     * @param {string} meteringUnitName 計測ユニット名
     * @param {number} timestamp タイムスタンプ
     * @param {UpdateMeteringUnitTimestampCountParam} [updateMeteringUnitTimestampCountParam]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateMeteringUnitTimestampCount: (tenantId: string, meteringUnitName: string, timestamp: number, updateMeteringUnitTimestampCountParam?: UpdateMeteringUnitTimestampCountParam | undefined, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * 現在時刻のメータリングユニットカウントを更新します。
     * @summary 現在時刻のメータリングユニットカウントを更新
     * @param {string} tenantId テナントID
     * @param {string} meteringUnitName 計測ユニット名
     * @param {UpdateMeteringUnitTimestampCountNowParam} [updateMeteringUnitTimestampCountNowParam]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateMeteringUnitTimestampCountNow: (tenantId: string, meteringUnitName: string, updateMeteringUnitTimestampCountNowParam?: UpdateMeteringUnitTimestampCountNowParam | undefined, options?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * MeteringApi - functional programming interface
 * @export
 */
export declare const MeteringApiFp: (configuration?: Configuration | undefined) => {
    /**
     * 指定したタイムスタンプのメータリングユニットカウントを削除します。
     * @summary 指定したタイムスタンプのメータリングユニットカウントを削除
     * @param {string} tenantId テナントID
     * @param {string} meteringUnitName 計測ユニット名
     * @param {number} timestamp タイムスタンプ
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteMeteringUnitTimestampCount(tenantId: string, meteringUnitName: string, timestamp: number, options?: AxiosRequestConfig<any> | undefined): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<void>>;
    /**
     * 現在時刻のメータリングユニットカウントを削除します。
     * @summary 現在時刻のメータリングユニットカウントを削除
     * @param {string} tenantId テナントID
     * @param {string} meteringUnitName 計測ユニット名
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteMeteringUnitTimestampCountNow(tenantId: string, meteringUnitName: string, options?: AxiosRequestConfig<any> | undefined): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<void>>;
    /**
     * 指定した日付のメータリングユニットカウントを取得します。
     * @summary 指定した日付のメータリングユニットカウントを取得
     * @param {string} tenantId テナントID
     * @param {string} meteringUnitName 計測ユニット名
     * @param {string} date 日
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getMeteringUnitDateCountByTenantIdAndUnitNameAndDate(tenantId: string, meteringUnitName: string, date: string, options?: AxiosRequestConfig<any> | undefined): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<MeteringUnitDateCount>>;
    /**
     * 当日のメータリングユニットカウントを取得します。
     * @summary 当日のメータリングユニットカウントを取得
     * @param {string} tenantId テナントID
     * @param {string} meteringUnitName 計測ユニット名
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getMeteringUnitDateCountByTenantIdAndUnitNameToday(tenantId: string, meteringUnitName: string, options?: AxiosRequestConfig<any> | undefined): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<MeteringUnitDateCount>>;
    /**
     * 指定した日の全メータリングユニットカウントを取得します。
     * @summary 指定日の全メータリングユニットカウントを取得
     * @param {string} tenantId テナントID
     * @param {string} date 日
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getMeteringUnitDateCountsByTenantIdAndDate(tenantId: string, date: string, options?: AxiosRequestConfig<any> | undefined): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<MeteringUnitDateCounts>>;
    /**
     * 指定した月のメータリングユニットカウントを取得します。
     * @summary 指定月のメータリングユニットカウントを取得
     * @param {string} tenantId テナントID
     * @param {string} meteringUnitName 計測ユニット名
     * @param {string} month 月
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getMeteringUnitMonthCountByTenantIdAndUnitNameAndMonth(tenantId: string, meteringUnitName: string, month: string, options?: AxiosRequestConfig<any> | undefined): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<MeteringUnitMonthCount>>;
    /**
     * 当月のメータリングユニットカウントを取得します。
     * @summary 当月のメータリングユニットカウントを取得
     * @param {string} tenantId テナントID
     * @param {string} meteringUnitName 計測ユニット名
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getMeteringUnitMonthCountByTenantIdAndUnitNameThisMonth(tenantId: string, meteringUnitName: string, options?: AxiosRequestConfig<any> | undefined): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<MeteringUnitMonthCount>>;
    /**
     * 指定した月の全メータリングユニットカウントを取得します。
     * @summary 指定月の全メータリングユニットカウントを取得
     * @param {string} tenantId テナントID
     * @param {string} month 月
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getMeteringUnitMonthCountsByTenantIdAndMonth(tenantId: string, month: string, options?: AxiosRequestConfig<any> | undefined): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<MeteringUnitMonthCounts>>;
    /**
     * 指定したタイムスタンプのメータリングユニットカウントを更新します。
     * @summary 指定したタイムスタンプのメータリングユニットカウントを更新
     * @param {string} tenantId テナントID
     * @param {string} meteringUnitName 計測ユニット名
     * @param {number} timestamp タイムスタンプ
     * @param {UpdateMeteringUnitTimestampCountParam} [updateMeteringUnitTimestampCountParam]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateMeteringUnitTimestampCount(tenantId: string, meteringUnitName: string, timestamp: number, updateMeteringUnitTimestampCountParam?: UpdateMeteringUnitTimestampCountParam | undefined, options?: AxiosRequestConfig<any> | undefined): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<MeteringUnitTimestampCount>>;
    /**
     * 現在時刻のメータリングユニットカウントを更新します。
     * @summary 現在時刻のメータリングユニットカウントを更新
     * @param {string} tenantId テナントID
     * @param {string} meteringUnitName 計測ユニット名
     * @param {UpdateMeteringUnitTimestampCountNowParam} [updateMeteringUnitTimestampCountNowParam]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateMeteringUnitTimestampCountNow(tenantId: string, meteringUnitName: string, updateMeteringUnitTimestampCountNowParam?: UpdateMeteringUnitTimestampCountNowParam | undefined, options?: AxiosRequestConfig<any> | undefined): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<MeteringUnitTimestampCount>>;
};
/**
 * MeteringApi - factory interface
 * @export
 */
export declare const MeteringApiFactory: (configuration?: Configuration | undefined, basePath?: string | undefined, axios?: AxiosInstance | undefined) => {
    /**
     * 指定したタイムスタンプのメータリングユニットカウントを削除します。
     * @summary 指定したタイムスタンプのメータリングユニットカウントを削除
     * @param {string} tenantId テナントID
     * @param {string} meteringUnitName 計測ユニット名
     * @param {number} timestamp タイムスタンプ
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteMeteringUnitTimestampCount(tenantId: string, meteringUnitName: string, timestamp: number, options?: any): AxiosPromise<void>;
    /**
     * 現在時刻のメータリングユニットカウントを削除します。
     * @summary 現在時刻のメータリングユニットカウントを削除
     * @param {string} tenantId テナントID
     * @param {string} meteringUnitName 計測ユニット名
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteMeteringUnitTimestampCountNow(tenantId: string, meteringUnitName: string, options?: any): AxiosPromise<void>;
    /**
     * 指定した日付のメータリングユニットカウントを取得します。
     * @summary 指定した日付のメータリングユニットカウントを取得
     * @param {string} tenantId テナントID
     * @param {string} meteringUnitName 計測ユニット名
     * @param {string} date 日
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getMeteringUnitDateCountByTenantIdAndUnitNameAndDate(tenantId: string, meteringUnitName: string, date: string, options?: any): AxiosPromise<MeteringUnitDateCount>;
    /**
     * 当日のメータリングユニットカウントを取得します。
     * @summary 当日のメータリングユニットカウントを取得
     * @param {string} tenantId テナントID
     * @param {string} meteringUnitName 計測ユニット名
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getMeteringUnitDateCountByTenantIdAndUnitNameToday(tenantId: string, meteringUnitName: string, options?: any): AxiosPromise<MeteringUnitDateCount>;
    /**
     * 指定した日の全メータリングユニットカウントを取得します。
     * @summary 指定日の全メータリングユニットカウントを取得
     * @param {string} tenantId テナントID
     * @param {string} date 日
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getMeteringUnitDateCountsByTenantIdAndDate(tenantId: string, date: string, options?: any): AxiosPromise<MeteringUnitDateCounts>;
    /**
     * 指定した月のメータリングユニットカウントを取得します。
     * @summary 指定月のメータリングユニットカウントを取得
     * @param {string} tenantId テナントID
     * @param {string} meteringUnitName 計測ユニット名
     * @param {string} month 月
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getMeteringUnitMonthCountByTenantIdAndUnitNameAndMonth(tenantId: string, meteringUnitName: string, month: string, options?: any): AxiosPromise<MeteringUnitMonthCount>;
    /**
     * 当月のメータリングユニットカウントを取得します。
     * @summary 当月のメータリングユニットカウントを取得
     * @param {string} tenantId テナントID
     * @param {string} meteringUnitName 計測ユニット名
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getMeteringUnitMonthCountByTenantIdAndUnitNameThisMonth(tenantId: string, meteringUnitName: string, options?: any): AxiosPromise<MeteringUnitMonthCount>;
    /**
     * 指定した月の全メータリングユニットカウントを取得します。
     * @summary 指定月の全メータリングユニットカウントを取得
     * @param {string} tenantId テナントID
     * @param {string} month 月
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getMeteringUnitMonthCountsByTenantIdAndMonth(tenantId: string, month: string, options?: any): AxiosPromise<MeteringUnitMonthCounts>;
    /**
     * 指定したタイムスタンプのメータリングユニットカウントを更新します。
     * @summary 指定したタイムスタンプのメータリングユニットカウントを更新
     * @param {string} tenantId テナントID
     * @param {string} meteringUnitName 計測ユニット名
     * @param {number} timestamp タイムスタンプ
     * @param {UpdateMeteringUnitTimestampCountParam} [updateMeteringUnitTimestampCountParam]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateMeteringUnitTimestampCount(tenantId: string, meteringUnitName: string, timestamp: number, updateMeteringUnitTimestampCountParam?: UpdateMeteringUnitTimestampCountParam | undefined, options?: any): AxiosPromise<MeteringUnitTimestampCount>;
    /**
     * 現在時刻のメータリングユニットカウントを更新します。
     * @summary 現在時刻のメータリングユニットカウントを更新
     * @param {string} tenantId テナントID
     * @param {string} meteringUnitName 計測ユニット名
     * @param {UpdateMeteringUnitTimestampCountNowParam} [updateMeteringUnitTimestampCountNowParam]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateMeteringUnitTimestampCountNow(tenantId: string, meteringUnitName: string, updateMeteringUnitTimestampCountNowParam?: UpdateMeteringUnitTimestampCountNowParam | undefined, options?: any): AxiosPromise<MeteringUnitTimestampCount>;
};
/**
 * MeteringApi - object-oriented interface
 * @export
 * @class MeteringApi
 * @extends {BaseAPI}
 */
export declare class MeteringApi extends BaseAPI {
    /**
     * 指定したタイムスタンプのメータリングユニットカウントを削除します。
     * @summary 指定したタイムスタンプのメータリングユニットカウントを削除
     * @param {string} tenantId テナントID
     * @param {string} meteringUnitName 計測ユニット名
     * @param {number} timestamp タイムスタンプ
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MeteringApi
     */
    deleteMeteringUnitTimestampCount(tenantId: string, meteringUnitName: string, timestamp: number, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * 現在時刻のメータリングユニットカウントを削除します。
     * @summary 現在時刻のメータリングユニットカウントを削除
     * @param {string} tenantId テナントID
     * @param {string} meteringUnitName 計測ユニット名
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MeteringApi
     */
    deleteMeteringUnitTimestampCountNow(tenantId: string, meteringUnitName: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * 指定した日付のメータリングユニットカウントを取得します。
     * @summary 指定した日付のメータリングユニットカウントを取得
     * @param {string} tenantId テナントID
     * @param {string} meteringUnitName 計測ユニット名
     * @param {string} date 日
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MeteringApi
     */
    getMeteringUnitDateCountByTenantIdAndUnitNameAndDate(tenantId: string, meteringUnitName: string, date: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<MeteringUnitDateCount, any>>;
    /**
     * 当日のメータリングユニットカウントを取得します。
     * @summary 当日のメータリングユニットカウントを取得
     * @param {string} tenantId テナントID
     * @param {string} meteringUnitName 計測ユニット名
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MeteringApi
     */
    getMeteringUnitDateCountByTenantIdAndUnitNameToday(tenantId: string, meteringUnitName: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<MeteringUnitDateCount, any>>;
    /**
     * 指定した日の全メータリングユニットカウントを取得します。
     * @summary 指定日の全メータリングユニットカウントを取得
     * @param {string} tenantId テナントID
     * @param {string} date 日
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MeteringApi
     */
    getMeteringUnitDateCountsByTenantIdAndDate(tenantId: string, date: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<MeteringUnitDateCounts, any>>;
    /**
     * 指定した月のメータリングユニットカウントを取得します。
     * @summary 指定月のメータリングユニットカウントを取得
     * @param {string} tenantId テナントID
     * @param {string} meteringUnitName 計測ユニット名
     * @param {string} month 月
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MeteringApi
     */
    getMeteringUnitMonthCountByTenantIdAndUnitNameAndMonth(tenantId: string, meteringUnitName: string, month: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<MeteringUnitMonthCount, any>>;
    /**
     * 当月のメータリングユニットカウントを取得します。
     * @summary 当月のメータリングユニットカウントを取得
     * @param {string} tenantId テナントID
     * @param {string} meteringUnitName 計測ユニット名
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MeteringApi
     */
    getMeteringUnitMonthCountByTenantIdAndUnitNameThisMonth(tenantId: string, meteringUnitName: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<MeteringUnitMonthCount, any>>;
    /**
     * 指定した月の全メータリングユニットカウントを取得します。
     * @summary 指定月の全メータリングユニットカウントを取得
     * @param {string} tenantId テナントID
     * @param {string} month 月
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MeteringApi
     */
    getMeteringUnitMonthCountsByTenantIdAndMonth(tenantId: string, month: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<MeteringUnitMonthCounts, any>>;
    /**
     * 指定したタイムスタンプのメータリングユニットカウントを更新します。
     * @summary 指定したタイムスタンプのメータリングユニットカウントを更新
     * @param {string} tenantId テナントID
     * @param {string} meteringUnitName 計測ユニット名
     * @param {number} timestamp タイムスタンプ
     * @param {UpdateMeteringUnitTimestampCountParam} [updateMeteringUnitTimestampCountParam]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MeteringApi
     */
    updateMeteringUnitTimestampCount(tenantId: string, meteringUnitName: string, timestamp: number, updateMeteringUnitTimestampCountParam?: UpdateMeteringUnitTimestampCountParam, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<MeteringUnitTimestampCount, any>>;
    /**
     * 現在時刻のメータリングユニットカウントを更新します。
     * @summary 現在時刻のメータリングユニットカウントを更新
     * @param {string} tenantId テナントID
     * @param {string} meteringUnitName 計測ユニット名
     * @param {UpdateMeteringUnitTimestampCountNowParam} [updateMeteringUnitTimestampCountNowParam]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MeteringApi
     */
    updateMeteringUnitTimestampCountNow(tenantId: string, meteringUnitName: string, updateMeteringUnitTimestampCountNowParam?: UpdateMeteringUnitTimestampCountNowParam, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<MeteringUnitTimestampCount, any>>;
}
/**
 * PricingMenusApi - axios parameter creator
 * @export
 */
export declare const PricingMenusApiAxiosParamCreator: (configuration?: Configuration | undefined) => {
    /**
     * プライシング機能メニューを作成します
     * @summary プライシング機能メニューを作成
     * @param {SavePricingMenuParam} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createPricingMenu: (body?: SavePricingMenuParam | undefined, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * プライシング機能メニューを削除します。
     * @summary プライシング機能メニューを削除
     * @param {string} menuId メニューID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deletePricingMenu: (menuId: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * プライシング機能メニューを取得します。
     * @summary プライシング機能メニューを取得
     * @param {string} menuId メニューID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getPricingMenu: (menuId: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * 機能メニュー一覧を取得します。 計測単位を複数まとめて、１つの機能として定義します。 ここで定義した機能メニューを複数合わせ１つの料金プランとします。
     * @summary プライシング機能メニュー一覧を取得
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getPricingMenus: (options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * プライシング機能メニューを更新します。
     * @summary プライシング機能メニューを更新
     * @param {string} menuId メニューID
     * @param {SavePricingMenuParam} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updatePricingMenu: (menuId: string, body?: SavePricingMenuParam | undefined, options?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * PricingMenusApi - functional programming interface
 * @export
 */
export declare const PricingMenusApiFp: (configuration?: Configuration | undefined) => {
    /**
     * プライシング機能メニューを作成します
     * @summary プライシング機能メニューを作成
     * @param {SavePricingMenuParam} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createPricingMenu(body?: SavePricingMenuParam | undefined, options?: AxiosRequestConfig<any> | undefined): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<PricingMenu>>;
    /**
     * プライシング機能メニューを削除します。
     * @summary プライシング機能メニューを削除
     * @param {string} menuId メニューID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deletePricingMenu(menuId: string, options?: AxiosRequestConfig<any> | undefined): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<void>>;
    /**
     * プライシング機能メニューを取得します。
     * @summary プライシング機能メニューを取得
     * @param {string} menuId メニューID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getPricingMenu(menuId: string, options?: AxiosRequestConfig<any> | undefined): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<PricingMenu>>;
    /**
     * 機能メニュー一覧を取得します。 計測単位を複数まとめて、１つの機能として定義します。 ここで定義した機能メニューを複数合わせ１つの料金プランとします。
     * @summary プライシング機能メニュー一覧を取得
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getPricingMenus(options?: AxiosRequestConfig<any> | undefined): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<PricingMenus>>;
    /**
     * プライシング機能メニューを更新します。
     * @summary プライシング機能メニューを更新
     * @param {string} menuId メニューID
     * @param {SavePricingMenuParam} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updatePricingMenu(menuId: string, body?: SavePricingMenuParam | undefined, options?: AxiosRequestConfig<any> | undefined): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<void>>;
};
/**
 * PricingMenusApi - factory interface
 * @export
 */
export declare const PricingMenusApiFactory: (configuration?: Configuration | undefined, basePath?: string | undefined, axios?: AxiosInstance | undefined) => {
    /**
     * プライシング機能メニューを作成します
     * @summary プライシング機能メニューを作成
     * @param {SavePricingMenuParam} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createPricingMenu(body?: SavePricingMenuParam | undefined, options?: any): AxiosPromise<PricingMenu>;
    /**
     * プライシング機能メニューを削除します。
     * @summary プライシング機能メニューを削除
     * @param {string} menuId メニューID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deletePricingMenu(menuId: string, options?: any): AxiosPromise<void>;
    /**
     * プライシング機能メニューを取得します。
     * @summary プライシング機能メニューを取得
     * @param {string} menuId メニューID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getPricingMenu(menuId: string, options?: any): AxiosPromise<PricingMenu>;
    /**
     * 機能メニュー一覧を取得します。 計測単位を複数まとめて、１つの機能として定義します。 ここで定義した機能メニューを複数合わせ１つの料金プランとします。
     * @summary プライシング機能メニュー一覧を取得
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getPricingMenus(options?: any): AxiosPromise<PricingMenus>;
    /**
     * プライシング機能メニューを更新します。
     * @summary プライシング機能メニューを更新
     * @param {string} menuId メニューID
     * @param {SavePricingMenuParam} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updatePricingMenu(menuId: string, body?: SavePricingMenuParam | undefined, options?: any): AxiosPromise<void>;
};
/**
 * PricingMenusApi - object-oriented interface
 * @export
 * @class PricingMenusApi
 * @extends {BaseAPI}
 */
export declare class PricingMenusApi extends BaseAPI {
    /**
     * プライシング機能メニューを作成します
     * @summary プライシング機能メニューを作成
     * @param {SavePricingMenuParam} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PricingMenusApi
     */
    createPricingMenu(body?: SavePricingMenuParam, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<PricingMenu, any>>;
    /**
     * プライシング機能メニューを削除します。
     * @summary プライシング機能メニューを削除
     * @param {string} menuId メニューID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PricingMenusApi
     */
    deletePricingMenu(menuId: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * プライシング機能メニューを取得します。
     * @summary プライシング機能メニューを取得
     * @param {string} menuId メニューID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PricingMenusApi
     */
    getPricingMenu(menuId: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<PricingMenu, any>>;
    /**
     * 機能メニュー一覧を取得します。 計測単位を複数まとめて、１つの機能として定義します。 ここで定義した機能メニューを複数合わせ１つの料金プランとします。
     * @summary プライシング機能メニュー一覧を取得
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PricingMenusApi
     */
    getPricingMenus(options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<PricingMenus, any>>;
    /**
     * プライシング機能メニューを更新します。
     * @summary プライシング機能メニューを更新
     * @param {string} menuId メニューID
     * @param {SavePricingMenuParam} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PricingMenusApi
     */
    updatePricingMenu(menuId: string, body?: SavePricingMenuParam, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
}
/**
 * PricingPlansApi - axios parameter creator
 * @export
 */
export declare const PricingPlansApiAxiosParamCreator: (configuration?: Configuration | undefined) => {
    /**
     * 料金プランを作成します。
     * @summary 料金プランを作成
     * @param {SavePricingPlanParam} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createPricingPlan: (body?: SavePricingPlanParam | undefined, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * 料金プランを削除します。
     * @summary 料金プランを削除
     * @param {string} planId 料金プランID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deletePricingPlan: (planId: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * 料金プランを取得します。
     * @summary 料金プランを取得
     * @param {string} planId 料金プランID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getPricingPlan: (planId: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * 料金プラン一覧を取得します。 機能メニューを複数まとめて、１つの料金プランとして定義します。 ここで定義した料金プランを各テナントは選ぶことができます。 もし特定テナント特有の料金（プライベートプライシング）がある場合は、そのテナント専用の料金プランを作成して結びつけます。
     * @summary 料金プラン一覧を取得
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getPricingPlans: (options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * stripeへ情報を連携します。
     * @summary stripe連携
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    linkPlanToStripe: (options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * 料金プランを更新します。
     * @summary 料金プランを更新
     * @param {string} planId 料金プランID
     * @param {SavePricingPlanParam} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updatePricingPlan: (planId: string, body?: SavePricingPlanParam | undefined, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * 料金プランと配下のメニュー・ユニットを使用済みに更新します。
     * @summary 使用済みフラグ更新
     * @param {UpdatePricingPlansUsedParam} [updatePricingPlansUsedParam]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updatePricingPlansUsed: (updatePricingPlansUsedParam?: UpdatePricingPlansUsedParam | undefined, options?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * PricingPlansApi - functional programming interface
 * @export
 */
export declare const PricingPlansApiFp: (configuration?: Configuration | undefined) => {
    /**
     * 料金プランを作成します。
     * @summary 料金プランを作成
     * @param {SavePricingPlanParam} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createPricingPlan(body?: SavePricingPlanParam | undefined, options?: AxiosRequestConfig<any> | undefined): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<PricingPlan>>;
    /**
     * 料金プランを削除します。
     * @summary 料金プランを削除
     * @param {string} planId 料金プランID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deletePricingPlan(planId: string, options?: AxiosRequestConfig<any> | undefined): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<void>>;
    /**
     * 料金プランを取得します。
     * @summary 料金プランを取得
     * @param {string} planId 料金プランID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getPricingPlan(planId: string, options?: AxiosRequestConfig<any> | undefined): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<PricingPlan>>;
    /**
     * 料金プラン一覧を取得します。 機能メニューを複数まとめて、１つの料金プランとして定義します。 ここで定義した料金プランを各テナントは選ぶことができます。 もし特定テナント特有の料金（プライベートプライシング）がある場合は、そのテナント専用の料金プランを作成して結びつけます。
     * @summary 料金プラン一覧を取得
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getPricingPlans(options?: AxiosRequestConfig<any> | undefined): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<PricingPlans>>;
    /**
     * stripeへ情報を連携します。
     * @summary stripe連携
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    linkPlanToStripe(options?: AxiosRequestConfig<any> | undefined): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<void>>;
    /**
     * 料金プランを更新します。
     * @summary 料金プランを更新
     * @param {string} planId 料金プランID
     * @param {SavePricingPlanParam} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updatePricingPlan(planId: string, body?: SavePricingPlanParam | undefined, options?: AxiosRequestConfig<any> | undefined): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<void>>;
    /**
     * 料金プランと配下のメニュー・ユニットを使用済みに更新します。
     * @summary 使用済みフラグ更新
     * @param {UpdatePricingPlansUsedParam} [updatePricingPlansUsedParam]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updatePricingPlansUsed(updatePricingPlansUsedParam?: UpdatePricingPlansUsedParam | undefined, options?: AxiosRequestConfig<any> | undefined): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<void>>;
};
/**
 * PricingPlansApi - factory interface
 * @export
 */
export declare const PricingPlansApiFactory: (configuration?: Configuration | undefined, basePath?: string | undefined, axios?: AxiosInstance | undefined) => {
    /**
     * 料金プランを作成します。
     * @summary 料金プランを作成
     * @param {SavePricingPlanParam} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createPricingPlan(body?: SavePricingPlanParam | undefined, options?: any): AxiosPromise<PricingPlan>;
    /**
     * 料金プランを削除します。
     * @summary 料金プランを削除
     * @param {string} planId 料金プランID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deletePricingPlan(planId: string, options?: any): AxiosPromise<void>;
    /**
     * 料金プランを取得します。
     * @summary 料金プランを取得
     * @param {string} planId 料金プランID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getPricingPlan(planId: string, options?: any): AxiosPromise<PricingPlan>;
    /**
     * 料金プラン一覧を取得します。 機能メニューを複数まとめて、１つの料金プランとして定義します。 ここで定義した料金プランを各テナントは選ぶことができます。 もし特定テナント特有の料金（プライベートプライシング）がある場合は、そのテナント専用の料金プランを作成して結びつけます。
     * @summary 料金プラン一覧を取得
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getPricingPlans(options?: any): AxiosPromise<PricingPlans>;
    /**
     * stripeへ情報を連携します。
     * @summary stripe連携
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    linkPlanToStripe(options?: any): AxiosPromise<void>;
    /**
     * 料金プランを更新します。
     * @summary 料金プランを更新
     * @param {string} planId 料金プランID
     * @param {SavePricingPlanParam} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updatePricingPlan(planId: string, body?: SavePricingPlanParam | undefined, options?: any): AxiosPromise<void>;
    /**
     * 料金プランと配下のメニュー・ユニットを使用済みに更新します。
     * @summary 使用済みフラグ更新
     * @param {UpdatePricingPlansUsedParam} [updatePricingPlansUsedParam]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updatePricingPlansUsed(updatePricingPlansUsedParam?: UpdatePricingPlansUsedParam | undefined, options?: any): AxiosPromise<void>;
};
/**
 * PricingPlansApi - object-oriented interface
 * @export
 * @class PricingPlansApi
 * @extends {BaseAPI}
 */
export declare class PricingPlansApi extends BaseAPI {
    /**
     * 料金プランを作成します。
     * @summary 料金プランを作成
     * @param {SavePricingPlanParam} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PricingPlansApi
     */
    createPricingPlan(body?: SavePricingPlanParam, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<PricingPlan, any>>;
    /**
     * 料金プランを削除します。
     * @summary 料金プランを削除
     * @param {string} planId 料金プランID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PricingPlansApi
     */
    deletePricingPlan(planId: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * 料金プランを取得します。
     * @summary 料金プランを取得
     * @param {string} planId 料金プランID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PricingPlansApi
     */
    getPricingPlan(planId: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<PricingPlan, any>>;
    /**
     * 料金プラン一覧を取得します。 機能メニューを複数まとめて、１つの料金プランとして定義します。 ここで定義した料金プランを各テナントは選ぶことができます。 もし特定テナント特有の料金（プライベートプライシング）がある場合は、そのテナント専用の料金プランを作成して結びつけます。
     * @summary 料金プラン一覧を取得
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PricingPlansApi
     */
    getPricingPlans(options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<PricingPlans, any>>;
    /**
     * stripeへ情報を連携します。
     * @summary stripe連携
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PricingPlansApi
     */
    linkPlanToStripe(options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * 料金プランを更新します。
     * @summary 料金プランを更新
     * @param {string} planId 料金プランID
     * @param {SavePricingPlanParam} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PricingPlansApi
     */
    updatePricingPlan(planId: string, body?: SavePricingPlanParam, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * 料金プランと配下のメニュー・ユニットを使用済みに更新します。
     * @summary 使用済みフラグ更新
     * @param {UpdatePricingPlansUsedParam} [updatePricingPlansUsedParam]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PricingPlansApi
     */
    updatePricingPlansUsed(updatePricingPlansUsedParam?: UpdatePricingPlansUsedParam, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
}
/**
 * PricingUnitsApi - axios parameter creator
 * @export
 */
export declare const PricingUnitsApiAxiosParamCreator: (configuration?: Configuration | undefined) => {
    /**
     * プライシングユニットを作成します。
     * @summary プライシングユニットを作成
     * @param {PricingUnitForSave} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createPricingUnit: (body?: PricingUnitForSave | undefined, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * プライシングユニットを削除します。
     * @summary プライシングユニットを削除
     * @param {string} pricingUnitId ユニットID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deletePricingUnit: (pricingUnitId: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * プライシングユニットを取得します。
     * @summary プライシングユニットを取得
     * @param {string} pricingUnitId ユニットID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getPricingUnit: (pricingUnitId: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * 料金のベースとなる最小の計測単位を取得します。 「固定ユニット」(type=fixed)は基本料金などの月額固定料金の単位、 「使用量ユニット」(type=usage)はユーザ数課金などの１単位あたりごとに料金が発生する単位、 「段階ユニット」(type=tiered)は携帯電話の段階的パケット料金のように利用量の段階ごとに一定の料金の単位、 「段階的使用量ユニット」(type=tiered_usage)はボリュームディスカウントのように利用量に応じて１単位あたりの料金が変化していく単位、となります。
     * @summary プライシングユニットの一覧を取得
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getPricingUnits: (options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * プライシングユニット情報を更新します。
     * @summary プライシングユニットを更新
     * @param {string} pricingUnitId ユニットID
     * @param {PricingUnitForSave} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updatePricingUnit: (pricingUnitId: string, body?: PricingUnitForSave | undefined, options?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * PricingUnitsApi - functional programming interface
 * @export
 */
export declare const PricingUnitsApiFp: (configuration?: Configuration | undefined) => {
    /**
     * プライシングユニットを作成します。
     * @summary プライシングユニットを作成
     * @param {PricingUnitForSave} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createPricingUnit(body?: PricingUnitForSave | undefined, options?: AxiosRequestConfig<any> | undefined): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<PricingUnit>>;
    /**
     * プライシングユニットを削除します。
     * @summary プライシングユニットを削除
     * @param {string} pricingUnitId ユニットID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deletePricingUnit(pricingUnitId: string, options?: AxiosRequestConfig<any> | undefined): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<void>>;
    /**
     * プライシングユニットを取得します。
     * @summary プライシングユニットを取得
     * @param {string} pricingUnitId ユニットID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getPricingUnit(pricingUnitId: string, options?: AxiosRequestConfig<any> | undefined): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<PricingUnit>>;
    /**
     * 料金のベースとなる最小の計測単位を取得します。 「固定ユニット」(type=fixed)は基本料金などの月額固定料金の単位、 「使用量ユニット」(type=usage)はユーザ数課金などの１単位あたりごとに料金が発生する単位、 「段階ユニット」(type=tiered)は携帯電話の段階的パケット料金のように利用量の段階ごとに一定の料金の単位、 「段階的使用量ユニット」(type=tiered_usage)はボリュームディスカウントのように利用量に応じて１単位あたりの料金が変化していく単位、となります。
     * @summary プライシングユニットの一覧を取得
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getPricingUnits(options?: AxiosRequestConfig<any> | undefined): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<PricingUnits>>;
    /**
     * プライシングユニット情報を更新します。
     * @summary プライシングユニットを更新
     * @param {string} pricingUnitId ユニットID
     * @param {PricingUnitForSave} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updatePricingUnit(pricingUnitId: string, body?: PricingUnitForSave | undefined, options?: AxiosRequestConfig<any> | undefined): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<void>>;
};
/**
 * PricingUnitsApi - factory interface
 * @export
 */
export declare const PricingUnitsApiFactory: (configuration?: Configuration | undefined, basePath?: string | undefined, axios?: AxiosInstance | undefined) => {
    /**
     * プライシングユニットを作成します。
     * @summary プライシングユニットを作成
     * @param {PricingUnitForSave} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createPricingUnit(body?: PricingUnitForSave | undefined, options?: any): AxiosPromise<PricingUnit>;
    /**
     * プライシングユニットを削除します。
     * @summary プライシングユニットを削除
     * @param {string} pricingUnitId ユニットID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deletePricingUnit(pricingUnitId: string, options?: any): AxiosPromise<void>;
    /**
     * プライシングユニットを取得します。
     * @summary プライシングユニットを取得
     * @param {string} pricingUnitId ユニットID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getPricingUnit(pricingUnitId: string, options?: any): AxiosPromise<PricingUnit>;
    /**
     * 料金のベースとなる最小の計測単位を取得します。 「固定ユニット」(type=fixed)は基本料金などの月額固定料金の単位、 「使用量ユニット」(type=usage)はユーザ数課金などの１単位あたりごとに料金が発生する単位、 「段階ユニット」(type=tiered)は携帯電話の段階的パケット料金のように利用量の段階ごとに一定の料金の単位、 「段階的使用量ユニット」(type=tiered_usage)はボリュームディスカウントのように利用量に応じて１単位あたりの料金が変化していく単位、となります。
     * @summary プライシングユニットの一覧を取得
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getPricingUnits(options?: any): AxiosPromise<PricingUnits>;
    /**
     * プライシングユニット情報を更新します。
     * @summary プライシングユニットを更新
     * @param {string} pricingUnitId ユニットID
     * @param {PricingUnitForSave} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updatePricingUnit(pricingUnitId: string, body?: PricingUnitForSave | undefined, options?: any): AxiosPromise<void>;
};
/**
 * PricingUnitsApi - object-oriented interface
 * @export
 * @class PricingUnitsApi
 * @extends {BaseAPI}
 */
export declare class PricingUnitsApi extends BaseAPI {
    /**
     * プライシングユニットを作成します。
     * @summary プライシングユニットを作成
     * @param {PricingUnitForSave} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PricingUnitsApi
     */
    createPricingUnit(body?: PricingUnitForSave, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<PricingUnit, any>>;
    /**
     * プライシングユニットを削除します。
     * @summary プライシングユニットを削除
     * @param {string} pricingUnitId ユニットID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PricingUnitsApi
     */
    deletePricingUnit(pricingUnitId: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * プライシングユニットを取得します。
     * @summary プライシングユニットを取得
     * @param {string} pricingUnitId ユニットID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PricingUnitsApi
     */
    getPricingUnit(pricingUnitId: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<PricingUnit, any>>;
    /**
     * 料金のベースとなる最小の計測単位を取得します。 「固定ユニット」(type=fixed)は基本料金などの月額固定料金の単位、 「使用量ユニット」(type=usage)はユーザ数課金などの１単位あたりごとに料金が発生する単位、 「段階ユニット」(type=tiered)は携帯電話の段階的パケット料金のように利用量の段階ごとに一定の料金の単位、 「段階的使用量ユニット」(type=tiered_usage)はボリュームディスカウントのように利用量に応じて１単位あたりの料金が変化していく単位、となります。
     * @summary プライシングユニットの一覧を取得
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PricingUnitsApi
     */
    getPricingUnits(options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<PricingUnits, any>>;
    /**
     * プライシングユニット情報を更新します。
     * @summary プライシングユニットを更新
     * @param {string} pricingUnitId ユニットID
     * @param {PricingUnitForSave} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PricingUnitsApi
     */
    updatePricingUnit(pricingUnitId: string, body?: PricingUnitForSave, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
}
