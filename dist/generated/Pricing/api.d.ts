/**
 * SaaSus Pricing API Schema
 * SaaSus Pricing API Schema
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import { Configuration } from './configuration';
import { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { RequestArgs, BaseAPI } from './base';
/**
 * Aggregate usage sum: Total usage during the period max: Maximum usage during the period
 * @export
 * @enum {string}
 */
export declare const AggregateUsage: {
    readonly Sum: "sum";
    readonly Max: "max";
};
export declare type AggregateUsage = typeof AggregateUsage[keyof typeof AggregateUsage];
/**
 * Unit of currency
 * @export
 * @enum {string}
 */
export declare const Currency: {
    readonly Jpy: "JPY";
    readonly Usd: "USD";
};
export declare type Currency = typeof Currency[keyof typeof Currency];
/**
 *
 * @export
 * @interface MeteringUnit
 */
export interface MeteringUnit {
    /**
     * Universally Unique Identifier
     * @type {string}
     * @memberof MeteringUnit
     */
    'id': string;
    /**
     * Metering unit used settings
     * @type {boolean}
     * @memberof MeteringUnit
     */
    'used': boolean;
    /**
     * Metering unit name
     * @type {string}
     * @memberof MeteringUnit
     */
    'unit_name': string;
    /**
     *
     * @type {AggregateUsage}
     * @memberof MeteringUnit
     */
    'aggregate_usage'?: AggregateUsage;
    /**
     * Display name
     * @type {string}
     * @memberof MeteringUnit
     */
    'display_name': string;
    /**
     * Description
     * @type {string}
     * @memberof MeteringUnit
     */
    'description': string;
}
/**
 *
 * @export
 * @interface MeteringUnitAllOf
 */
export interface MeteringUnitAllOf {
    /**
     * Universally Unique Identifier
     * @type {string}
     * @memberof MeteringUnitAllOf
     */
    'id': string;
    /**
     * Metering unit used settings
     * @type {boolean}
     * @memberof MeteringUnitAllOf
     */
    'used': boolean;
}
/**
 *
 * @export
 * @interface MeteringUnitCount
 */
export interface MeteringUnitCount {
    /**
     * Timestamp
     * @type {number}
     * @memberof MeteringUnitCount
     */
    'timestamp': number;
    /**
     * Count
     * @type {number}
     * @memberof MeteringUnitCount
     */
    'count': number;
}
/**
 *
 * @export
 * @interface MeteringUnitDateCount
 */
export interface MeteringUnitDateCount {
    /**
     * Metering unit name
     * @type {string}
     * @memberof MeteringUnitDateCount
     */
    'metering_unit_name': string;
    /**
     * Date
     * @type {string}
     * @memberof MeteringUnitDateCount
     */
    'date': string;
    /**
     * Count
     * @type {number}
     * @memberof MeteringUnitDateCount
     */
    'count': number;
}
/**
 *
 * @export
 * @interface MeteringUnitDateCounts
 */
export interface MeteringUnitDateCounts {
    /**
     *
     * @type {Array<MeteringUnitDateCount>}
     * @memberof MeteringUnitDateCounts
     */
    'counts': Array<MeteringUnitDateCount>;
}
/**
 *
 * @export
 * @interface MeteringUnitDatePeriodCounts
 */
export interface MeteringUnitDatePeriodCounts {
    /**
     * Metering unit name
     * @type {string}
     * @memberof MeteringUnitDatePeriodCounts
     */
    'metering_unit_name': string;
    /**
     *
     * @type {Array<MeteringUnitCount>}
     * @memberof MeteringUnitDatePeriodCounts
     */
    'counts': Array<MeteringUnitCount>;
}
/**
 *
 * @export
 * @interface MeteringUnitMonthCount
 */
export interface MeteringUnitMonthCount {
    /**
     * Metering unit name
     * @type {string}
     * @memberof MeteringUnitMonthCount
     */
    'metering_unit_name': string;
    /**
     * Month
     * @type {string}
     * @memberof MeteringUnitMonthCount
     */
    'month': string;
    /**
     * Count
     * @type {number}
     * @memberof MeteringUnitMonthCount
     */
    'count': number;
}
/**
 *
 * @export
 * @interface MeteringUnitMonthCounts
 */
export interface MeteringUnitMonthCounts {
    /**
     *
     * @type {Array<MeteringUnitMonthCount>}
     * @memberof MeteringUnitMonthCounts
     */
    'counts': Array<MeteringUnitMonthCount>;
}
/**
 *
 * @export
 * @interface MeteringUnitProps
 */
export interface MeteringUnitProps {
    /**
     * Metering unit name
     * @type {string}
     * @memberof MeteringUnitProps
     */
    'unit_name': string;
    /**
     *
     * @type {AggregateUsage}
     * @memberof MeteringUnitProps
     */
    'aggregate_usage'?: AggregateUsage;
    /**
     * Display name
     * @type {string}
     * @memberof MeteringUnitProps
     */
    'display_name': string;
    /**
     * Description
     * @type {string}
     * @memberof MeteringUnitProps
     */
    'description': string;
}
/**
 *
 * @export
 * @interface MeteringUnitTimestampCount
 */
export interface MeteringUnitTimestampCount {
    /**
     * Metering unit name
     * @type {string}
     * @memberof MeteringUnitTimestampCount
     */
    'metering_unit_name': string;
    /**
     * Timestamp
     * @type {number}
     * @memberof MeteringUnitTimestampCount
     */
    'timestamp': number;
    /**
     * Count
     * @type {number}
     * @memberof MeteringUnitTimestampCount
     */
    'count': number;
}
/**
 *
 * @export
 * @interface MeteringUnits
 */
export interface MeteringUnits {
    /**
     *
     * @type {Array<MeteringUnit>}
     * @memberof MeteringUnits
     */
    'units': Array<MeteringUnit>;
}
/**
 *
 * @export
 * @interface ModelError
 */
export interface ModelError {
    /**
     * Error type
     * @type {string}
     * @memberof ModelError
     */
    'type': string;
    /**
     * Error message
     * @type {string}
     * @memberof ModelError
     */
    'message': string;
}
/**
 *
 * @export
 * @interface PricingFixedUnit
 */
export interface PricingFixedUnit {
    /**
     * Universally Unique Identifier
     * @type {string}
     * @memberof PricingFixedUnit
     */
    'id': string;
    /**
     *
     * @type {boolean}
     * @memberof PricingFixedUnit
     */
    'used': boolean;
    /**
     * Price
     * @type {number}
     * @memberof PricingFixedUnit
     */
    'unit_amount': number;
    /**
     *
     * @type {RecurringInterval}
     * @memberof PricingFixedUnit
     */
    'recurring_interval': RecurringInterval;
    /**
     * Name
     * @type {string}
     * @memberof PricingFixedUnit
     */
    'name': string;
    /**
     * Display Name
     * @type {string}
     * @memberof PricingFixedUnit
     */
    'display_name': string;
    /**
     * Description
     * @type {string}
     * @memberof PricingFixedUnit
     */
    'description': string;
    /**
     *
     * @type {UnitType}
     * @memberof PricingFixedUnit
     */
    'type': UnitType;
    /**
     *
     * @type {Currency}
     * @memberof PricingFixedUnit
     */
    'currency': Currency;
}
/**
 *
 * @export
 * @interface PricingFixedUnitAllOf
 */
export interface PricingFixedUnitAllOf {
    /**
     * Universally Unique Identifier
     * @type {string}
     * @memberof PricingFixedUnitAllOf
     */
    'id': string;
    /**
     *
     * @type {boolean}
     * @memberof PricingFixedUnitAllOf
     */
    'used': boolean;
}
/**
 *
 * @export
 * @interface PricingFixedUnitForSave
 */
export interface PricingFixedUnitForSave {
    /**
     * Price
     * @type {number}
     * @memberof PricingFixedUnitForSave
     */
    'unit_amount': number;
    /**
     *
     * @type {RecurringInterval}
     * @memberof PricingFixedUnitForSave
     */
    'recurring_interval': RecurringInterval;
    /**
     * Name
     * @type {string}
     * @memberof PricingFixedUnitForSave
     */
    'name': string;
    /**
     * Display Name
     * @type {string}
     * @memberof PricingFixedUnitForSave
     */
    'display_name': string;
    /**
     * Description
     * @type {string}
     * @memberof PricingFixedUnitForSave
     */
    'description': string;
    /**
     *
     * @type {UnitType}
     * @memberof PricingFixedUnitForSave
     */
    'type': UnitType;
    /**
     *
     * @type {Currency}
     * @memberof PricingFixedUnitForSave
     */
    'currency': Currency;
}
/**
 *
 * @export
 * @interface PricingFixedUnitForSaveAllOf
 */
export interface PricingFixedUnitForSaveAllOf {
    /**
     * Price
     * @type {number}
     * @memberof PricingFixedUnitForSaveAllOf
     */
    'unit_amount': number;
    /**
     *
     * @type {RecurringInterval}
     * @memberof PricingFixedUnitForSaveAllOf
     */
    'recurring_interval': RecurringInterval;
}
/**
 *
 * @export
 * @interface PricingMenu
 */
export interface PricingMenu {
    /**
     * Universally Unique Identifier
     * @type {string}
     * @memberof PricingMenu
     */
    'id': string;
    /**
     * Menu name
     * @type {string}
     * @memberof PricingMenu
     */
    'name': string;
    /**
     * Menu display name
     * @type {string}
     * @memberof PricingMenu
     */
    'display_name': string;
    /**
     * Menu description
     * @type {string}
     * @memberof PricingMenu
     */
    'description': string;
    /**
     * Menu used settings
     * @type {boolean}
     * @memberof PricingMenu
     */
    'used': boolean;
    /**
     *
     * @type {Array<PricingUnit>}
     * @memberof PricingMenu
     */
    'units': Array<PricingUnit>;
}
/**
 *
 * @export
 * @interface PricingMenuAllOf
 */
export interface PricingMenuAllOf {
    /**
     * Universally Unique Identifier
     * @type {string}
     * @memberof PricingMenuAllOf
     */
    'id': string;
}
/**
 *
 * @export
 * @interface PricingMenuProps
 */
export interface PricingMenuProps {
    /**
     * Menu name
     * @type {string}
     * @memberof PricingMenuProps
     */
    'name': string;
    /**
     * Menu display name
     * @type {string}
     * @memberof PricingMenuProps
     */
    'display_name': string;
    /**
     * Menu description
     * @type {string}
     * @memberof PricingMenuProps
     */
    'description': string;
    /**
     * Menu used settings
     * @type {boolean}
     * @memberof PricingMenuProps
     */
    'used': boolean;
    /**
     *
     * @type {Array<PricingUnit>}
     * @memberof PricingMenuProps
     */
    'units': Array<PricingUnit>;
}
/**
 *
 * @export
 * @interface PricingMenuPropsAllOf
 */
export interface PricingMenuPropsAllOf {
    /**
     * Menu name
     * @type {string}
     * @memberof PricingMenuPropsAllOf
     */
    'name': string;
    /**
     * Menu display name
     * @type {string}
     * @memberof PricingMenuPropsAllOf
     */
    'display_name': string;
    /**
     * Menu description
     * @type {string}
     * @memberof PricingMenuPropsAllOf
     */
    'description': string;
    /**
     * Menu used settings
     * @type {boolean}
     * @memberof PricingMenuPropsAllOf
     */
    'used': boolean;
}
/**
 *
 * @export
 * @interface PricingMenus
 */
export interface PricingMenus {
    /**
     *
     * @type {Array<PricingMenu>}
     * @memberof PricingMenus
     */
    'pricing_menus': Array<PricingMenu>;
}
/**
 *
 * @export
 * @interface PricingPlan
 */
export interface PricingPlan {
    /**
     * Universally Unique Identifier
     * @type {string}
     * @memberof PricingPlan
     */
    'id': string;
    /**
     * Pricing plan name
     * @type {string}
     * @memberof PricingPlan
     */
    'name': string;
    /**
     * Pricing plan display name
     * @type {string}
     * @memberof PricingPlan
     */
    'display_name': string;
    /**
     * Pricing plan description
     * @type {string}
     * @memberof PricingPlan
     */
    'description': string;
    /**
     * Pricing plan used settings
     * @type {boolean}
     * @memberof PricingPlan
     */
    'used': boolean;
    /**
     *
     * @type {Array<PricingMenu>}
     * @memberof PricingPlan
     */
    'pricing_menus': Array<PricingMenu>;
}
/**
 *
 * @export
 * @interface PricingPlanProps
 */
export interface PricingPlanProps {
    /**
     * Pricing plan name
     * @type {string}
     * @memberof PricingPlanProps
     */
    'name': string;
    /**
     * Pricing plan display name
     * @type {string}
     * @memberof PricingPlanProps
     */
    'display_name': string;
    /**
     * Pricing plan description
     * @type {string}
     * @memberof PricingPlanProps
     */
    'description': string;
    /**
     * Pricing plan used settings
     * @type {boolean}
     * @memberof PricingPlanProps
     */
    'used': boolean;
    /**
     *
     * @type {Array<PricingMenu>}
     * @memberof PricingPlanProps
     */
    'pricing_menus': Array<PricingMenu>;
}
/**
 *
 * @export
 * @interface PricingPlanPropsAllOf
 */
export interface PricingPlanPropsAllOf {
    /**
     * Pricing plan name
     * @type {string}
     * @memberof PricingPlanPropsAllOf
     */
    'name': string;
    /**
     * Pricing plan display name
     * @type {string}
     * @memberof PricingPlanPropsAllOf
     */
    'display_name': string;
    /**
     * Pricing plan description
     * @type {string}
     * @memberof PricingPlanPropsAllOf
     */
    'description': string;
    /**
     * Pricing plan used settings
     * @type {boolean}
     * @memberof PricingPlanPropsAllOf
     */
    'used': boolean;
}
/**
 *
 * @export
 * @interface PricingPlans
 */
export interface PricingPlans {
    /**
     *
     * @type {Array<PricingPlan>}
     * @memberof PricingPlans
     */
    'pricing_plans': Array<PricingPlan>;
}
/**
 *
 * @export
 * @interface PricingTier
 */
export interface PricingTier {
    /**
     * Upper limit
     * @type {number}
     * @memberof PricingTier
     */
    'up_to': number;
    /**
     * Amount per unit
     * @type {number}
     * @memberof PricingTier
     */
    'unit_amount': number;
    /**
     * Fixed amount
     * @type {number}
     * @memberof PricingTier
     */
    'flat_amount': number;
    /**
     * Indefinite
     * @type {boolean}
     * @memberof PricingTier
     */
    'inf': boolean;
}
/**
 *
 * @export
 * @interface PricingTieredUnit
 */
export interface PricingTieredUnit {
    /**
     * Universally Unique Identifier
     * @type {string}
     * @memberof PricingTieredUnit
     */
    'id': string;
    /**
     * Universally Unique Identifier
     * @type {string}
     * @memberof PricingTieredUnit
     */
    'metering_unit_id': string;
    /**
     *
     * @type {RecurringInterval}
     * @memberof PricingTieredUnit
     */
    'recurring_interval': RecurringInterval;
    /**
     * Indicates if the unit is used
     * @type {boolean}
     * @memberof PricingTieredUnit
     */
    'used': boolean;
    /**
     * Upper limit
     * @type {number}
     * @memberof PricingTieredUnit
     */
    'upper_count': number;
    /**
     * Metering unit name
     * @type {string}
     * @memberof PricingTieredUnit
     */
    'metering_unit_name': string;
    /**
     *
     * @type {AggregateUsage}
     * @memberof PricingTieredUnit
     */
    'aggregate_usage'?: AggregateUsage;
    /**
     * Name
     * @type {string}
     * @memberof PricingTieredUnit
     */
    'name': string;
    /**
     * Display Name
     * @type {string}
     * @memberof PricingTieredUnit
     */
    'display_name': string;
    /**
     * Description
     * @type {string}
     * @memberof PricingTieredUnit
     */
    'description': string;
    /**
     *
     * @type {UnitType}
     * @memberof PricingTieredUnit
     */
    'type': UnitType;
    /**
     *
     * @type {Currency}
     * @memberof PricingTieredUnit
     */
    'currency': Currency;
    /**
     *
     * @type {Array<PricingTier>}
     * @memberof PricingTieredUnit
     */
    'tiers': Array<PricingTier>;
}
/**
 *
 * @export
 * @interface PricingTieredUnitForSave
 */
export interface PricingTieredUnitForSave {
    /**
     * Upper limit
     * @type {number}
     * @memberof PricingTieredUnitForSave
     */
    'upper_count': number;
    /**
     * Metering unit name
     * @type {string}
     * @memberof PricingTieredUnitForSave
     */
    'metering_unit_name': string;
    /**
     *
     * @type {AggregateUsage}
     * @memberof PricingTieredUnitForSave
     */
    'aggregate_usage'?: AggregateUsage;
    /**
     * Name
     * @type {string}
     * @memberof PricingTieredUnitForSave
     */
    'name': string;
    /**
     * Display Name
     * @type {string}
     * @memberof PricingTieredUnitForSave
     */
    'display_name': string;
    /**
     * Description
     * @type {string}
     * @memberof PricingTieredUnitForSave
     */
    'description': string;
    /**
     *
     * @type {UnitType}
     * @memberof PricingTieredUnitForSave
     */
    'type': UnitType;
    /**
     *
     * @type {Currency}
     * @memberof PricingTieredUnitForSave
     */
    'currency': Currency;
    /**
     *
     * @type {Array<PricingTier>}
     * @memberof PricingTieredUnitForSave
     */
    'tiers': Array<PricingTier>;
}
/**
 *
 * @export
 * @interface PricingTieredUsageUnit
 */
export interface PricingTieredUsageUnit {
    /**
     * Universally Unique Identifier
     * @type {string}
     * @memberof PricingTieredUsageUnit
     */
    'id': string;
    /**
     * Universally Unique Identifier
     * @type {string}
     * @memberof PricingTieredUsageUnit
     */
    'metering_unit_id': string;
    /**
     *
     * @type {RecurringInterval}
     * @memberof PricingTieredUsageUnit
     */
    'recurring_interval': RecurringInterval;
    /**
     * Indicates if the unit is used
     * @type {boolean}
     * @memberof PricingTieredUsageUnit
     */
    'used': boolean;
    /**
     * Upper limit
     * @type {number}
     * @memberof PricingTieredUsageUnit
     */
    'upper_count': number;
    /**
     * Metering unit name
     * @type {string}
     * @memberof PricingTieredUsageUnit
     */
    'metering_unit_name': string;
    /**
     *
     * @type {AggregateUsage}
     * @memberof PricingTieredUsageUnit
     */
    'aggregate_usage'?: AggregateUsage;
    /**
     * Name
     * @type {string}
     * @memberof PricingTieredUsageUnit
     */
    'name': string;
    /**
     * Display Name
     * @type {string}
     * @memberof PricingTieredUsageUnit
     */
    'display_name': string;
    /**
     * Description
     * @type {string}
     * @memberof PricingTieredUsageUnit
     */
    'description': string;
    /**
     *
     * @type {UnitType}
     * @memberof PricingTieredUsageUnit
     */
    'type': UnitType;
    /**
     *
     * @type {Currency}
     * @memberof PricingTieredUsageUnit
     */
    'currency': Currency;
    /**
     *
     * @type {Array<PricingTier>}
     * @memberof PricingTieredUsageUnit
     */
    'tiers': Array<PricingTier>;
}
/**
 *
 * @export
 * @interface PricingTieredUsageUnitAllOf
 */
export interface PricingTieredUsageUnitAllOf {
    /**
     * Universally Unique Identifier
     * @type {string}
     * @memberof PricingTieredUsageUnitAllOf
     */
    'id': string;
    /**
     * Universally Unique Identifier
     * @type {string}
     * @memberof PricingTieredUsageUnitAllOf
     */
    'metering_unit_id': string;
    /**
     *
     * @type {RecurringInterval}
     * @memberof PricingTieredUsageUnitAllOf
     */
    'recurring_interval': RecurringInterval;
    /**
     * Indicates if the unit is used
     * @type {boolean}
     * @memberof PricingTieredUsageUnitAllOf
     */
    'used': boolean;
}
/**
 *
 * @export
 * @interface PricingTieredUsageUnitForSave
 */
export interface PricingTieredUsageUnitForSave {
    /**
     * Upper limit
     * @type {number}
     * @memberof PricingTieredUsageUnitForSave
     */
    'upper_count': number;
    /**
     * Metering unit name
     * @type {string}
     * @memberof PricingTieredUsageUnitForSave
     */
    'metering_unit_name': string;
    /**
     *
     * @type {AggregateUsage}
     * @memberof PricingTieredUsageUnitForSave
     */
    'aggregate_usage'?: AggregateUsage;
    /**
     * Name
     * @type {string}
     * @memberof PricingTieredUsageUnitForSave
     */
    'name': string;
    /**
     * Display Name
     * @type {string}
     * @memberof PricingTieredUsageUnitForSave
     */
    'display_name': string;
    /**
     * Description
     * @type {string}
     * @memberof PricingTieredUsageUnitForSave
     */
    'description': string;
    /**
     *
     * @type {UnitType}
     * @memberof PricingTieredUsageUnitForSave
     */
    'type': UnitType;
    /**
     *
     * @type {Currency}
     * @memberof PricingTieredUsageUnitForSave
     */
    'currency': Currency;
    /**
     *
     * @type {Array<PricingTier>}
     * @memberof PricingTieredUsageUnitForSave
     */
    'tiers': Array<PricingTier>;
}
/**
 *
 * @export
 * @interface PricingTieredUsageUnitForSaveAllOf
 */
export interface PricingTieredUsageUnitForSaveAllOf {
    /**
     * Upper limit
     * @type {number}
     * @memberof PricingTieredUsageUnitForSaveAllOf
     */
    'upper_count': number;
    /**
     * Metering unit name
     * @type {string}
     * @memberof PricingTieredUsageUnitForSaveAllOf
     */
    'metering_unit_name': string;
    /**
     *
     * @type {AggregateUsage}
     * @memberof PricingTieredUsageUnitForSaveAllOf
     */
    'aggregate_usage'?: AggregateUsage;
}
/**
 *
 * @export
 * @interface PricingTiers
 */
export interface PricingTiers {
    /**
     *
     * @type {Array<PricingTier>}
     * @memberof PricingTiers
     */
    'tiers': Array<PricingTier>;
}
/**
 * @type PricingUnit
 * @export
 */
export declare type PricingUnit = {
    type: 'fixed';
} & PricingFixedUnit | {
    type: 'tiered';
} & PricingTieredUnit | {
    type: 'tiered_usage';
} & PricingTieredUsageUnit | {
    type: 'usage';
} & PricingUsageUnit;
/**
 *
 * @export
 * @interface PricingUnitBaseProps
 */
export interface PricingUnitBaseProps {
    /**
     * Name
     * @type {string}
     * @memberof PricingUnitBaseProps
     */
    'name': string;
    /**
     * Display Name
     * @type {string}
     * @memberof PricingUnitBaseProps
     */
    'display_name': string;
    /**
     * Description
     * @type {string}
     * @memberof PricingUnitBaseProps
     */
    'description': string;
    /**
     *
     * @type {UnitType}
     * @memberof PricingUnitBaseProps
     */
    'type': UnitType;
    /**
     *
     * @type {Currency}
     * @memberof PricingUnitBaseProps
     */
    'currency': Currency;
}
/**
 * @type PricingUnitForSave
 * @export
 */
export declare type PricingUnitForSave = {
    type: 'fixed';
} & PricingFixedUnitForSave | {
    type: 'tiered';
} & PricingTieredUnitForSave | {
    type: 'tiered_usage';
} & PricingTieredUsageUnitForSave | {
    type: 'usage';
} & PricingUsageUnitForSave;
/**
 *
 * @export
 * @interface PricingUnits
 */
export interface PricingUnits {
    /**
     *
     * @type {Array<PricingUnit>}
     * @memberof PricingUnits
     */
    'units': Array<PricingUnit>;
}
/**
 *
 * @export
 * @interface PricingUsageUnit
 */
export interface PricingUsageUnit {
    /**
     * Universally Unique Identifier
     * @type {string}
     * @memberof PricingUsageUnit
     */
    'id': string;
    /**
     * Universally Unique Identifier
     * @type {string}
     * @memberof PricingUsageUnit
     */
    'metering_unit_id': string;
    /**
     *
     * @type {RecurringInterval}
     * @memberof PricingUsageUnit
     */
    'recurring_interval': RecurringInterval;
    /**
     *
     * @type {boolean}
     * @memberof PricingUsageUnit
     */
    'used': boolean;
    /**
     * Upper limit
     * @type {number}
     * @memberof PricingUsageUnit
     */
    'upper_count': number;
    /**
     * Amount per usage
     * @type {number}
     * @memberof PricingUsageUnit
     */
    'unit_amount': number;
    /**
     * Metering unit name
     * @type {string}
     * @memberof PricingUsageUnit
     */
    'metering_unit_name': string;
    /**
     *
     * @type {AggregateUsage}
     * @memberof PricingUsageUnit
     */
    'aggregate_usage'?: AggregateUsage;
    /**
     * Name
     * @type {string}
     * @memberof PricingUsageUnit
     */
    'name': string;
    /**
     * Display Name
     * @type {string}
     * @memberof PricingUsageUnit
     */
    'display_name': string;
    /**
     * Description
     * @type {string}
     * @memberof PricingUsageUnit
     */
    'description': string;
    /**
     *
     * @type {UnitType}
     * @memberof PricingUsageUnit
     */
    'type': UnitType;
    /**
     *
     * @type {Currency}
     * @memberof PricingUsageUnit
     */
    'currency': Currency;
}
/**
 *
 * @export
 * @interface PricingUsageUnitAllOf
 */
export interface PricingUsageUnitAllOf {
    /**
     * Universally Unique Identifier
     * @type {string}
     * @memberof PricingUsageUnitAllOf
     */
    'id': string;
    /**
     * Universally Unique Identifier
     * @type {string}
     * @memberof PricingUsageUnitAllOf
     */
    'metering_unit_id': string;
    /**
     *
     * @type {RecurringInterval}
     * @memberof PricingUsageUnitAllOf
     */
    'recurring_interval': RecurringInterval;
    /**
     *
     * @type {boolean}
     * @memberof PricingUsageUnitAllOf
     */
    'used': boolean;
}
/**
 *
 * @export
 * @interface PricingUsageUnitForSave
 */
export interface PricingUsageUnitForSave {
    /**
     * Upper limit
     * @type {number}
     * @memberof PricingUsageUnitForSave
     */
    'upper_count': number;
    /**
     * Amount per usage
     * @type {number}
     * @memberof PricingUsageUnitForSave
     */
    'unit_amount': number;
    /**
     * Metering unit name
     * @type {string}
     * @memberof PricingUsageUnitForSave
     */
    'metering_unit_name': string;
    /**
     *
     * @type {AggregateUsage}
     * @memberof PricingUsageUnitForSave
     */
    'aggregate_usage'?: AggregateUsage;
    /**
     * Name
     * @type {string}
     * @memberof PricingUsageUnitForSave
     */
    'name': string;
    /**
     * Display Name
     * @type {string}
     * @memberof PricingUsageUnitForSave
     */
    'display_name': string;
    /**
     * Description
     * @type {string}
     * @memberof PricingUsageUnitForSave
     */
    'description': string;
    /**
     *
     * @type {UnitType}
     * @memberof PricingUsageUnitForSave
     */
    'type': UnitType;
    /**
     *
     * @type {Currency}
     * @memberof PricingUsageUnitForSave
     */
    'currency': Currency;
}
/**
 *
 * @export
 * @interface PricingUsageUnitForSaveAllOf
 */
export interface PricingUsageUnitForSaveAllOf {
    /**
     * Upper limit
     * @type {number}
     * @memberof PricingUsageUnitForSaveAllOf
     */
    'upper_count': number;
    /**
     * Amount per usage
     * @type {number}
     * @memberof PricingUsageUnitForSaveAllOf
     */
    'unit_amount': number;
    /**
     * Metering unit name
     * @type {string}
     * @memberof PricingUsageUnitForSaveAllOf
     */
    'metering_unit_name': string;
    /**
     *
     * @type {AggregateUsage}
     * @memberof PricingUsageUnitForSaveAllOf
     */
    'aggregate_usage'?: AggregateUsage;
}
/**
 * Cycle month: Monthly year: Yearly
 * @export
 * @enum {string}
 */
export declare const RecurringInterval: {
    readonly Month: "month";
    readonly Year: "year";
};
export declare type RecurringInterval = typeof RecurringInterval[keyof typeof RecurringInterval];
/**
 *
 * @export
 * @interface SavePricingMenuParam
 */
export interface SavePricingMenuParam {
    /**
     * Menu name
     * @type {string}
     * @memberof SavePricingMenuParam
     */
    'name': string;
    /**
     * Menu display name
     * @type {string}
     * @memberof SavePricingMenuParam
     */
    'display_name': string;
    /**
     * Menu description
     * @type {string}
     * @memberof SavePricingMenuParam
     */
    'description': string;
    /**
     * Unit IDs to add
     * @type {Array<string>}
     * @memberof SavePricingMenuParam
     */
    'unit_ids': Array<string>;
}
/**
 *
 * @export
 * @interface SavePricingPlanParam
 */
export interface SavePricingPlanParam {
    /**
     * Pricing plan name
     * @type {string}
     * @memberof SavePricingPlanParam
     */
    'name': string;
    /**
     * Pricing plan display name
     * @type {string}
     * @memberof SavePricingPlanParam
     */
    'display_name': string;
    /**
     * Pricing plan description
     * @type {string}
     * @memberof SavePricingPlanParam
     */
    'description': string;
    /**
     * Menu ID to be added to the pricing plan
     * @type {Array<string>}
     * @memberof SavePricingPlanParam
     */
    'menu_ids': Array<string>;
}
/**
 *
 * @export
 * @interface TaxRate
 */
export interface TaxRate {
    /**
     * Universally Unique Identifier
     * @type {string}
     * @memberof TaxRate
     */
    'id': string;
    /**
     * Name of tax rate
     * @type {string}
     * @memberof TaxRate
     */
    'name': string;
    /**
     * Display name
     * @type {string}
     * @memberof TaxRate
     */
    'display_name': string;
    /**
     * Percentage
     * @type {number}
     * @memberof TaxRate
     */
    'percentage': number;
    /**
     * Inclusive or not
     * @type {boolean}
     * @memberof TaxRate
     */
    'inclusive': boolean;
    /**
     * Country code of ISO 3166-1 alpha-2
     * @type {string}
     * @memberof TaxRate
     */
    'country': string;
    /**
     * Description
     * @type {string}
     * @memberof TaxRate
     */
    'description': string;
}
/**
 *
 * @export
 * @interface TaxRateProps
 */
export interface TaxRateProps {
    /**
     * Name of tax rate
     * @type {string}
     * @memberof TaxRateProps
     */
    'name': string;
    /**
     * Display name
     * @type {string}
     * @memberof TaxRateProps
     */
    'display_name': string;
    /**
     * Percentage
     * @type {number}
     * @memberof TaxRateProps
     */
    'percentage': number;
    /**
     * Inclusive or not
     * @type {boolean}
     * @memberof TaxRateProps
     */
    'inclusive': boolean;
    /**
     * Country code of ISO 3166-1 alpha-2
     * @type {string}
     * @memberof TaxRateProps
     */
    'country': string;
    /**
     * Description
     * @type {string}
     * @memberof TaxRateProps
     */
    'description': string;
}
/**
 *
 * @export
 * @interface TaxRates
 */
export interface TaxRates {
    /**
     *
     * @type {Array<TaxRate>}
     * @memberof TaxRates
     */
    'tax_rates': Array<TaxRate>;
}
/**
 * Unit of measurement type fixed: Fixed unit usage: Usage unit tiered: Tiered unit tiered_usage: Tiered usage unit
 * @export
 * @enum {string}
 */
export declare const UnitType: {
    readonly Fixed: "fixed";
    readonly Usage: "usage";
    readonly Tiered: "tiered";
    readonly TieredUsage: "tiered_usage";
};
export declare type UnitType = typeof UnitType[keyof typeof UnitType];
/**
 * Update method add: Addition sub: Subtraction direct: Overwrite
 * @export
 * @enum {string}
 */
export declare const UpdateMeteringUnitTimestampCountMethod: {
    readonly Add: "add";
    readonly Sub: "sub";
    readonly Direct: "direct";
};
export declare type UpdateMeteringUnitTimestampCountMethod = typeof UpdateMeteringUnitTimestampCountMethod[keyof typeof UpdateMeteringUnitTimestampCountMethod];
/**
 *
 * @export
 * @interface UpdateMeteringUnitTimestampCountNowParam
 */
export interface UpdateMeteringUnitTimestampCountNowParam {
    /**
     *
     * @type {UpdateMeteringUnitTimestampCountMethod}
     * @memberof UpdateMeteringUnitTimestampCountNowParam
     */
    'method': UpdateMeteringUnitTimestampCountMethod;
    /**
     * Count
     * @type {number}
     * @memberof UpdateMeteringUnitTimestampCountNowParam
     */
    'count': number;
}
/**
 *
 * @export
 * @interface UpdateMeteringUnitTimestampCountParam
 */
export interface UpdateMeteringUnitTimestampCountParam {
    /**
     *
     * @type {UpdateMeteringUnitTimestampCountMethod}
     * @memberof UpdateMeteringUnitTimestampCountParam
     */
    'method': UpdateMeteringUnitTimestampCountMethod;
    /**
     * Count
     * @type {number}
     * @memberof UpdateMeteringUnitTimestampCountParam
     */
    'count': number;
}
/**
 *
 * @export
 * @interface UpdatePricingPlansUsedParam
 */
export interface UpdatePricingPlansUsedParam {
    /**
     *
     * @type {Array<string>}
     * @memberof UpdatePricingPlansUsedParam
     */
    'plan_ids': Array<string>;
}
/**
 *
 * @export
 * @interface UpdateTaxRateParam
 */
export interface UpdateTaxRateParam {
    /**
     * Display name
     * @type {string}
     * @memberof UpdateTaxRateParam
     */
    'display_name': string;
    /**
     * Description
     * @type {string}
     * @memberof UpdateTaxRateParam
     */
    'description': string;
}
/**
 * ErrorApi - axios parameter creator
 * @export
 */
export declare const ErrorApiAxiosParamCreator: (configuration?: Configuration | undefined) => {
    /**
     * This endpoint is used for testing purposes. Returns a server error with status code 500.
     * @summary Return Internal Server Error
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    returnInternalServerError: (options?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * ErrorApi - functional programming interface
 * @export
 */
export declare const ErrorApiFp: (configuration?: Configuration | undefined) => {
    /**
     * This endpoint is used for testing purposes. Returns a server error with status code 500.
     * @summary Return Internal Server Error
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    returnInternalServerError(options?: AxiosRequestConfig<any> | undefined): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<void>>;
};
/**
 * ErrorApi - factory interface
 * @export
 */
export declare const ErrorApiFactory: (configuration?: Configuration | undefined, basePath?: string | undefined, axios?: AxiosInstance | undefined) => {
    /**
     * This endpoint is used for testing purposes. Returns a server error with status code 500.
     * @summary Return Internal Server Error
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    returnInternalServerError(options?: any): AxiosPromise<void>;
};
/**
 * ErrorApi - object-oriented interface
 * @export
 * @class ErrorApi
 * @extends {BaseAPI}
 */
export declare class ErrorApi extends BaseAPI {
    /**
     * This endpoint is used for testing purposes. Returns a server error with status code 500.
     * @summary Return Internal Server Error
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ErrorApi
     */
    returnInternalServerError(options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
}
/**
 * MeteringApi - axios parameter creator
 * @export
 */
export declare const MeteringApiAxiosParamCreator: (configuration?: Configuration | undefined) => {
    /**
     * Create a metering unit.
     * @summary Create Metering Unit
     * @param {MeteringUnitProps} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createMeteringUnit: (body?: MeteringUnitProps | undefined, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Delete metering unit.
     * @summary Delete Metering Unit
     * @param {string} meteringUnitId Metering Unit ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteMeteringUnitByID: (meteringUnitId: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Deletes metering unit count for the specified timestamp.
     * @summary Delete Metering Unit Count for Specified Timestamp
     * @param {string} tenantId Tenant ID
     * @param {string} meteringUnitName Metering Unit Name
     * @param {number} timestamp Timestamp
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteMeteringUnitTimestampCount: (tenantId: string, meteringUnitName: string, timestamp: number, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Gets the metering unit count for a specific date.
     * @summary Get Metering Unit Count for Specific Date
     * @param {string} tenantId Tenant ID
     * @param {string} meteringUnitName Metering Unit Name
     * @param {string} date Date
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getMeteringUnitDateCountByTenantIdAndUnitNameAndDate: (tenantId: string, meteringUnitName: string, date: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Obtain metering unit counts for a specified date/time period.
     * @summary Obtain metering unit counts for a specified date/time period
     * @param {string} tenantId Tenant ID
     * @param {string} meteringUnitName Metering Unit Name
     * @param {number} [startTimestamp] Start Date-Time
     * @param {number} [endTimestamp] End Date-Time
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getMeteringUnitDateCountByTenantIdAndUnitNameAndDatePeriod: (tenantId: string, meteringUnitName: string, startTimestamp?: number | undefined, endTimestamp?: number | undefined, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Get the metering unit count for the current day.
     * @summary Get Metering Unit Count for the Current Day
     * @param {string} tenantId Tenant ID
     * @param {string} meteringUnitName Metering Unit Name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getMeteringUnitDateCountByTenantIdAndUnitNameToday: (tenantId: string, meteringUnitName: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Gets the total metering unit count for the specified date.
     * @summary Get All Metering Unit Counts for a Specified Date
     * @param {string} tenantId Tenant ID
     * @param {string} date Date
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getMeteringUnitDateCountsByTenantIdAndDate: (tenantId: string, date: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Gets the metering unit count for the specified month.
     * @summary Get the Metering Unit Count for the Specified Month
     * @param {string} tenantId Tenant ID
     * @param {string} meteringUnitName Metering Unit Name
     * @param {string} month Month
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getMeteringUnitMonthCountByTenantIdAndUnitNameAndMonth: (tenantId: string, meteringUnitName: string, month: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Get the metering unit count for the current month.
     * @summary Get Metering Unit Count for the Current Month
     * @param {string} tenantId Tenant ID
     * @param {string} meteringUnitName Metering Unit Name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getMeteringUnitMonthCountByTenantIdAndUnitNameThisMonth: (tenantId: string, meteringUnitName: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Gets all metering unit counts for the specified month.
     * @summary Get All Metering Unit Counts for the Specified Month
     * @param {string} tenantId Tenant ID
     * @param {string} month Month
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getMeteringUnitMonthCountsByTenantIdAndMonth: (tenantId: string, month: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Get all metering units.
     * @summary Get all metering units
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getMeteringUnits: (options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Update metering unit.
     * @summary Update Metering Unit
     * @param {string} meteringUnitId Metering Unit ID
     * @param {MeteringUnitProps} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateMeteringUnitByID: (meteringUnitId: string, body?: MeteringUnitProps | undefined, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Update metering unit count for the specified timestamp.
     * @summary Update Metering Unit Count for Specified Timestamp
     * @param {string} tenantId Tenant ID
     * @param {string} meteringUnitName Metering Unit Name
     * @param {number} timestamp Timestamp
     * @param {UpdateMeteringUnitTimestampCountParam} [updateMeteringUnitTimestampCountParam]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateMeteringUnitTimestampCount: (tenantId: string, meteringUnitName: string, timestamp: number, updateMeteringUnitTimestampCountParam?: UpdateMeteringUnitTimestampCountParam | undefined, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Update the metering unit count for the current time.
     * @summary Update Metering Unit Count for Current Time
     * @param {string} tenantId Tenant ID
     * @param {string} meteringUnitName Metering Unit Name
     * @param {UpdateMeteringUnitTimestampCountNowParam} [updateMeteringUnitTimestampCountNowParam]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateMeteringUnitTimestampCountNow: (tenantId: string, meteringUnitName: string, updateMeteringUnitTimestampCountNowParam?: UpdateMeteringUnitTimestampCountNowParam | undefined, options?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * MeteringApi - functional programming interface
 * @export
 */
export declare const MeteringApiFp: (configuration?: Configuration | undefined) => {
    /**
     * Create a metering unit.
     * @summary Create Metering Unit
     * @param {MeteringUnitProps} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createMeteringUnit(body?: MeteringUnitProps | undefined, options?: AxiosRequestConfig<any> | undefined): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<MeteringUnit>>;
    /**
     * Delete metering unit.
     * @summary Delete Metering Unit
     * @param {string} meteringUnitId Metering Unit ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteMeteringUnitByID(meteringUnitId: string, options?: AxiosRequestConfig<any> | undefined): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<void>>;
    /**
     * Deletes metering unit count for the specified timestamp.
     * @summary Delete Metering Unit Count for Specified Timestamp
     * @param {string} tenantId Tenant ID
     * @param {string} meteringUnitName Metering Unit Name
     * @param {number} timestamp Timestamp
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteMeteringUnitTimestampCount(tenantId: string, meteringUnitName: string, timestamp: number, options?: AxiosRequestConfig<any> | undefined): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<void>>;
    /**
     * Gets the metering unit count for a specific date.
     * @summary Get Metering Unit Count for Specific Date
     * @param {string} tenantId Tenant ID
     * @param {string} meteringUnitName Metering Unit Name
     * @param {string} date Date
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getMeteringUnitDateCountByTenantIdAndUnitNameAndDate(tenantId: string, meteringUnitName: string, date: string, options?: AxiosRequestConfig<any> | undefined): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<MeteringUnitDateCount>>;
    /**
     * Obtain metering unit counts for a specified date/time period.
     * @summary Obtain metering unit counts for a specified date/time period
     * @param {string} tenantId Tenant ID
     * @param {string} meteringUnitName Metering Unit Name
     * @param {number} [startTimestamp] Start Date-Time
     * @param {number} [endTimestamp] End Date-Time
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getMeteringUnitDateCountByTenantIdAndUnitNameAndDatePeriod(tenantId: string, meteringUnitName: string, startTimestamp?: number | undefined, endTimestamp?: number | undefined, options?: AxiosRequestConfig<any> | undefined): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<MeteringUnitDatePeriodCounts>>;
    /**
     * Get the metering unit count for the current day.
     * @summary Get Metering Unit Count for the Current Day
     * @param {string} tenantId Tenant ID
     * @param {string} meteringUnitName Metering Unit Name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getMeteringUnitDateCountByTenantIdAndUnitNameToday(tenantId: string, meteringUnitName: string, options?: AxiosRequestConfig<any> | undefined): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<MeteringUnitDateCount>>;
    /**
     * Gets the total metering unit count for the specified date.
     * @summary Get All Metering Unit Counts for a Specified Date
     * @param {string} tenantId Tenant ID
     * @param {string} date Date
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getMeteringUnitDateCountsByTenantIdAndDate(tenantId: string, date: string, options?: AxiosRequestConfig<any> | undefined): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<MeteringUnitDateCounts>>;
    /**
     * Gets the metering unit count for the specified month.
     * @summary Get the Metering Unit Count for the Specified Month
     * @param {string} tenantId Tenant ID
     * @param {string} meteringUnitName Metering Unit Name
     * @param {string} month Month
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getMeteringUnitMonthCountByTenantIdAndUnitNameAndMonth(tenantId: string, meteringUnitName: string, month: string, options?: AxiosRequestConfig<any> | undefined): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<MeteringUnitMonthCount>>;
    /**
     * Get the metering unit count for the current month.
     * @summary Get Metering Unit Count for the Current Month
     * @param {string} tenantId Tenant ID
     * @param {string} meteringUnitName Metering Unit Name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getMeteringUnitMonthCountByTenantIdAndUnitNameThisMonth(tenantId: string, meteringUnitName: string, options?: AxiosRequestConfig<any> | undefined): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<MeteringUnitMonthCount>>;
    /**
     * Gets all metering unit counts for the specified month.
     * @summary Get All Metering Unit Counts for the Specified Month
     * @param {string} tenantId Tenant ID
     * @param {string} month Month
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getMeteringUnitMonthCountsByTenantIdAndMonth(tenantId: string, month: string, options?: AxiosRequestConfig<any> | undefined): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<MeteringUnitMonthCounts>>;
    /**
     * Get all metering units.
     * @summary Get all metering units
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getMeteringUnits(options?: AxiosRequestConfig<any> | undefined): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<MeteringUnits>>;
    /**
     * Update metering unit.
     * @summary Update Metering Unit
     * @param {string} meteringUnitId Metering Unit ID
     * @param {MeteringUnitProps} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateMeteringUnitByID(meteringUnitId: string, body?: MeteringUnitProps | undefined, options?: AxiosRequestConfig<any> | undefined): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<void>>;
    /**
     * Update metering unit count for the specified timestamp.
     * @summary Update Metering Unit Count for Specified Timestamp
     * @param {string} tenantId Tenant ID
     * @param {string} meteringUnitName Metering Unit Name
     * @param {number} timestamp Timestamp
     * @param {UpdateMeteringUnitTimestampCountParam} [updateMeteringUnitTimestampCountParam]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateMeteringUnitTimestampCount(tenantId: string, meteringUnitName: string, timestamp: number, updateMeteringUnitTimestampCountParam?: UpdateMeteringUnitTimestampCountParam | undefined, options?: AxiosRequestConfig<any> | undefined): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<MeteringUnitTimestampCount>>;
    /**
     * Update the metering unit count for the current time.
     * @summary Update Metering Unit Count for Current Time
     * @param {string} tenantId Tenant ID
     * @param {string} meteringUnitName Metering Unit Name
     * @param {UpdateMeteringUnitTimestampCountNowParam} [updateMeteringUnitTimestampCountNowParam]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateMeteringUnitTimestampCountNow(tenantId: string, meteringUnitName: string, updateMeteringUnitTimestampCountNowParam?: UpdateMeteringUnitTimestampCountNowParam | undefined, options?: AxiosRequestConfig<any> | undefined): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<MeteringUnitTimestampCount>>;
};
/**
 * MeteringApi - factory interface
 * @export
 */
export declare const MeteringApiFactory: (configuration?: Configuration | undefined, basePath?: string | undefined, axios?: AxiosInstance | undefined) => {
    /**
     * Create a metering unit.
     * @summary Create Metering Unit
     * @param {MeteringUnitProps} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createMeteringUnit(body?: MeteringUnitProps | undefined, options?: any): AxiosPromise<MeteringUnit>;
    /**
     * Delete metering unit.
     * @summary Delete Metering Unit
     * @param {string} meteringUnitId Metering Unit ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteMeteringUnitByID(meteringUnitId: string, options?: any): AxiosPromise<void>;
    /**
     * Deletes metering unit count for the specified timestamp.
     * @summary Delete Metering Unit Count for Specified Timestamp
     * @param {string} tenantId Tenant ID
     * @param {string} meteringUnitName Metering Unit Name
     * @param {number} timestamp Timestamp
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteMeteringUnitTimestampCount(tenantId: string, meteringUnitName: string, timestamp: number, options?: any): AxiosPromise<void>;
    /**
     * Gets the metering unit count for a specific date.
     * @summary Get Metering Unit Count for Specific Date
     * @param {string} tenantId Tenant ID
     * @param {string} meteringUnitName Metering Unit Name
     * @param {string} date Date
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getMeteringUnitDateCountByTenantIdAndUnitNameAndDate(tenantId: string, meteringUnitName: string, date: string, options?: any): AxiosPromise<MeteringUnitDateCount>;
    /**
     * Obtain metering unit counts for a specified date/time period.
     * @summary Obtain metering unit counts for a specified date/time period
     * @param {string} tenantId Tenant ID
     * @param {string} meteringUnitName Metering Unit Name
     * @param {number} [startTimestamp] Start Date-Time
     * @param {number} [endTimestamp] End Date-Time
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getMeteringUnitDateCountByTenantIdAndUnitNameAndDatePeriod(tenantId: string, meteringUnitName: string, startTimestamp?: number | undefined, endTimestamp?: number | undefined, options?: any): AxiosPromise<MeteringUnitDatePeriodCounts>;
    /**
     * Get the metering unit count for the current day.
     * @summary Get Metering Unit Count for the Current Day
     * @param {string} tenantId Tenant ID
     * @param {string} meteringUnitName Metering Unit Name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getMeteringUnitDateCountByTenantIdAndUnitNameToday(tenantId: string, meteringUnitName: string, options?: any): AxiosPromise<MeteringUnitDateCount>;
    /**
     * Gets the total metering unit count for the specified date.
     * @summary Get All Metering Unit Counts for a Specified Date
     * @param {string} tenantId Tenant ID
     * @param {string} date Date
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getMeteringUnitDateCountsByTenantIdAndDate(tenantId: string, date: string, options?: any): AxiosPromise<MeteringUnitDateCounts>;
    /**
     * Gets the metering unit count for the specified month.
     * @summary Get the Metering Unit Count for the Specified Month
     * @param {string} tenantId Tenant ID
     * @param {string} meteringUnitName Metering Unit Name
     * @param {string} month Month
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getMeteringUnitMonthCountByTenantIdAndUnitNameAndMonth(tenantId: string, meteringUnitName: string, month: string, options?: any): AxiosPromise<MeteringUnitMonthCount>;
    /**
     * Get the metering unit count for the current month.
     * @summary Get Metering Unit Count for the Current Month
     * @param {string} tenantId Tenant ID
     * @param {string} meteringUnitName Metering Unit Name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getMeteringUnitMonthCountByTenantIdAndUnitNameThisMonth(tenantId: string, meteringUnitName: string, options?: any): AxiosPromise<MeteringUnitMonthCount>;
    /**
     * Gets all metering unit counts for the specified month.
     * @summary Get All Metering Unit Counts for the Specified Month
     * @param {string} tenantId Tenant ID
     * @param {string} month Month
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getMeteringUnitMonthCountsByTenantIdAndMonth(tenantId: string, month: string, options?: any): AxiosPromise<MeteringUnitMonthCounts>;
    /**
     * Get all metering units.
     * @summary Get all metering units
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getMeteringUnits(options?: any): AxiosPromise<MeteringUnits>;
    /**
     * Update metering unit.
     * @summary Update Metering Unit
     * @param {string} meteringUnitId Metering Unit ID
     * @param {MeteringUnitProps} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateMeteringUnitByID(meteringUnitId: string, body?: MeteringUnitProps | undefined, options?: any): AxiosPromise<void>;
    /**
     * Update metering unit count for the specified timestamp.
     * @summary Update Metering Unit Count for Specified Timestamp
     * @param {string} tenantId Tenant ID
     * @param {string} meteringUnitName Metering Unit Name
     * @param {number} timestamp Timestamp
     * @param {UpdateMeteringUnitTimestampCountParam} [updateMeteringUnitTimestampCountParam]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateMeteringUnitTimestampCount(tenantId: string, meteringUnitName: string, timestamp: number, updateMeteringUnitTimestampCountParam?: UpdateMeteringUnitTimestampCountParam | undefined, options?: any): AxiosPromise<MeteringUnitTimestampCount>;
    /**
     * Update the metering unit count for the current time.
     * @summary Update Metering Unit Count for Current Time
     * @param {string} tenantId Tenant ID
     * @param {string} meteringUnitName Metering Unit Name
     * @param {UpdateMeteringUnitTimestampCountNowParam} [updateMeteringUnitTimestampCountNowParam]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateMeteringUnitTimestampCountNow(tenantId: string, meteringUnitName: string, updateMeteringUnitTimestampCountNowParam?: UpdateMeteringUnitTimestampCountNowParam | undefined, options?: any): AxiosPromise<MeteringUnitTimestampCount>;
};
/**
 * MeteringApi - object-oriented interface
 * @export
 * @class MeteringApi
 * @extends {BaseAPI}
 */
export declare class MeteringApi extends BaseAPI {
    /**
     * Create a metering unit.
     * @summary Create Metering Unit
     * @param {MeteringUnitProps} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MeteringApi
     */
    createMeteringUnit(body?: MeteringUnitProps, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<MeteringUnit, any>>;
    /**
     * Delete metering unit.
     * @summary Delete Metering Unit
     * @param {string} meteringUnitId Metering Unit ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MeteringApi
     */
    deleteMeteringUnitByID(meteringUnitId: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * Deletes metering unit count for the specified timestamp.
     * @summary Delete Metering Unit Count for Specified Timestamp
     * @param {string} tenantId Tenant ID
     * @param {string} meteringUnitName Metering Unit Name
     * @param {number} timestamp Timestamp
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MeteringApi
     */
    deleteMeteringUnitTimestampCount(tenantId: string, meteringUnitName: string, timestamp: number, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * Gets the metering unit count for a specific date.
     * @summary Get Metering Unit Count for Specific Date
     * @param {string} tenantId Tenant ID
     * @param {string} meteringUnitName Metering Unit Name
     * @param {string} date Date
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MeteringApi
     */
    getMeteringUnitDateCountByTenantIdAndUnitNameAndDate(tenantId: string, meteringUnitName: string, date: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<MeteringUnitDateCount, any>>;
    /**
     * Obtain metering unit counts for a specified date/time period.
     * @summary Obtain metering unit counts for a specified date/time period
     * @param {string} tenantId Tenant ID
     * @param {string} meteringUnitName Metering Unit Name
     * @param {number} [startTimestamp] Start Date-Time
     * @param {number} [endTimestamp] End Date-Time
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MeteringApi
     */
    getMeteringUnitDateCountByTenantIdAndUnitNameAndDatePeriod(tenantId: string, meteringUnitName: string, startTimestamp?: number, endTimestamp?: number, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<MeteringUnitDatePeriodCounts, any>>;
    /**
     * Get the metering unit count for the current day.
     * @summary Get Metering Unit Count for the Current Day
     * @param {string} tenantId Tenant ID
     * @param {string} meteringUnitName Metering Unit Name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MeteringApi
     */
    getMeteringUnitDateCountByTenantIdAndUnitNameToday(tenantId: string, meteringUnitName: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<MeteringUnitDateCount, any>>;
    /**
     * Gets the total metering unit count for the specified date.
     * @summary Get All Metering Unit Counts for a Specified Date
     * @param {string} tenantId Tenant ID
     * @param {string} date Date
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MeteringApi
     */
    getMeteringUnitDateCountsByTenantIdAndDate(tenantId: string, date: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<MeteringUnitDateCounts, any>>;
    /**
     * Gets the metering unit count for the specified month.
     * @summary Get the Metering Unit Count for the Specified Month
     * @param {string} tenantId Tenant ID
     * @param {string} meteringUnitName Metering Unit Name
     * @param {string} month Month
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MeteringApi
     */
    getMeteringUnitMonthCountByTenantIdAndUnitNameAndMonth(tenantId: string, meteringUnitName: string, month: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<MeteringUnitMonthCount, any>>;
    /**
     * Get the metering unit count for the current month.
     * @summary Get Metering Unit Count for the Current Month
     * @param {string} tenantId Tenant ID
     * @param {string} meteringUnitName Metering Unit Name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MeteringApi
     */
    getMeteringUnitMonthCountByTenantIdAndUnitNameThisMonth(tenantId: string, meteringUnitName: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<MeteringUnitMonthCount, any>>;
    /**
     * Gets all metering unit counts for the specified month.
     * @summary Get All Metering Unit Counts for the Specified Month
     * @param {string} tenantId Tenant ID
     * @param {string} month Month
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MeteringApi
     */
    getMeteringUnitMonthCountsByTenantIdAndMonth(tenantId: string, month: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<MeteringUnitMonthCounts, any>>;
    /**
     * Get all metering units.
     * @summary Get all metering units
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MeteringApi
     */
    getMeteringUnits(options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<MeteringUnits, any>>;
    /**
     * Update metering unit.
     * @summary Update Metering Unit
     * @param {string} meteringUnitId Metering Unit ID
     * @param {MeteringUnitProps} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MeteringApi
     */
    updateMeteringUnitByID(meteringUnitId: string, body?: MeteringUnitProps, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * Update metering unit count for the specified timestamp.
     * @summary Update Metering Unit Count for Specified Timestamp
     * @param {string} tenantId Tenant ID
     * @param {string} meteringUnitName Metering Unit Name
     * @param {number} timestamp Timestamp
     * @param {UpdateMeteringUnitTimestampCountParam} [updateMeteringUnitTimestampCountParam]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MeteringApi
     */
    updateMeteringUnitTimestampCount(tenantId: string, meteringUnitName: string, timestamp: number, updateMeteringUnitTimestampCountParam?: UpdateMeteringUnitTimestampCountParam, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<MeteringUnitTimestampCount, any>>;
    /**
     * Update the metering unit count for the current time.
     * @summary Update Metering Unit Count for Current Time
     * @param {string} tenantId Tenant ID
     * @param {string} meteringUnitName Metering Unit Name
     * @param {UpdateMeteringUnitTimestampCountNowParam} [updateMeteringUnitTimestampCountNowParam]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MeteringApi
     */
    updateMeteringUnitTimestampCountNow(tenantId: string, meteringUnitName: string, updateMeteringUnitTimestampCountNowParam?: UpdateMeteringUnitTimestampCountNowParam, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<MeteringUnitTimestampCount, any>>;
}
/**
 * PricingMenusApi - axios parameter creator
 * @export
 */
export declare const PricingMenusApiAxiosParamCreator: (configuration?: Configuration | undefined) => {
    /**
     * Create a pricing feature menu.
     * @summary Create a Pricing Feature Menu
     * @param {SavePricingMenuParam} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createPricingMenu: (body?: SavePricingMenuParam | undefined, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Delete pricing feature menu.
     * @summary Delete Pricing Feature Menu
     * @param {string} menuId Menu ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deletePricingMenu: (menuId: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Get a pricing feature menu.
     * @summary Get Pricing Feature Menu
     * @param {string} menuId Menu ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getPricingMenu: (menuId: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Get the feature menu list. Multiple measurement units are grouped together and defined as one feature menu. Multiple feature menus defined here are combined into one billing plan.
     * @summary Get Pricing Feature Menus
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getPricingMenus: (options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Update pricing feature menu.
     * @summary Update Pricing Feature Menu
     * @param {string} menuId Menu ID
     * @param {SavePricingMenuParam} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updatePricingMenu: (menuId: string, body?: SavePricingMenuParam | undefined, options?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * PricingMenusApi - functional programming interface
 * @export
 */
export declare const PricingMenusApiFp: (configuration?: Configuration | undefined) => {
    /**
     * Create a pricing feature menu.
     * @summary Create a Pricing Feature Menu
     * @param {SavePricingMenuParam} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createPricingMenu(body?: SavePricingMenuParam | undefined, options?: AxiosRequestConfig<any> | undefined): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<PricingMenu>>;
    /**
     * Delete pricing feature menu.
     * @summary Delete Pricing Feature Menu
     * @param {string} menuId Menu ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deletePricingMenu(menuId: string, options?: AxiosRequestConfig<any> | undefined): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<void>>;
    /**
     * Get a pricing feature menu.
     * @summary Get Pricing Feature Menu
     * @param {string} menuId Menu ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getPricingMenu(menuId: string, options?: AxiosRequestConfig<any> | undefined): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<PricingMenu>>;
    /**
     * Get the feature menu list. Multiple measurement units are grouped together and defined as one feature menu. Multiple feature menus defined here are combined into one billing plan.
     * @summary Get Pricing Feature Menus
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getPricingMenus(options?: AxiosRequestConfig<any> | undefined): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<PricingMenus>>;
    /**
     * Update pricing feature menu.
     * @summary Update Pricing Feature Menu
     * @param {string} menuId Menu ID
     * @param {SavePricingMenuParam} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updatePricingMenu(menuId: string, body?: SavePricingMenuParam | undefined, options?: AxiosRequestConfig<any> | undefined): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<void>>;
};
/**
 * PricingMenusApi - factory interface
 * @export
 */
export declare const PricingMenusApiFactory: (configuration?: Configuration | undefined, basePath?: string | undefined, axios?: AxiosInstance | undefined) => {
    /**
     * Create a pricing feature menu.
     * @summary Create a Pricing Feature Menu
     * @param {SavePricingMenuParam} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createPricingMenu(body?: SavePricingMenuParam | undefined, options?: any): AxiosPromise<PricingMenu>;
    /**
     * Delete pricing feature menu.
     * @summary Delete Pricing Feature Menu
     * @param {string} menuId Menu ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deletePricingMenu(menuId: string, options?: any): AxiosPromise<void>;
    /**
     * Get a pricing feature menu.
     * @summary Get Pricing Feature Menu
     * @param {string} menuId Menu ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getPricingMenu(menuId: string, options?: any): AxiosPromise<PricingMenu>;
    /**
     * Get the feature menu list. Multiple measurement units are grouped together and defined as one feature menu. Multiple feature menus defined here are combined into one billing plan.
     * @summary Get Pricing Feature Menus
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getPricingMenus(options?: any): AxiosPromise<PricingMenus>;
    /**
     * Update pricing feature menu.
     * @summary Update Pricing Feature Menu
     * @param {string} menuId Menu ID
     * @param {SavePricingMenuParam} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updatePricingMenu(menuId: string, body?: SavePricingMenuParam | undefined, options?: any): AxiosPromise<void>;
};
/**
 * PricingMenusApi - object-oriented interface
 * @export
 * @class PricingMenusApi
 * @extends {BaseAPI}
 */
export declare class PricingMenusApi extends BaseAPI {
    /**
     * Create a pricing feature menu.
     * @summary Create a Pricing Feature Menu
     * @param {SavePricingMenuParam} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PricingMenusApi
     */
    createPricingMenu(body?: SavePricingMenuParam, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<PricingMenu, any>>;
    /**
     * Delete pricing feature menu.
     * @summary Delete Pricing Feature Menu
     * @param {string} menuId Menu ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PricingMenusApi
     */
    deletePricingMenu(menuId: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * Get a pricing feature menu.
     * @summary Get Pricing Feature Menu
     * @param {string} menuId Menu ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PricingMenusApi
     */
    getPricingMenu(menuId: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<PricingMenu, any>>;
    /**
     * Get the feature menu list. Multiple measurement units are grouped together and defined as one feature menu. Multiple feature menus defined here are combined into one billing plan.
     * @summary Get Pricing Feature Menus
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PricingMenusApi
     */
    getPricingMenus(options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<PricingMenus, any>>;
    /**
     * Update pricing feature menu.
     * @summary Update Pricing Feature Menu
     * @param {string} menuId Menu ID
     * @param {SavePricingMenuParam} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PricingMenusApi
     */
    updatePricingMenu(menuId: string, body?: SavePricingMenuParam, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
}
/**
 * PricingPlansApi - axios parameter creator
 * @export
 */
export declare const PricingPlansApiAxiosParamCreator: (configuration?: Configuration | undefined) => {
    /**
     * Create a pricing plan.
     * @summary Create Pricing Plan
     * @param {SavePricingPlanParam} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createPricingPlan: (body?: SavePricingPlanParam | undefined, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Unconditionally remove all rate plans, menus, units, meters and tax rates.
     * @summary Delete all Plans, Menus, Units, Meters and Tax Rates
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteAllPlansAndMenusAndUnitsAndMetersAndTaxRates: (options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Delete a pricing plan.
     * @summary Delete Pricing Plan
     * @param {string} planId Pricing Plan ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deletePricingPlan: (planId: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Delete product data from Stripe.
     * @summary Delete Product Data from Stripe
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteStripePlan: (options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Get a pricing plan.
     * @summary Get Pricing Plan
     * @param {string} planId Pricing Plan ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getPricingPlan: (planId: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Get pricing plans. Multiple feature menus are grouped together and defined as one pricing plan. Each tenant can choose a pricing plan defined here. If you have a specific tenant-specific rate (private pricing), create and connect the pricing plan specifically for that tenant.
     * @summary Get Pricing Plans
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getPricingPlans: (options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Connect information to Stripe.
     * @summary Connect to Stripe
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    linkPlanToStripe: (options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Update a pricing plan.
     * @summary Update Pricing Plan
     * @param {string} planId Pricing Plan ID
     * @param {SavePricingPlanParam} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updatePricingPlan: (planId: string, body?: SavePricingPlanParam | undefined, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Update price plan and feature menu/pricing unit to used.
     * @summary Update Used Flag
     * @param {UpdatePricingPlansUsedParam} [updatePricingPlansUsedParam]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updatePricingPlansUsed: (updatePricingPlansUsedParam?: UpdatePricingPlansUsedParam | undefined, options?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * PricingPlansApi - functional programming interface
 * @export
 */
export declare const PricingPlansApiFp: (configuration?: Configuration | undefined) => {
    /**
     * Create a pricing plan.
     * @summary Create Pricing Plan
     * @param {SavePricingPlanParam} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createPricingPlan(body?: SavePricingPlanParam | undefined, options?: AxiosRequestConfig<any> | undefined): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<PricingPlan>>;
    /**
     * Unconditionally remove all rate plans, menus, units, meters and tax rates.
     * @summary Delete all Plans, Menus, Units, Meters and Tax Rates
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteAllPlansAndMenusAndUnitsAndMetersAndTaxRates(options?: AxiosRequestConfig<any> | undefined): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<void>>;
    /**
     * Delete a pricing plan.
     * @summary Delete Pricing Plan
     * @param {string} planId Pricing Plan ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deletePricingPlan(planId: string, options?: AxiosRequestConfig<any> | undefined): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<void>>;
    /**
     * Delete product data from Stripe.
     * @summary Delete Product Data from Stripe
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteStripePlan(options?: AxiosRequestConfig<any> | undefined): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<void>>;
    /**
     * Get a pricing plan.
     * @summary Get Pricing Plan
     * @param {string} planId Pricing Plan ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getPricingPlan(planId: string, options?: AxiosRequestConfig<any> | undefined): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<PricingPlan>>;
    /**
     * Get pricing plans. Multiple feature menus are grouped together and defined as one pricing plan. Each tenant can choose a pricing plan defined here. If you have a specific tenant-specific rate (private pricing), create and connect the pricing plan specifically for that tenant.
     * @summary Get Pricing Plans
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getPricingPlans(options?: AxiosRequestConfig<any> | undefined): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<PricingPlans>>;
    /**
     * Connect information to Stripe.
     * @summary Connect to Stripe
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    linkPlanToStripe(options?: AxiosRequestConfig<any> | undefined): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<void>>;
    /**
     * Update a pricing plan.
     * @summary Update Pricing Plan
     * @param {string} planId Pricing Plan ID
     * @param {SavePricingPlanParam} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updatePricingPlan(planId: string, body?: SavePricingPlanParam | undefined, options?: AxiosRequestConfig<any> | undefined): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<void>>;
    /**
     * Update price plan and feature menu/pricing unit to used.
     * @summary Update Used Flag
     * @param {UpdatePricingPlansUsedParam} [updatePricingPlansUsedParam]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updatePricingPlansUsed(updatePricingPlansUsedParam?: UpdatePricingPlansUsedParam | undefined, options?: AxiosRequestConfig<any> | undefined): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<void>>;
};
/**
 * PricingPlansApi - factory interface
 * @export
 */
export declare const PricingPlansApiFactory: (configuration?: Configuration | undefined, basePath?: string | undefined, axios?: AxiosInstance | undefined) => {
    /**
     * Create a pricing plan.
     * @summary Create Pricing Plan
     * @param {SavePricingPlanParam} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createPricingPlan(body?: SavePricingPlanParam | undefined, options?: any): AxiosPromise<PricingPlan>;
    /**
     * Unconditionally remove all rate plans, menus, units, meters and tax rates.
     * @summary Delete all Plans, Menus, Units, Meters and Tax Rates
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteAllPlansAndMenusAndUnitsAndMetersAndTaxRates(options?: any): AxiosPromise<void>;
    /**
     * Delete a pricing plan.
     * @summary Delete Pricing Plan
     * @param {string} planId Pricing Plan ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deletePricingPlan(planId: string, options?: any): AxiosPromise<void>;
    /**
     * Delete product data from Stripe.
     * @summary Delete Product Data from Stripe
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteStripePlan(options?: any): AxiosPromise<void>;
    /**
     * Get a pricing plan.
     * @summary Get Pricing Plan
     * @param {string} planId Pricing Plan ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getPricingPlan(planId: string, options?: any): AxiosPromise<PricingPlan>;
    /**
     * Get pricing plans. Multiple feature menus are grouped together and defined as one pricing plan. Each tenant can choose a pricing plan defined here. If you have a specific tenant-specific rate (private pricing), create and connect the pricing plan specifically for that tenant.
     * @summary Get Pricing Plans
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getPricingPlans(options?: any): AxiosPromise<PricingPlans>;
    /**
     * Connect information to Stripe.
     * @summary Connect to Stripe
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    linkPlanToStripe(options?: any): AxiosPromise<void>;
    /**
     * Update a pricing plan.
     * @summary Update Pricing Plan
     * @param {string} planId Pricing Plan ID
     * @param {SavePricingPlanParam} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updatePricingPlan(planId: string, body?: SavePricingPlanParam | undefined, options?: any): AxiosPromise<void>;
    /**
     * Update price plan and feature menu/pricing unit to used.
     * @summary Update Used Flag
     * @param {UpdatePricingPlansUsedParam} [updatePricingPlansUsedParam]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updatePricingPlansUsed(updatePricingPlansUsedParam?: UpdatePricingPlansUsedParam | undefined, options?: any): AxiosPromise<void>;
};
/**
 * PricingPlansApi - object-oriented interface
 * @export
 * @class PricingPlansApi
 * @extends {BaseAPI}
 */
export declare class PricingPlansApi extends BaseAPI {
    /**
     * Create a pricing plan.
     * @summary Create Pricing Plan
     * @param {SavePricingPlanParam} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PricingPlansApi
     */
    createPricingPlan(body?: SavePricingPlanParam, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<PricingPlan, any>>;
    /**
     * Unconditionally remove all rate plans, menus, units, meters and tax rates.
     * @summary Delete all Plans, Menus, Units, Meters and Tax Rates
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PricingPlansApi
     */
    deleteAllPlansAndMenusAndUnitsAndMetersAndTaxRates(options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * Delete a pricing plan.
     * @summary Delete Pricing Plan
     * @param {string} planId Pricing Plan ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PricingPlansApi
     */
    deletePricingPlan(planId: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * Delete product data from Stripe.
     * @summary Delete Product Data from Stripe
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PricingPlansApi
     */
    deleteStripePlan(options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * Get a pricing plan.
     * @summary Get Pricing Plan
     * @param {string} planId Pricing Plan ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PricingPlansApi
     */
    getPricingPlan(planId: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<PricingPlan, any>>;
    /**
     * Get pricing plans. Multiple feature menus are grouped together and defined as one pricing plan. Each tenant can choose a pricing plan defined here. If you have a specific tenant-specific rate (private pricing), create and connect the pricing plan specifically for that tenant.
     * @summary Get Pricing Plans
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PricingPlansApi
     */
    getPricingPlans(options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<PricingPlans, any>>;
    /**
     * Connect information to Stripe.
     * @summary Connect to Stripe
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PricingPlansApi
     */
    linkPlanToStripe(options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * Update a pricing plan.
     * @summary Update Pricing Plan
     * @param {string} planId Pricing Plan ID
     * @param {SavePricingPlanParam} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PricingPlansApi
     */
    updatePricingPlan(planId: string, body?: SavePricingPlanParam, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * Update price plan and feature menu/pricing unit to used.
     * @summary Update Used Flag
     * @param {UpdatePricingPlansUsedParam} [updatePricingPlansUsedParam]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PricingPlansApi
     */
    updatePricingPlansUsed(updatePricingPlansUsedParam?: UpdatePricingPlansUsedParam, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
}
/**
 * PricingUnitsApi - axios parameter creator
 * @export
 */
export declare const PricingUnitsApiAxiosParamCreator: (configuration?: Configuration | undefined) => {
    /**
     * Create a pricing unit.
     * @summary Create Pricing Unit
     * @param {PricingUnitForSave} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createPricingUnit: (body?: PricingUnitForSave | undefined, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Delete a pricing unit.
     * @summary Delete Pricing Unit
     * @param {string} pricingUnitId Unit ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deletePricingUnit: (pricingUnitId: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Get a pricing unit.
     * @summary Get Pricing Unit
     * @param {string} pricingUnitId Unit ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getPricingUnit: (pricingUnitId: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Gets the smallest unit of measure on which the charges are based. \"Fixed Unit\" (type=fixed) is a unit of a monthly fixed charge such as a basic charge, \"Usage Unit\" (type=usage) is a unit in which a charge is generated per unit such as billing for the number of users, \"Tiered Unit\" (type=tiered) is a fixed charge unit for each tier of usage, such as the tiered packet charge for mobile phones, \"Tiered Usage Unit\" (type=tiered_usage) is a unit where the charge per unit changes according to the usage amount, such as a volume discount.
     * @summary Get Pricing Units
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getPricingUnits: (options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Update pricing unit.
     * @summary Update Pricing Unit
     * @param {string} pricingUnitId Unit ID
     * @param {PricingUnitForSave} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updatePricingUnit: (pricingUnitId: string, body?: PricingUnitForSave | undefined, options?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * PricingUnitsApi - functional programming interface
 * @export
 */
export declare const PricingUnitsApiFp: (configuration?: Configuration | undefined) => {
    /**
     * Create a pricing unit.
     * @summary Create Pricing Unit
     * @param {PricingUnitForSave} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createPricingUnit(body?: PricingUnitForSave | undefined, options?: AxiosRequestConfig<any> | undefined): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<PricingUnit>>;
    /**
     * Delete a pricing unit.
     * @summary Delete Pricing Unit
     * @param {string} pricingUnitId Unit ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deletePricingUnit(pricingUnitId: string, options?: AxiosRequestConfig<any> | undefined): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<void>>;
    /**
     * Get a pricing unit.
     * @summary Get Pricing Unit
     * @param {string} pricingUnitId Unit ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getPricingUnit(pricingUnitId: string, options?: AxiosRequestConfig<any> | undefined): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<PricingUnit>>;
    /**
     * Gets the smallest unit of measure on which the charges are based. \"Fixed Unit\" (type=fixed) is a unit of a monthly fixed charge such as a basic charge, \"Usage Unit\" (type=usage) is a unit in which a charge is generated per unit such as billing for the number of users, \"Tiered Unit\" (type=tiered) is a fixed charge unit for each tier of usage, such as the tiered packet charge for mobile phones, \"Tiered Usage Unit\" (type=tiered_usage) is a unit where the charge per unit changes according to the usage amount, such as a volume discount.
     * @summary Get Pricing Units
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getPricingUnits(options?: AxiosRequestConfig<any> | undefined): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<PricingUnits>>;
    /**
     * Update pricing unit.
     * @summary Update Pricing Unit
     * @param {string} pricingUnitId Unit ID
     * @param {PricingUnitForSave} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updatePricingUnit(pricingUnitId: string, body?: PricingUnitForSave | undefined, options?: AxiosRequestConfig<any> | undefined): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<void>>;
};
/**
 * PricingUnitsApi - factory interface
 * @export
 */
export declare const PricingUnitsApiFactory: (configuration?: Configuration | undefined, basePath?: string | undefined, axios?: AxiosInstance | undefined) => {
    /**
     * Create a pricing unit.
     * @summary Create Pricing Unit
     * @param {PricingUnitForSave} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createPricingUnit(body?: PricingUnitForSave | undefined, options?: any): AxiosPromise<PricingUnit>;
    /**
     * Delete a pricing unit.
     * @summary Delete Pricing Unit
     * @param {string} pricingUnitId Unit ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deletePricingUnit(pricingUnitId: string, options?: any): AxiosPromise<void>;
    /**
     * Get a pricing unit.
     * @summary Get Pricing Unit
     * @param {string} pricingUnitId Unit ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getPricingUnit(pricingUnitId: string, options?: any): AxiosPromise<PricingUnit>;
    /**
     * Gets the smallest unit of measure on which the charges are based. \"Fixed Unit\" (type=fixed) is a unit of a monthly fixed charge such as a basic charge, \"Usage Unit\" (type=usage) is a unit in which a charge is generated per unit such as billing for the number of users, \"Tiered Unit\" (type=tiered) is a fixed charge unit for each tier of usage, such as the tiered packet charge for mobile phones, \"Tiered Usage Unit\" (type=tiered_usage) is a unit where the charge per unit changes according to the usage amount, such as a volume discount.
     * @summary Get Pricing Units
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getPricingUnits(options?: any): AxiosPromise<PricingUnits>;
    /**
     * Update pricing unit.
     * @summary Update Pricing Unit
     * @param {string} pricingUnitId Unit ID
     * @param {PricingUnitForSave} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updatePricingUnit(pricingUnitId: string, body?: PricingUnitForSave | undefined, options?: any): AxiosPromise<void>;
};
/**
 * PricingUnitsApi - object-oriented interface
 * @export
 * @class PricingUnitsApi
 * @extends {BaseAPI}
 */
export declare class PricingUnitsApi extends BaseAPI {
    /**
     * Create a pricing unit.
     * @summary Create Pricing Unit
     * @param {PricingUnitForSave} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PricingUnitsApi
     */
    createPricingUnit(body?: PricingUnitForSave, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<PricingUnit, any>>;
    /**
     * Delete a pricing unit.
     * @summary Delete Pricing Unit
     * @param {string} pricingUnitId Unit ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PricingUnitsApi
     */
    deletePricingUnit(pricingUnitId: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * Get a pricing unit.
     * @summary Get Pricing Unit
     * @param {string} pricingUnitId Unit ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PricingUnitsApi
     */
    getPricingUnit(pricingUnitId: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<PricingUnit, any>>;
    /**
     * Gets the smallest unit of measure on which the charges are based. \"Fixed Unit\" (type=fixed) is a unit of a monthly fixed charge such as a basic charge, \"Usage Unit\" (type=usage) is a unit in which a charge is generated per unit such as billing for the number of users, \"Tiered Unit\" (type=tiered) is a fixed charge unit for each tier of usage, such as the tiered packet charge for mobile phones, \"Tiered Usage Unit\" (type=tiered_usage) is a unit where the charge per unit changes according to the usage amount, such as a volume discount.
     * @summary Get Pricing Units
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PricingUnitsApi
     */
    getPricingUnits(options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<PricingUnits, any>>;
    /**
     * Update pricing unit.
     * @summary Update Pricing Unit
     * @param {string} pricingUnitId Unit ID
     * @param {PricingUnitForSave} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PricingUnitsApi
     */
    updatePricingUnit(pricingUnitId: string, body?: PricingUnitForSave, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
}
/**
 * TaxRateApi - axios parameter creator
 * @export
 */
export declare const TaxRateApiAxiosParamCreator: (configuration?: Configuration | undefined) => {
    /**
     * Creates a tax rate.
     * @summary Create Tax Rate
     * @param {TaxRateProps} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createTaxRate: (body?: TaxRateProps | undefined, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Get all Tax Rates
     * @summary Get Tax Rates
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getTaxRates: (options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Update tax rate.
     * @summary Update Tax Rate
     * @param {string} taxRateId Tax Rate ID
     * @param {UpdateTaxRateParam} [updateTaxRateParam]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateTaxRate: (taxRateId: string, updateTaxRateParam?: UpdateTaxRateParam | undefined, options?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * TaxRateApi - functional programming interface
 * @export
 */
export declare const TaxRateApiFp: (configuration?: Configuration | undefined) => {
    /**
     * Creates a tax rate.
     * @summary Create Tax Rate
     * @param {TaxRateProps} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createTaxRate(body?: TaxRateProps | undefined, options?: AxiosRequestConfig<any> | undefined): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<TaxRate>>;
    /**
     * Get all Tax Rates
     * @summary Get Tax Rates
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getTaxRates(options?: AxiosRequestConfig<any> | undefined): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<TaxRates>>;
    /**
     * Update tax rate.
     * @summary Update Tax Rate
     * @param {string} taxRateId Tax Rate ID
     * @param {UpdateTaxRateParam} [updateTaxRateParam]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateTaxRate(taxRateId: string, updateTaxRateParam?: UpdateTaxRateParam | undefined, options?: AxiosRequestConfig<any> | undefined): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<void>>;
};
/**
 * TaxRateApi - factory interface
 * @export
 */
export declare const TaxRateApiFactory: (configuration?: Configuration | undefined, basePath?: string | undefined, axios?: AxiosInstance | undefined) => {
    /**
     * Creates a tax rate.
     * @summary Create Tax Rate
     * @param {TaxRateProps} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createTaxRate(body?: TaxRateProps | undefined, options?: any): AxiosPromise<TaxRate>;
    /**
     * Get all Tax Rates
     * @summary Get Tax Rates
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getTaxRates(options?: any): AxiosPromise<TaxRates>;
    /**
     * Update tax rate.
     * @summary Update Tax Rate
     * @param {string} taxRateId Tax Rate ID
     * @param {UpdateTaxRateParam} [updateTaxRateParam]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateTaxRate(taxRateId: string, updateTaxRateParam?: UpdateTaxRateParam | undefined, options?: any): AxiosPromise<void>;
};
/**
 * TaxRateApi - object-oriented interface
 * @export
 * @class TaxRateApi
 * @extends {BaseAPI}
 */
export declare class TaxRateApi extends BaseAPI {
    /**
     * Creates a tax rate.
     * @summary Create Tax Rate
     * @param {TaxRateProps} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TaxRateApi
     */
    createTaxRate(body?: TaxRateProps, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<TaxRate, any>>;
    /**
     * Get all Tax Rates
     * @summary Get Tax Rates
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TaxRateApi
     */
    getTaxRates(options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<TaxRates, any>>;
    /**
     * Update tax rate.
     * @summary Update Tax Rate
     * @param {string} taxRateId Tax Rate ID
     * @param {UpdateTaxRateParam} [updateTaxRateParam]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TaxRateApi
     */
    updateTaxRate(taxRateId: string, updateTaxRateParam?: UpdateTaxRateParam, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
}
