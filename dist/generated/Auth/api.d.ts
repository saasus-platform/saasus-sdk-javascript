/**
 * SaaSus Auth API Schema
 * スキーマ
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import { Configuration } from './configuration';
import { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { RequestArgs, BaseAPI } from './base';
/**
 * アカウント認証設定 未提供の機能のため、変更・保存はできません
 * @export
 * @interface AccountVerification
 */
export interface AccountVerification {
    /**
     * code: 検証コード link: 検証リンク ※ 未提供の機能のため、変更・保存はできません
     * @type {string}
     * @memberof AccountVerification
     */
    'verification_method': AccountVerificationVerificationMethodEnum;
    /**
     * email: Eメール sms: SMS smsOrEmail: SMS不可の場合にEメール
     * @type {string}
     * @memberof AccountVerification
     */
    'sending_to': AccountVerificationSendingToEnum;
}
export declare const AccountVerificationVerificationMethodEnum: {
    readonly Code: "code";
    readonly Link: "link";
};
export declare type AccountVerificationVerificationMethodEnum = typeof AccountVerificationVerificationMethodEnum[keyof typeof AccountVerificationVerificationMethodEnum];
export declare const AccountVerificationSendingToEnum: {
    readonly Email: "email";
    readonly Sms: "sms";
    readonly SmsOrEmail: "smsOrEmail";
};
export declare type AccountVerificationSendingToEnum = typeof AccountVerificationSendingToEnum[keyof typeof AccountVerificationSendingToEnum];
/**
 *
 * @export
 * @interface ApiKeys
 */
export interface ApiKeys {
    /**
     * APIキー
     * @type {Array<string>}
     * @memberof ApiKeys
     */
    'api_keys': Array<string>;
}
/**
 *
 * @export
 * @interface Attribute
 */
export interface Attribute {
    /**
     * 属性名
     * @type {string}
     * @memberof Attribute
     */
    'attribute_name': string;
    /**
     * 表示名
     * @type {string}
     * @memberof Attribute
     */
    'display_name': string;
    /**
     *
     * @type {AttributeType}
     * @memberof Attribute
     */
    'attribute_type': AttributeType;
}
/**
 * 型（dateはYYYY-MM-DDの形式で使用する事ができます。）
 * @export
 * @enum {string}
 */
export declare const AttributeType: {
    readonly String: "string";
    readonly Number: "number";
    readonly Bool: "bool";
    readonly Date: "date";
};
export declare type AttributeType = typeof AttributeType[keyof typeof AttributeType];
/**
 *
 * @export
 * @interface AuthInfo
 */
export interface AuthInfo {
    /**
     * 認証後遷移先
     * @type {string}
     * @memberof AuthInfo
     */
    'callback_url': string;
}
/**
 *
 * @export
 * @interface AuthorizationTempCode
 */
export interface AuthorizationTempCode {
    /**
     *
     * @type {string}
     * @memberof AuthorizationTempCode
     */
    'code': string;
}
/**
 * 中国の寧夏、北京を除く全てのAWSリージョンが選択可能です。
 * @export
 * @enum {string}
 */
export declare const AwsRegion: {
    readonly UsEast1: "us-east-1";
    readonly UsEast2: "us-east-2";
    readonly UsWest1: "us-west-1";
    readonly UsWest2: "us-west-2";
    readonly AfSouth1: "af-south-1";
    readonly ApEast1: "ap-east-1";
    readonly ApSouth1: "ap-south-1";
    readonly ApNortheast1: "ap-northeast-1";
    readonly ApNortheast2: "ap-northeast-2";
    readonly ApNortheast3: "ap-northeast-3";
    readonly ApSoutheast1: "ap-southeast-1";
    readonly ApSoutheast2: "ap-southeast-2";
    readonly ApSoutheast3: "ap-southeast-3";
    readonly CaCentral1: "ca-central-1";
    readonly EuCentral1: "eu-central-1";
    readonly EuNorth1: "eu-north-1";
    readonly EuSouth1: "eu-south-1";
    readonly EuWest1: "eu-west-1";
    readonly EuWest2: "eu-west-2";
    readonly EuWest3: "eu-west-3";
    readonly MeSouth1: "me-south-1";
    readonly SaEast1: "sa-east-1";
};
export declare type AwsRegion = typeof AwsRegion[keyof typeof AwsRegion];
/**
 *
 * @export
 * @interface BasicInfo
 */
export interface BasicInfo {
    /**
     * ドメイン名
     * @type {string}
     * @memberof BasicInfo
     */
    'domain_name': string;
    /**
     * DNSレコードの検証結果
     * @type {boolean}
     * @memberof BasicInfo
     */
    'is_dns_validated': boolean;
    /**
     *
     * @type {DnsRecord}
     * @memberof BasicInfo
     */
    'certificate_dns_record': DnsRecord;
    /**
     *
     * @type {DnsRecord}
     * @memberof BasicInfo
     */
    'cloud_front_dns_record': DnsRecord;
    /**
     * DKIM DNS レコード
     * @type {Array<DnsRecord>}
     * @memberof BasicInfo
     */
    'dkim_dns_records': Array<DnsRecord>;
    /**
     * ドメイン名
     * @type {string}
     * @memberof BasicInfo
     */
    'default_domain_name': string;
}
/**
 *
 * @export
 * @interface ClientSecret
 */
export interface ClientSecret {
    /**
     * クライアントシークレット
     * @type {string}
     * @memberof ClientSecret
     */
    'client_secret': string;
}
/**
 *
 * @export
 * @interface CreateSaasUserParam
 */
export interface CreateSaasUserParam {
    /**
     * メールアドレス
     * @type {string}
     * @memberof CreateSaasUserParam
     */
    'email': string;
    /**
     *
     * @type {string}
     * @memberof CreateSaasUserParam
     */
    'password': string;
}
/**
 *
 * @export
 * @interface CreateSecretCodeParam
 */
export interface CreateSecretCodeParam {
    /**
     * アクセストークン
     * @type {string}
     * @memberof CreateSecretCodeParam
     */
    'access_token': string;
}
/**
 *
 * @export
 * @interface CreateTenantUserParam
 */
export interface CreateTenantUserParam {
    /**
     * メールアドレス
     * @type {string}
     * @memberof CreateTenantUserParam
     */
    'email': string;
    /**
     * 属性情報（SaaSus コンソールでテナント属性定義を行い設定した情報）
     * @type {{ [key: string]: any; }}
     * @memberof CreateTenantUserParam
     */
    'attributes': {
        [key: string]: any;
    };
}
/**
 *
 * @export
 * @interface CreateTenantUserRolesParam
 */
export interface CreateTenantUserRolesParam {
    /**
     * 役割(ロール)情報
     * @type {Array<string>}
     * @memberof CreateTenantUserRolesParam
     */
    'role_names': Array<string>;
}
/**
 *
 * @export
 * @interface Credentials
 */
export interface Credentials {
    /**
     * IDトークン
     * @type {string}
     * @memberof Credentials
     */
    'id_token': string;
    /**
     * アクセストークン
     * @type {string}
     * @memberof Credentials
     */
    'access_token': string;
    /**
     * リフレッシュトークン
     * @type {string}
     * @memberof Credentials
     */
    'refresh_token'?: string;
}
/**
 *
 * @export
 * @interface CustomizePageProps
 */
export interface CustomizePageProps {
    /**
     * 画面のHTMLを編集できます ※ 未提供の機能のため、変更・保存はできません
     * @type {string}
     * @memberof CustomizePageProps
     */
    'html_contents': string;
    /**
     * 利用規約の同意チェックボックスを表示するが設定されているか
     * @type {boolean}
     * @memberof CustomizePageProps
     */
    'is_terms_of_service': boolean;
    /**
     * プライバシーポリシーチェックボックスを表示するが設定されているか
     * @type {boolean}
     * @memberof CustomizePageProps
     */
    'is_privacy_policy': boolean;
}
/**
 *
 * @export
 * @interface CustomizePageSettings
 */
export interface CustomizePageSettings {
    /**
     * サービスアイコン
     * @type {string}
     * @memberof CustomizePageSettings
     */
    'icon': string;
    /**
     * ファビコン
     * @type {string}
     * @memberof CustomizePageSettings
     */
    'favicon': string;
    /**
     * サービス名
     * @type {string}
     * @memberof CustomizePageSettings
     */
    'title': string;
    /**
     * 利用規約URL
     * @type {string}
     * @memberof CustomizePageSettings
     */
    'terms_of_service_url': string;
    /**
     * プライバシーポリシーURL
     * @type {string}
     * @memberof CustomizePageSettings
     */
    'privacy_policy_url': string;
    /**
     * Google Tag Manager コンテナ ID
     * @type {string}
     * @memberof CustomizePageSettings
     */
    'google_tag_manager_container_id': string;
}
/**
 *
 * @export
 * @interface CustomizePageSettingsAllOf
 */
export interface CustomizePageSettingsAllOf {
    /**
     * サービスアイコン
     * @type {string}
     * @memberof CustomizePageSettingsAllOf
     */
    'icon': string;
    /**
     * ファビコン
     * @type {string}
     * @memberof CustomizePageSettingsAllOf
     */
    'favicon': string;
}
/**
 *
 * @export
 * @interface CustomizePageSettingsProps
 */
export interface CustomizePageSettingsProps {
    /**
     * サービス名
     * @type {string}
     * @memberof CustomizePageSettingsProps
     */
    'title': string;
    /**
     * 利用規約URL
     * @type {string}
     * @memberof CustomizePageSettingsProps
     */
    'terms_of_service_url': string;
    /**
     * プライバシーポリシーURL
     * @type {string}
     * @memberof CustomizePageSettingsProps
     */
    'privacy_policy_url': string;
    /**
     * Google Tag Manager コンテナ ID
     * @type {string}
     * @memberof CustomizePageSettingsProps
     */
    'google_tag_manager_container_id': string;
}
/**
 *
 * @export
 * @interface CustomizePages
 */
export interface CustomizePages {
    /**
     *
     * @type {CustomizePageProps}
     * @memberof CustomizePages
     */
    'sign_up_page': CustomizePageProps;
    /**
     *
     * @type {CustomizePageProps}
     * @memberof CustomizePages
     */
    'sign_in_page': CustomizePageProps;
    /**
     *
     * @type {CustomizePageProps}
     * @memberof CustomizePages
     */
    'password_reset_page': CustomizePageProps;
}
/**
 * 信頼済みデバイスの記憶の設定
 * @export
 * @interface DeviceConfiguration
 */
export interface DeviceConfiguration {
    /**
     * always: 常に記憶する userOptIn: ユーザーオプトイン no: 記憶しない
     * @type {string}
     * @memberof DeviceConfiguration
     */
    'device_remembering': DeviceConfigurationDeviceRememberingEnum;
}
export declare const DeviceConfigurationDeviceRememberingEnum: {
    readonly Always: "always";
    readonly UserOptIn: "userOptIn";
    readonly No: "no";
};
export declare type DeviceConfigurationDeviceRememberingEnum = typeof DeviceConfigurationDeviceRememberingEnum[keyof typeof DeviceConfigurationDeviceRememberingEnum];
/**
 *
 * @export
 * @interface DnsRecord
 */
export interface DnsRecord {
    /**
     * CNAMEリソースレコード
     * @type {string}
     * @memberof DnsRecord
     */
    'type': DnsRecordTypeEnum;
    /**
     * レコード名
     * @type {string}
     * @memberof DnsRecord
     */
    'name': string;
    /**
     * 値
     * @type {string}
     * @memberof DnsRecord
     */
    'value': string;
}
export declare const DnsRecordTypeEnum: {
    readonly Cname: "CNAME";
};
export declare type DnsRecordTypeEnum = typeof DnsRecordTypeEnum[keyof typeof DnsRecordTypeEnum];
/**
 * 環境情報
 * @export
 * @interface Env
 */
export interface Env {
    /**
     *
     * @type {number}
     * @memberof Env
     */
    'id': number;
    /**
     * 環境名
     * @type {string}
     * @memberof Env
     */
    'name': string;
}
/**
 * env一覧
 * @export
 * @interface Envs
 */
export interface Envs {
    /**
     *
     * @type {Array<Env>}
     * @memberof Envs
     */
    'envs': Array<Env>;
}
/**
 *
 * @export
 * @interface EventBridgeSettings
 */
export interface EventBridgeSettings {
    /**
     * AWSアカウントID
     * @type {string}
     * @memberof EventBridgeSettings
     */
    'aws_account_id': string;
    /**
     *
     * @type {AwsRegion}
     * @memberof EventBridgeSettings
     */
    'aws_region': AwsRegion;
}
/**
 *
 * @export
 * @interface IdentityProviderProps
 */
export interface IdentityProviderProps {
    /**
     *
     * @type {string}
     * @memberof IdentityProviderProps
     */
    'application_id': string;
    /**
     *
     * @type {string}
     * @memberof IdentityProviderProps
     */
    'application_secret': string;
    /**
     *
     * @type {string}
     * @memberof IdentityProviderProps
     */
    'approval_scope': string;
}
/**
 *
 * @export
 * @interface IdentityProviders
 */
export interface IdentityProviders {
    /**
     *
     * @type {IdentityProviderProps}
     * @memberof IdentityProviders
     */
    'google': IdentityProviderProps;
}
/**
 *
 * @export
 * @interface MessageTemplate
 */
export interface MessageTemplate {
    /**
     * タイトル
     * @type {string}
     * @memberof MessageTemplate
     */
    'subject': string;
    /**
     * メッセージ
     * @type {string}
     * @memberof MessageTemplate
     */
    'message': string;
}
/**
 * MFAデバイス認証設定 未提供の機能のため、変更・保存はできません
 * @export
 * @interface MfaConfiguration
 */
export interface MfaConfiguration {
    /**
     * on: 全ユーザーがログイン時に適用 optional: MFA要素が有効になっている個別ユーザーに適用 ※ パラメータは現在optionalで固定となります。
     * @type {string}
     * @memberof MfaConfiguration
     */
    'mfa_configuration': MfaConfigurationMfaConfigurationEnum;
}
export declare const MfaConfigurationMfaConfigurationEnum: {
    readonly On: "on";
    readonly Optional: "optional";
};
export declare type MfaConfigurationMfaConfigurationEnum = typeof MfaConfigurationMfaConfigurationEnum[keyof typeof MfaConfigurationMfaConfigurationEnum];
/**
 *
 * @export
 * @interface MfaPreference
 */
export interface MfaPreference {
    /**
     * MFAを有効にするか否か
     * @type {boolean}
     * @memberof MfaPreference
     */
    'enabled': boolean;
    /**
     * MFAの方法(enabledがtrueの場合は必須)
     * @type {string}
     * @memberof MfaPreference
     */
    'method'?: MfaPreferenceMethodEnum;
}
export declare const MfaPreferenceMethodEnum: {
    readonly SoftwareToken: "softwareToken";
};
export declare type MfaPreferenceMethodEnum = typeof MfaPreferenceMethodEnum[keyof typeof MfaPreferenceMethodEnum];
/**
 *
 * @export
 * @interface ModelError
 */
export interface ModelError {
    /**
     * permission_denied
     * @type {string}
     * @memberof ModelError
     */
    'type': string;
    /**
     * Error message
     * @type {string}
     * @memberof ModelError
     */
    'message': string;
    /**
     *
     * @type {{ [key: string]: any; }}
     * @memberof ModelError
     */
    'data'?: {
        [key: string]: any;
    };
}
/**
 *
 * @export
 * @interface NotificationMessages
 */
export interface NotificationMessages {
    /**
     *
     * @type {MessageTemplate}
     * @memberof NotificationMessages
     */
    'sign_up': MessageTemplate;
    /**
     *
     * @type {MessageTemplate}
     * @memberof NotificationMessages
     */
    'create_user': MessageTemplate;
    /**
     *
     * @type {MessageTemplate}
     * @memberof NotificationMessages
     */
    'resend_code': MessageTemplate;
    /**
     *
     * @type {MessageTemplate}
     * @memberof NotificationMessages
     */
    'forgot_password': MessageTemplate;
    /**
     *
     * @type {MessageTemplate}
     * @memberof NotificationMessages
     */
    'update_user_attribute': MessageTemplate;
    /**
     *
     * @type {MessageTemplate}
     * @memberof NotificationMessages
     */
    'verify_user_attribute': MessageTemplate;
    /**
     *
     * @type {MessageTemplate}
     * @memberof NotificationMessages
     */
    'authentication_mfa': MessageTemplate;
}
/**
 * パスワードポリシー
 * @export
 * @interface PasswordPolicy
 */
export interface PasswordPolicy {
    /**
     * 最小文字数
     * @type {number}
     * @memberof PasswordPolicy
     */
    'minimum_length': number;
    /**
     * 一文字以上の小文字を含むが設定されているか
     * @type {boolean}
     * @memberof PasswordPolicy
     */
    'is_require_lowercase': boolean;
    /**
     * 一文字以上の数字を含むが設定されているか
     * @type {boolean}
     * @memberof PasswordPolicy
     */
    'is_require_numbers': boolean;
    /**
     * 一文字以上の特殊文字を含むが設定されているか
     * @type {boolean}
     * @memberof PasswordPolicy
     */
    'is_require_symbols': boolean;
    /**
     * 一文字以上の大文字を含むが設定されているか
     * @type {boolean}
     * @memberof PasswordPolicy
     */
    'is_require_uppercase': boolean;
    /**
     * 仮パスワードの有効期限
     * @type {number}
     * @memberof PasswordPolicy
     */
    'temporary_password_validity_days': number;
}
/**
 *
 * @export
 * @interface PlanHistories
 */
export interface PlanHistories {
    /**
     * 料金プラン履歴
     * @type {Array<PlanHistory>}
     * @memberof PlanHistories
     */
    'plan_histories': Array<PlanHistory>;
}
/**
 *
 * @export
 * @interface PlanHistory
 */
export interface PlanHistory {
    /**
     *
     * @type {string}
     * @memberof PlanHistory
     */
    'plan_id': string;
    /**
     * 登録日
     * @type {string}
     * @memberof PlanHistory
     */
    'plan_applied_at': string;
}
/**
 * reCAPTCHA認証設定 ※ 未提供の機能のため、変更・保存はできません
 * @export
 * @interface RecaptchaProps
 */
export interface RecaptchaProps {
    /**
     * Site key
     * @type {string}
     * @memberof RecaptchaProps
     */
    'site_key': string;
    /**
     * Secret key
     * @type {string}
     * @memberof RecaptchaProps
     */
    'secret_key': string;
}
/**
 * 役割(ロール)情報
 * @export
 * @interface Role
 */
export interface Role {
    /**
     * 役割(ロール)名
     * @type {string}
     * @memberof Role
     */
    'role_name': string;
    /**
     * 役割(ロール)表示名
     * @type {string}
     * @memberof Role
     */
    'display_name': string;
}
/**
 *
 * @export
 * @interface Roles
 */
export interface Roles {
    /**
     *
     * @type {Array<Role>}
     * @memberof Roles
     */
    'roles': Array<Role>;
}
/**
 *
 * @export
 * @interface SaasID
 */
export interface SaasID {
    /**
     *
     * @type {string}
     * @memberof SaasID
     */
    'tenant_id': string;
    /**
     *
     * @type {number}
     * @memberof SaasID
     */
    'env_id': number;
    /**
     * saas id
     * @type {string}
     * @memberof SaasID
     */
    'saas_id': string;
}
/**
 *
 * @export
 * @interface SaasUser
 */
export interface SaasUser {
    /**
     *
     * @type {string}
     * @memberof SaasUser
     */
    'id': string;
    /**
     * メールアドレス
     * @type {string}
     * @memberof SaasUser
     */
    'email': string;
}
/**
 *
 * @export
 * @interface SaasUsers
 */
export interface SaasUsers {
    /**
     *
     * @type {Array<SaasUser>}
     * @memberof SaasUsers
     */
    'users': Array<SaasUser>;
}
/**
 * セルフサインアップを許可設定
 * @export
 * @interface SelfRegist
 */
export interface SelfRegist {
    /**
     *
     * @type {boolean}
     * @memberof SelfRegist
     */
    'enable': boolean;
}
/**
 *
 * @export
 * @interface SignInSettings
 */
export interface SignInSettings {
    /**
     *
     * @type {PasswordPolicy}
     * @memberof SignInSettings
     */
    'password_policy': PasswordPolicy;
    /**
     *
     * @type {DeviceConfiguration}
     * @memberof SignInSettings
     */
    'device_configuration': DeviceConfiguration;
    /**
     *
     * @type {MfaConfiguration}
     * @memberof SignInSettings
     */
    'mfa_configuration': MfaConfiguration;
    /**
     *
     * @type {RecaptchaProps}
     * @memberof SignInSettings
     */
    'recaptcha_props': RecaptchaProps;
    /**
     *
     * @type {AccountVerification}
     * @memberof SignInSettings
     */
    'account_verification': AccountVerification;
    /**
     *
     * @type {SelfRegist}
     * @memberof SignInSettings
     */
    'self_regist': SelfRegist;
}
/**
 *
 * @export
 * @interface SoftwareTokenSecretCode
 */
export interface SoftwareTokenSecretCode {
    /**
     * シークレットコード
     * @type {string}
     * @memberof SoftwareTokenSecretCode
     */
    'secret_code': string;
}
/**
 *
 * @export
 * @interface Tenant
 */
export interface Tenant {
    /**
     *
     * @type {string}
     * @memberof Tenant
     */
    'id': string;
    /**
     *
     * @type {string}
     * @memberof Tenant
     */
    'plan_id'?: string;
    /**
     * テナント名
     * @type {string}
     * @memberof Tenant
     */
    'name': string;
    /**
     * 属性情報
     * @type {{ [key: string]: any; }}
     * @memberof Tenant
     */
    'attributes': {
        [key: string]: any;
    };
    /**
     *
     * @type {string}
     * @memberof Tenant
     */
    'next_plan_id'?: string;
    /**
     * 次回料金プラン開始日
     * @type {string}
     * @memberof Tenant
     */
    'using_next_plan_from'?: string;
    /**
     * 事務管理部門スタッフメールアドレス
     * @type {string}
     * @memberof Tenant
     */
    'back_office_staff_email': string;
    /**
     * 料金プラン履歴
     * @type {Array<PlanHistory>}
     * @memberof Tenant
     */
    'plan_histories': Array<PlanHistory>;
}
/**
 *
 * @export
 * @interface TenantAllOf
 */
export interface TenantAllOf {
    /**
     *
     * @type {string}
     * @memberof TenantAllOf
     */
    'id': string;
    /**
     *
     * @type {string}
     * @memberof TenantAllOf
     */
    'plan_id'?: string;
}
/**
 *
 * @export
 * @interface TenantAttributes
 */
export interface TenantAttributes {
    /**
     * テナント属性定義
     * @type {Array<Attribute>}
     * @memberof TenantAttributes
     */
    'tenant_attributes': Array<Attribute>;
}
/**
 *
 * @export
 * @interface TenantProps
 */
export interface TenantProps {
    /**
     * テナント名
     * @type {string}
     * @memberof TenantProps
     */
    'name': string;
    /**
     * 属性情報
     * @type {{ [key: string]: any; }}
     * @memberof TenantProps
     */
    'attributes': {
        [key: string]: any;
    };
    /**
     *
     * @type {string}
     * @memberof TenantProps
     */
    'next_plan_id'?: string;
    /**
     * 次回料金プラン開始日
     * @type {string}
     * @memberof TenantProps
     */
    'using_next_plan_from'?: string;
    /**
     * 事務管理部門スタッフメールアドレス
     * @type {string}
     * @memberof TenantProps
     */
    'back_office_staff_email': string;
}
/**
 * テナント情報
 * @export
 * @interface Tenants
 */
export interface Tenants {
    /**
     *
     * @type {Array<Tenant>}
     * @memberof Tenants
     */
    'tenants': Array<Tenant>;
}
/**
 *
 * @export
 * @interface UpdateBasicInfoParam
 */
export interface UpdateBasicInfoParam {
    /**
     *
     * @type {string}
     * @memberof UpdateBasicInfoParam
     */
    'domain_name': string;
}
/**
 *
 * @export
 * @interface UpdateCustomizePageSettingsParam
 */
export interface UpdateCustomizePageSettingsParam {
    /**
     * サービスアイコン
     * @type {string}
     * @memberof UpdateCustomizePageSettingsParam
     */
    'icon': string;
    /**
     * ファビコン
     * @type {string}
     * @memberof UpdateCustomizePageSettingsParam
     */
    'favicon': string;
    /**
     * サービス名
     * @type {string}
     * @memberof UpdateCustomizePageSettingsParam
     */
    'title': string;
    /**
     * 利用規約URL
     * @type {string}
     * @memberof UpdateCustomizePageSettingsParam
     */
    'terms_of_service_url': string;
    /**
     * プライバシーポリシーURL
     * @type {string}
     * @memberof UpdateCustomizePageSettingsParam
     */
    'privacy_policy_url': string;
    /**
     * Google Tag Manager コンテナ ID
     * @type {string}
     * @memberof UpdateCustomizePageSettingsParam
     */
    'google_tag_manager_container_id': string;
}
/**
 *
 * @export
 * @interface UpdateCustomizePageSettingsParamAllOf
 */
export interface UpdateCustomizePageSettingsParamAllOf {
    /**
     * サービスアイコン
     * @type {string}
     * @memberof UpdateCustomizePageSettingsParamAllOf
     */
    'icon': string;
    /**
     * ファビコン
     * @type {string}
     * @memberof UpdateCustomizePageSettingsParamAllOf
     */
    'favicon': string;
}
/**
 *
 * @export
 * @interface UpdateCustomizePagesParam
 */
export interface UpdateCustomizePagesParam {
    /**
     *
     * @type {CustomizePageProps}
     * @memberof UpdateCustomizePagesParam
     */
    'sign_up_page'?: CustomizePageProps;
    /**
     *
     * @type {CustomizePageProps}
     * @memberof UpdateCustomizePagesParam
     */
    'sign_in_page'?: CustomizePageProps;
    /**
     *
     * @type {CustomizePageProps}
     * @memberof UpdateCustomizePagesParam
     */
    'password_reset_page'?: CustomizePageProps;
}
/**
 *
 * @export
 * @interface UpdateEnvParam
 */
export interface UpdateEnvParam {
    /**
     *
     * @type {string}
     * @memberof UpdateEnvParam
     */
    'name': string;
}
/**
 *
 * @export
 * @interface UpdateIdentityProviderParam
 */
export interface UpdateIdentityProviderParam {
    /**
     *
     * @type {string}
     * @memberof UpdateIdentityProviderParam
     */
    'provider': UpdateIdentityProviderParamProviderEnum;
    /**
     *
     * @type {IdentityProviderProps}
     * @memberof UpdateIdentityProviderParam
     */
    'identity_provider_props'?: IdentityProviderProps;
}
export declare const UpdateIdentityProviderParamProviderEnum: {
    readonly Google: "Google";
};
export declare type UpdateIdentityProviderParamProviderEnum = typeof UpdateIdentityProviderParamProviderEnum[keyof typeof UpdateIdentityProviderParamProviderEnum];
/**
 *
 * @export
 * @interface UpdateNotificationMessagesParam
 */
export interface UpdateNotificationMessagesParam {
    /**
     *
     * @type {MessageTemplate}
     * @memberof UpdateNotificationMessagesParam
     */
    'sign_up'?: MessageTemplate;
    /**
     *
     * @type {MessageTemplate}
     * @memberof UpdateNotificationMessagesParam
     */
    'create_user'?: MessageTemplate;
    /**
     *
     * @type {MessageTemplate}
     * @memberof UpdateNotificationMessagesParam
     */
    'resend_code'?: MessageTemplate;
    /**
     *
     * @type {MessageTemplate}
     * @memberof UpdateNotificationMessagesParam
     */
    'forgot_password'?: MessageTemplate;
    /**
     *
     * @type {MessageTemplate}
     * @memberof UpdateNotificationMessagesParam
     */
    'update_user_attribute'?: MessageTemplate;
    /**
     *
     * @type {MessageTemplate}
     * @memberof UpdateNotificationMessagesParam
     */
    'verify_user_attribute'?: MessageTemplate;
    /**
     *
     * @type {MessageTemplate}
     * @memberof UpdateNotificationMessagesParam
     */
    'authentication_mfa'?: MessageTemplate;
}
/**
 *
 * @export
 * @interface UpdateSaasUserEmailParam
 */
export interface UpdateSaasUserEmailParam {
    /**
     *
     * @type {string}
     * @memberof UpdateSaasUserEmailParam
     */
    'email': string;
}
/**
 *
 * @export
 * @interface UpdateSaasUserPasswordParam
 */
export interface UpdateSaasUserPasswordParam {
    /**
     *
     * @type {string}
     * @memberof UpdateSaasUserPasswordParam
     */
    'password': string;
}
/**
 *
 * @export
 * @interface UpdateSignInSettingsParam
 */
export interface UpdateSignInSettingsParam {
    /**
     *
     * @type {PasswordPolicy}
     * @memberof UpdateSignInSettingsParam
     */
    'password_policy'?: PasswordPolicy;
    /**
     *
     * @type {DeviceConfiguration}
     * @memberof UpdateSignInSettingsParam
     */
    'device_configuration'?: DeviceConfiguration;
    /**
     *
     * @type {MfaConfiguration}
     * @memberof UpdateSignInSettingsParam
     */
    'mfa_configuration'?: MfaConfiguration;
    /**
     *
     * @type {RecaptchaProps}
     * @memberof UpdateSignInSettingsParam
     */
    'recaptcha_props'?: RecaptchaProps;
    /**
     *
     * @type {AccountVerification}
     * @memberof UpdateSignInSettingsParam
     */
    'account_verification'?: AccountVerification;
    /**
     *
     * @type {SelfRegist}
     * @memberof UpdateSignInSettingsParam
     */
    'self_regist'?: SelfRegist;
}
/**
 *
 * @export
 * @interface UpdateSoftwareTokenParam
 */
export interface UpdateSoftwareTokenParam {
    /**
     * アクセストークン
     * @type {string}
     * @memberof UpdateSoftwareTokenParam
     */
    'access_token': string;
    /**
     * 検証コード
     * @type {string}
     * @memberof UpdateSoftwareTokenParam
     */
    'verification_code': string;
}
/**
 *
 * @export
 * @interface UpdateTenantUserParam
 */
export interface UpdateTenantUserParam {
    /**
     * 属性情報（SaaSus コンソールでテナント属性定義を行い設定した情報）
     * @type {{ [key: string]: any; }}
     * @memberof UpdateTenantUserParam
     */
    'attributes': {
        [key: string]: any;
    };
}
/**
 *
 * @export
 * @interface User
 */
export interface User {
    /**
     * ユーザーID
     * @type {string}
     * @memberof User
     */
    'id': string;
    /**
     *
     * @type {string}
     * @memberof User
     */
    'tenant_id': string;
    /**
     * テナント名
     * @type {string}
     * @memberof User
     */
    'tenant_name': string;
    /**
     * メールアドレス
     * @type {string}
     * @memberof User
     */
    'email': string;
    /**
     * 属性情報（SaaSus コンソールでテナント属性定義を行い設定された情報を取得します）
     * @type {{ [key: string]: any; }}
     * @memberof User
     */
    'attributes': {
        [key: string]: any;
    };
    /**
     *
     * @type {Array<UserAvailableEnv>}
     * @memberof User
     */
    'envs': Array<UserAvailableEnv>;
}
/**
 *
 * @export
 * @interface UserAttributes
 */
export interface UserAttributes {
    /**
     * ユーザー属性定義
     * @type {Array<Attribute>}
     * @memberof UserAttributes
     */
    'user_attributes': Array<Attribute>;
}
/**
 *
 * @export
 * @interface UserAvailableEnv
 */
export interface UserAvailableEnv {
    /**
     *
     * @type {number}
     * @memberof UserAvailableEnv
     */
    'id': number;
    /**
     * 環境名
     * @type {string}
     * @memberof UserAvailableEnv
     */
    'name': string;
    /**
     * 役割(ロール)情報
     * @type {Array<Role>}
     * @memberof UserAvailableEnv
     */
    'roles': Array<Role>;
}
/**
 *
 * @export
 * @interface UserAvailableTenant
 */
export interface UserAvailableTenant {
    /**
     *
     * @type {string}
     * @memberof UserAvailableTenant
     */
    'id': string;
    /**
     * テナント名
     * @type {string}
     * @memberof UserAvailableTenant
     */
    'name': string;
    /**
     *
     * @type {boolean}
     * @memberof UserAvailableTenant
     */
    'completed_sign_up': boolean;
    /**
     * 環境情報、役割(ロール)情報
     * @type {Array<UserAvailableEnv>}
     * @memberof UserAvailableTenant
     */
    'envs': Array<UserAvailableEnv>;
    /**
     *
     * @type {{ [key: string]: any; }}
     * @memberof UserAvailableTenant
     */
    'user_attribute': {
        [key: string]: any;
    };
    /**
     *
     * @type {string}
     * @memberof UserAvailableTenant
     */
    'back_office_staff_email': string;
    /**
     *
     * @type {string}
     * @memberof UserAvailableTenant
     */
    'plan_id'?: string;
}
/**
 *
 * @export
 * @interface UserInfo
 */
export interface UserInfo {
    /**
     *
     * @type {string}
     * @memberof UserInfo
     */
    'id': string;
    /**
     * メールアドレス
     * @type {string}
     * @memberof UserInfo
     */
    'email': string;
    /**
     * テナント情報
     * @type {Array<UserAvailableTenant>}
     * @memberof UserInfo
     */
    'tenants': Array<UserAvailableTenant>;
}
/**
 *
 * @export
 * @interface Users
 */
export interface Users {
    /**
     *
     * @type {Array<User>}
     * @memberof Users
     */
    'users': Array<User>;
}
/**
 * AuthInfoApi - axios parameter creator
 * @export
 */
export declare const AuthInfoApiAxiosParamCreator: (configuration?: Configuration | undefined) => {
    /**
     * ログイン後に認証情報を渡す SaaS の URL を取得します。 ここで取得した URL へ認証情報を渡し、SaaSus SDK を利用してこの Callback の実装をすることが可能となります。
     * @summary 認証情報を取得
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAuthInfo: (options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * cognitoに設定している外部プロバイダ経由のサインイン情報取得
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getIdentityProviders: (options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * ユーザーパスワードの要件設定を取得します。 アルファベット、数字、記号の組み合わせで、桁数を長くすれば解読されづらい安全なパスワードを設定することが可能となります。
     * @summary パスワード要件を取得
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getSignInSettings: (options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * ログイン後に認証情報を渡す SaaS の URL を登録します。 ここで登録した URL に認証情報を渡し、SaaSus SDK を利用してこの Callback の実装をすることが可能となります。
     * @summary 認証情報を更新
     * @param {AuthInfo} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateAuthInfo: (body?: AuthInfo | undefined, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * 外部IDプロバイダのサインイン情報更新
     * @param {UpdateIdentityProviderParam} [updateIdentityProviderParam]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateIdentityProvider: (updateIdentityProviderParam?: UpdateIdentityProviderParam | undefined, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * ユーザーパスワードの要件設定を更新します。 アルファベット、数字、記号の組み合わせで、桁数を長くすれば解読されづらい安全なパスワードを設定することが可能となります。
     * @summary パスワード要件を更新
     * @param {UpdateSignInSettingsParam} [updateSignInSettingsParam]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateSignInSettings: (updateSignInSettingsParam?: UpdateSignInSettingsParam | undefined, options?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * AuthInfoApi - functional programming interface
 * @export
 */
export declare const AuthInfoApiFp: (configuration?: Configuration | undefined) => {
    /**
     * ログイン後に認証情報を渡す SaaS の URL を取得します。 ここで取得した URL へ認証情報を渡し、SaaSus SDK を利用してこの Callback の実装をすることが可能となります。
     * @summary 認証情報を取得
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAuthInfo(options?: AxiosRequestConfig<any> | undefined): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<AuthInfo>>;
    /**
     * cognitoに設定している外部プロバイダ経由のサインイン情報取得
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getIdentityProviders(options?: AxiosRequestConfig<any> | undefined): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<IdentityProviders>>;
    /**
     * ユーザーパスワードの要件設定を取得します。 アルファベット、数字、記号の組み合わせで、桁数を長くすれば解読されづらい安全なパスワードを設定することが可能となります。
     * @summary パスワード要件を取得
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getSignInSettings(options?: AxiosRequestConfig<any> | undefined): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<SignInSettings>>;
    /**
     * ログイン後に認証情報を渡す SaaS の URL を登録します。 ここで登録した URL に認証情報を渡し、SaaSus SDK を利用してこの Callback の実装をすることが可能となります。
     * @summary 認証情報を更新
     * @param {AuthInfo} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateAuthInfo(body?: AuthInfo | undefined, options?: AxiosRequestConfig<any> | undefined): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<void>>;
    /**
     * 外部IDプロバイダのサインイン情報更新
     * @param {UpdateIdentityProviderParam} [updateIdentityProviderParam]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateIdentityProvider(updateIdentityProviderParam?: UpdateIdentityProviderParam | undefined, options?: AxiosRequestConfig<any> | undefined): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<void>>;
    /**
     * ユーザーパスワードの要件設定を更新します。 アルファベット、数字、記号の組み合わせで、桁数を長くすれば解読されづらい安全なパスワードを設定することが可能となります。
     * @summary パスワード要件を更新
     * @param {UpdateSignInSettingsParam} [updateSignInSettingsParam]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateSignInSettings(updateSignInSettingsParam?: UpdateSignInSettingsParam | undefined, options?: AxiosRequestConfig<any> | undefined): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<void>>;
};
/**
 * AuthInfoApi - factory interface
 * @export
 */
export declare const AuthInfoApiFactory: (configuration?: Configuration | undefined, basePath?: string | undefined, axios?: AxiosInstance | undefined) => {
    /**
     * ログイン後に認証情報を渡す SaaS の URL を取得します。 ここで取得した URL へ認証情報を渡し、SaaSus SDK を利用してこの Callback の実装をすることが可能となります。
     * @summary 認証情報を取得
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAuthInfo(options?: any): AxiosPromise<AuthInfo>;
    /**
     * cognitoに設定している外部プロバイダ経由のサインイン情報取得
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getIdentityProviders(options?: any): AxiosPromise<IdentityProviders>;
    /**
     * ユーザーパスワードの要件設定を取得します。 アルファベット、数字、記号の組み合わせで、桁数を長くすれば解読されづらい安全なパスワードを設定することが可能となります。
     * @summary パスワード要件を取得
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getSignInSettings(options?: any): AxiosPromise<SignInSettings>;
    /**
     * ログイン後に認証情報を渡す SaaS の URL を登録します。 ここで登録した URL に認証情報を渡し、SaaSus SDK を利用してこの Callback の実装をすることが可能となります。
     * @summary 認証情報を更新
     * @param {AuthInfo} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateAuthInfo(body?: AuthInfo | undefined, options?: any): AxiosPromise<void>;
    /**
     * 外部IDプロバイダのサインイン情報更新
     * @param {UpdateIdentityProviderParam} [updateIdentityProviderParam]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateIdentityProvider(updateIdentityProviderParam?: UpdateIdentityProviderParam | undefined, options?: any): AxiosPromise<void>;
    /**
     * ユーザーパスワードの要件設定を更新します。 アルファベット、数字、記号の組み合わせで、桁数を長くすれば解読されづらい安全なパスワードを設定することが可能となります。
     * @summary パスワード要件を更新
     * @param {UpdateSignInSettingsParam} [updateSignInSettingsParam]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateSignInSettings(updateSignInSettingsParam?: UpdateSignInSettingsParam | undefined, options?: any): AxiosPromise<void>;
};
/**
 * AuthInfoApi - object-oriented interface
 * @export
 * @class AuthInfoApi
 * @extends {BaseAPI}
 */
export declare class AuthInfoApi extends BaseAPI {
    /**
     * ログイン後に認証情報を渡す SaaS の URL を取得します。 ここで取得した URL へ認証情報を渡し、SaaSus SDK を利用してこの Callback の実装をすることが可能となります。
     * @summary 認証情報を取得
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthInfoApi
     */
    getAuthInfo(options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<AuthInfo, any>>;
    /**
     * cognitoに設定している外部プロバイダ経由のサインイン情報取得
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthInfoApi
     */
    getIdentityProviders(options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<IdentityProviders, any>>;
    /**
     * ユーザーパスワードの要件設定を取得します。 アルファベット、数字、記号の組み合わせで、桁数を長くすれば解読されづらい安全なパスワードを設定することが可能となります。
     * @summary パスワード要件を取得
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthInfoApi
     */
    getSignInSettings(options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<SignInSettings, any>>;
    /**
     * ログイン後に認証情報を渡す SaaS の URL を登録します。 ここで登録した URL に認証情報を渡し、SaaSus SDK を利用してこの Callback の実装をすることが可能となります。
     * @summary 認証情報を更新
     * @param {AuthInfo} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthInfoApi
     */
    updateAuthInfo(body?: AuthInfo, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * 外部IDプロバイダのサインイン情報更新
     * @param {UpdateIdentityProviderParam} [updateIdentityProviderParam]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthInfoApi
     */
    updateIdentityProvider(updateIdentityProviderParam?: UpdateIdentityProviderParam, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * ユーザーパスワードの要件設定を更新します。 アルファベット、数字、記号の組み合わせで、桁数を長くすれば解読されづらい安全なパスワードを設定することが可能となります。
     * @summary パスワード要件を更新
     * @param {UpdateSignInSettingsParam} [updateSignInSettingsParam]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthInfoApi
     */
    updateSignInSettings(updateSignInSettingsParam?: UpdateSignInSettingsParam, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
}
/**
 * BasicInfoApi - axios parameter creator
 * @export
 */
export declare const BasicInfoApiAxiosParamCreator: (configuration?: Configuration | undefined) => {
    /**
     * 監視対象となっている全ホストの状態を Amazon EventBridge 経由で提供するための設定をテストする為のテストイベントを送信します
     * @summary イベント連携のテスト送信
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createEventBridgeTestEvent: (options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * 監視対象となっている全ホストの状態を Amazon EventBridge 経由で提供するための設定を解除します
     * @summary イベント連携設定を削除
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteEventBridgeSettings: (options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * 各種通知メールテンプレートを取得します。
     * @summary 通知メールテンプレートを取得
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    findNotificationMessages: (options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * SaaSusID を元に設定されているドメイン名と CNAME レコードを取得します。 取得した CNAME レコードを DNS に設定することで、ログイン画面を生成します。
     * @summary 基本設定情報の取得
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getBasicInfo: (options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * 認証認可基本情報を取得します。
     * @summary 認証認可基本情報取得
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCustomizePageSettings: (options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * 認証系画面設定情報（新規登録・ログイン・パスワードリセット等）を取得します。
     * @summary 認証系画面設定情報取得
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCustomizePages: (options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * 監視対象となっている全ホストの状態をリアルタイムにAmazon EventBridge 経由で提供するための設定を取得します
     * @summary イベント連携設定を取得
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEventBridgeSettings: (options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * 監視対象となっている全ホストの状態を Amazon EventBridge 経由で提供するための設定を更新します
     * @summary イベント連携設定を更新
     * @param {EventBridgeSettings} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    saveEventBridgeSettings: (body?: EventBridgeSettings | undefined, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * SaaSus ID を元にパラメータとして設定したドメイン名を設定更新します。 CNAME レコードが生成されますので、 DNS に設定して下さい。 既に稼働中の SaaS アプリケーションに設定している場合には、動作に影響があります。
     * @summary 基本設定情報の更新
     * @param {UpdateBasicInfoParam} [updateBasicInfoParam]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateBasicInfo: (updateBasicInfoParam?: UpdateBasicInfoParam | undefined, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * 認証認可基本情報を更新します。
     * @summary 認証認可基本情報更新
     * @param {UpdateCustomizePageSettingsParam} [updateCustomizePageSettingsParam]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateCustomizePageSettings: (updateCustomizePageSettingsParam?: UpdateCustomizePageSettingsParam | undefined, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * 認証系画面設定情報（新規登録・ログイン・パスワードリセット等）を更新します。
     * @summary 認証系画面設定情報設定
     * @param {UpdateCustomizePagesParam} [updateCustomizePagesParam]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateCustomizePages: (updateCustomizePagesParam?: UpdateCustomizePagesParam | undefined, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * 各種通知メールテンプレート更新します。
     * @summary 通知メールテンプレートを更新
     * @param {UpdateNotificationMessagesParam} [updateNotificationMessagesParam]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateNotificationMessages: (updateNotificationMessagesParam?: UpdateNotificationMessagesParam | undefined, options?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * BasicInfoApi - functional programming interface
 * @export
 */
export declare const BasicInfoApiFp: (configuration?: Configuration | undefined) => {
    /**
     * 監視対象となっている全ホストの状態を Amazon EventBridge 経由で提供するための設定をテストする為のテストイベントを送信します
     * @summary イベント連携のテスト送信
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createEventBridgeTestEvent(options?: AxiosRequestConfig<any> | undefined): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<void>>;
    /**
     * 監視対象となっている全ホストの状態を Amazon EventBridge 経由で提供するための設定を解除します
     * @summary イベント連携設定を削除
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteEventBridgeSettings(options?: AxiosRequestConfig<any> | undefined): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<void>>;
    /**
     * 各種通知メールテンプレートを取得します。
     * @summary 通知メールテンプレートを取得
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    findNotificationMessages(options?: AxiosRequestConfig<any> | undefined): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<NotificationMessages>>;
    /**
     * SaaSusID を元に設定されているドメイン名と CNAME レコードを取得します。 取得した CNAME レコードを DNS に設定することで、ログイン画面を生成します。
     * @summary 基本設定情報の取得
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getBasicInfo(options?: AxiosRequestConfig<any> | undefined): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<BasicInfo>>;
    /**
     * 認証認可基本情報を取得します。
     * @summary 認証認可基本情報取得
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCustomizePageSettings(options?: AxiosRequestConfig<any> | undefined): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<CustomizePageSettings>>;
    /**
     * 認証系画面設定情報（新規登録・ログイン・パスワードリセット等）を取得します。
     * @summary 認証系画面設定情報取得
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCustomizePages(options?: AxiosRequestConfig<any> | undefined): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<CustomizePages>>;
    /**
     * 監視対象となっている全ホストの状態をリアルタイムにAmazon EventBridge 経由で提供するための設定を取得します
     * @summary イベント連携設定を取得
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEventBridgeSettings(options?: AxiosRequestConfig<any> | undefined): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<EventBridgeSettings>>;
    /**
     * 監視対象となっている全ホストの状態を Amazon EventBridge 経由で提供するための設定を更新します
     * @summary イベント連携設定を更新
     * @param {EventBridgeSettings} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    saveEventBridgeSettings(body?: EventBridgeSettings | undefined, options?: AxiosRequestConfig<any> | undefined): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<void>>;
    /**
     * SaaSus ID を元にパラメータとして設定したドメイン名を設定更新します。 CNAME レコードが生成されますので、 DNS に設定して下さい。 既に稼働中の SaaS アプリケーションに設定している場合には、動作に影響があります。
     * @summary 基本設定情報の更新
     * @param {UpdateBasicInfoParam} [updateBasicInfoParam]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateBasicInfo(updateBasicInfoParam?: UpdateBasicInfoParam | undefined, options?: AxiosRequestConfig<any> | undefined): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<void>>;
    /**
     * 認証認可基本情報を更新します。
     * @summary 認証認可基本情報更新
     * @param {UpdateCustomizePageSettingsParam} [updateCustomizePageSettingsParam]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateCustomizePageSettings(updateCustomizePageSettingsParam?: UpdateCustomizePageSettingsParam | undefined, options?: AxiosRequestConfig<any> | undefined): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<void>>;
    /**
     * 認証系画面設定情報（新規登録・ログイン・パスワードリセット等）を更新します。
     * @summary 認証系画面設定情報設定
     * @param {UpdateCustomizePagesParam} [updateCustomizePagesParam]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateCustomizePages(updateCustomizePagesParam?: UpdateCustomizePagesParam | undefined, options?: AxiosRequestConfig<any> | undefined): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<void>>;
    /**
     * 各種通知メールテンプレート更新します。
     * @summary 通知メールテンプレートを更新
     * @param {UpdateNotificationMessagesParam} [updateNotificationMessagesParam]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateNotificationMessages(updateNotificationMessagesParam?: UpdateNotificationMessagesParam | undefined, options?: AxiosRequestConfig<any> | undefined): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<void>>;
};
/**
 * BasicInfoApi - factory interface
 * @export
 */
export declare const BasicInfoApiFactory: (configuration?: Configuration | undefined, basePath?: string | undefined, axios?: AxiosInstance | undefined) => {
    /**
     * 監視対象となっている全ホストの状態を Amazon EventBridge 経由で提供するための設定をテストする為のテストイベントを送信します
     * @summary イベント連携のテスト送信
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createEventBridgeTestEvent(options?: any): AxiosPromise<void>;
    /**
     * 監視対象となっている全ホストの状態を Amazon EventBridge 経由で提供するための設定を解除します
     * @summary イベント連携設定を削除
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteEventBridgeSettings(options?: any): AxiosPromise<void>;
    /**
     * 各種通知メールテンプレートを取得します。
     * @summary 通知メールテンプレートを取得
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    findNotificationMessages(options?: any): AxiosPromise<NotificationMessages>;
    /**
     * SaaSusID を元に設定されているドメイン名と CNAME レコードを取得します。 取得した CNAME レコードを DNS に設定することで、ログイン画面を生成します。
     * @summary 基本設定情報の取得
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getBasicInfo(options?: any): AxiosPromise<BasicInfo>;
    /**
     * 認証認可基本情報を取得します。
     * @summary 認証認可基本情報取得
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCustomizePageSettings(options?: any): AxiosPromise<CustomizePageSettings>;
    /**
     * 認証系画面設定情報（新規登録・ログイン・パスワードリセット等）を取得します。
     * @summary 認証系画面設定情報取得
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCustomizePages(options?: any): AxiosPromise<CustomizePages>;
    /**
     * 監視対象となっている全ホストの状態をリアルタイムにAmazon EventBridge 経由で提供するための設定を取得します
     * @summary イベント連携設定を取得
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEventBridgeSettings(options?: any): AxiosPromise<EventBridgeSettings>;
    /**
     * 監視対象となっている全ホストの状態を Amazon EventBridge 経由で提供するための設定を更新します
     * @summary イベント連携設定を更新
     * @param {EventBridgeSettings} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    saveEventBridgeSettings(body?: EventBridgeSettings | undefined, options?: any): AxiosPromise<void>;
    /**
     * SaaSus ID を元にパラメータとして設定したドメイン名を設定更新します。 CNAME レコードが生成されますので、 DNS に設定して下さい。 既に稼働中の SaaS アプリケーションに設定している場合には、動作に影響があります。
     * @summary 基本設定情報の更新
     * @param {UpdateBasicInfoParam} [updateBasicInfoParam]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateBasicInfo(updateBasicInfoParam?: UpdateBasicInfoParam | undefined, options?: any): AxiosPromise<void>;
    /**
     * 認証認可基本情報を更新します。
     * @summary 認証認可基本情報更新
     * @param {UpdateCustomizePageSettingsParam} [updateCustomizePageSettingsParam]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateCustomizePageSettings(updateCustomizePageSettingsParam?: UpdateCustomizePageSettingsParam | undefined, options?: any): AxiosPromise<void>;
    /**
     * 認証系画面設定情報（新規登録・ログイン・パスワードリセット等）を更新します。
     * @summary 認証系画面設定情報設定
     * @param {UpdateCustomizePagesParam} [updateCustomizePagesParam]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateCustomizePages(updateCustomizePagesParam?: UpdateCustomizePagesParam | undefined, options?: any): AxiosPromise<void>;
    /**
     * 各種通知メールテンプレート更新します。
     * @summary 通知メールテンプレートを更新
     * @param {UpdateNotificationMessagesParam} [updateNotificationMessagesParam]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateNotificationMessages(updateNotificationMessagesParam?: UpdateNotificationMessagesParam | undefined, options?: any): AxiosPromise<void>;
};
/**
 * BasicInfoApi - object-oriented interface
 * @export
 * @class BasicInfoApi
 * @extends {BaseAPI}
 */
export declare class BasicInfoApi extends BaseAPI {
    /**
     * 監視対象となっている全ホストの状態を Amazon EventBridge 経由で提供するための設定をテストする為のテストイベントを送信します
     * @summary イベント連携のテスト送信
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BasicInfoApi
     */
    createEventBridgeTestEvent(options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * 監視対象となっている全ホストの状態を Amazon EventBridge 経由で提供するための設定を解除します
     * @summary イベント連携設定を削除
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BasicInfoApi
     */
    deleteEventBridgeSettings(options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * 各種通知メールテンプレートを取得します。
     * @summary 通知メールテンプレートを取得
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BasicInfoApi
     */
    findNotificationMessages(options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<NotificationMessages, any>>;
    /**
     * SaaSusID を元に設定されているドメイン名と CNAME レコードを取得します。 取得した CNAME レコードを DNS に設定することで、ログイン画面を生成します。
     * @summary 基本設定情報の取得
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BasicInfoApi
     */
    getBasicInfo(options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<BasicInfo, any>>;
    /**
     * 認証認可基本情報を取得します。
     * @summary 認証認可基本情報取得
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BasicInfoApi
     */
    getCustomizePageSettings(options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<CustomizePageSettings, any>>;
    /**
     * 認証系画面設定情報（新規登録・ログイン・パスワードリセット等）を取得します。
     * @summary 認証系画面設定情報取得
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BasicInfoApi
     */
    getCustomizePages(options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<CustomizePages, any>>;
    /**
     * 監視対象となっている全ホストの状態をリアルタイムにAmazon EventBridge 経由で提供するための設定を取得します
     * @summary イベント連携設定を取得
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BasicInfoApi
     */
    getEventBridgeSettings(options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<EventBridgeSettings, any>>;
    /**
     * 監視対象となっている全ホストの状態を Amazon EventBridge 経由で提供するための設定を更新します
     * @summary イベント連携設定を更新
     * @param {EventBridgeSettings} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BasicInfoApi
     */
    saveEventBridgeSettings(body?: EventBridgeSettings, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * SaaSus ID を元にパラメータとして設定したドメイン名を設定更新します。 CNAME レコードが生成されますので、 DNS に設定して下さい。 既に稼働中の SaaS アプリケーションに設定している場合には、動作に影響があります。
     * @summary 基本設定情報の更新
     * @param {UpdateBasicInfoParam} [updateBasicInfoParam]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BasicInfoApi
     */
    updateBasicInfo(updateBasicInfoParam?: UpdateBasicInfoParam, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * 認証認可基本情報を更新します。
     * @summary 認証認可基本情報更新
     * @param {UpdateCustomizePageSettingsParam} [updateCustomizePageSettingsParam]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BasicInfoApi
     */
    updateCustomizePageSettings(updateCustomizePageSettingsParam?: UpdateCustomizePageSettingsParam, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * 認証系画面設定情報（新規登録・ログイン・パスワードリセット等）を更新します。
     * @summary 認証系画面設定情報設定
     * @param {UpdateCustomizePagesParam} [updateCustomizePagesParam]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BasicInfoApi
     */
    updateCustomizePages(updateCustomizePagesParam?: UpdateCustomizePagesParam, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * 各種通知メールテンプレート更新します。
     * @summary 通知メールテンプレートを更新
     * @param {UpdateNotificationMessagesParam} [updateNotificationMessagesParam]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BasicInfoApi
     */
    updateNotificationMessages(updateNotificationMessagesParam?: UpdateNotificationMessagesParam, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
}
/**
 * CredentialApi - axios parameter creator
 * @export
 */
export declare const CredentialApiAxiosParamCreator: (configuration?: Configuration | undefined) => {
    /**
     * 引数のIDトークン・アクセストークン・リフレッシュトークンを一時保存し取得用の一時コードを返却する。 一時コードの有効期間は発行から10秒です。
     * @summary 認証・認可情報の保存
     * @param {Credentials} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createAuthCredentials: (body?: Credentials | undefined, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * 一時コードを利用してIDトークン・アクセストークン・リフレッシュトークンを取得する。
     * @summary 認証・認可情報の取得
     * @param {string} code 一時コード
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAuthCredentials: (code: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * CredentialApi - functional programming interface
 * @export
 */
export declare const CredentialApiFp: (configuration?: Configuration | undefined) => {
    /**
     * 引数のIDトークン・アクセストークン・リフレッシュトークンを一時保存し取得用の一時コードを返却する。 一時コードの有効期間は発行から10秒です。
     * @summary 認証・認可情報の保存
     * @param {Credentials} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createAuthCredentials(body?: Credentials | undefined, options?: AxiosRequestConfig<any> | undefined): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<AuthorizationTempCode>>;
    /**
     * 一時コードを利用してIDトークン・アクセストークン・リフレッシュトークンを取得する。
     * @summary 認証・認可情報の取得
     * @param {string} code 一時コード
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAuthCredentials(code: string, options?: AxiosRequestConfig<any> | undefined): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<Credentials>>;
};
/**
 * CredentialApi - factory interface
 * @export
 */
export declare const CredentialApiFactory: (configuration?: Configuration | undefined, basePath?: string | undefined, axios?: AxiosInstance | undefined) => {
    /**
     * 引数のIDトークン・アクセストークン・リフレッシュトークンを一時保存し取得用の一時コードを返却する。 一時コードの有効期間は発行から10秒です。
     * @summary 認証・認可情報の保存
     * @param {Credentials} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createAuthCredentials(body?: Credentials | undefined, options?: any): AxiosPromise<AuthorizationTempCode>;
    /**
     * 一時コードを利用してIDトークン・アクセストークン・リフレッシュトークンを取得する。
     * @summary 認証・認可情報の取得
     * @param {string} code 一時コード
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAuthCredentials(code: string, options?: any): AxiosPromise<Credentials>;
};
/**
 * CredentialApi - object-oriented interface
 * @export
 * @class CredentialApi
 * @extends {BaseAPI}
 */
export declare class CredentialApi extends BaseAPI {
    /**
     * 引数のIDトークン・アクセストークン・リフレッシュトークンを一時保存し取得用の一時コードを返却する。 一時コードの有効期間は発行から10秒です。
     * @summary 認証・認可情報の保存
     * @param {Credentials} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CredentialApi
     */
    createAuthCredentials(body?: Credentials, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<AuthorizationTempCode, any>>;
    /**
     * 一時コードを利用してIDトークン・アクセストークン・リフレッシュトークンを取得する。
     * @summary 認証・認可情報の取得
     * @param {string} code 一時コード
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CredentialApi
     */
    getAuthCredentials(code: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<Credentials, any>>;
}
/**
 * EnvApi - axios parameter creator
 * @export
 */
export declare const EnvApiAxiosParamCreator: (configuration?: Configuration | undefined) => {
    /**
     * 連携のテストや開発用環境や実際の運用で利用する環境など複数の環境を定義することができるようになっており、 環境情報を作成します。
     * @summary 環境情報を作成
     * @param {Env} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createEnv: (body?: Env | undefined, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * 環境情報を削除します。
     * @summary 環境情報を削除
     * @param {number} envId 環境ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteEnv: (envId: number, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * 環境情報の詳細を取得します。
     * @summary 環境情報の取得
     * @param {number} envId 環境ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEnv: (envId: number, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * 連携のテストや開発用環境や実際の運用で利用する環境など複数の環境を定義することができるようになっており、 登録されている環境情報を取得します。
     * @summary 環境情報一覧を取得
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEnvs: (options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * 環境情報を更新します。
     * @summary 環境情報を更新
     * @param {number} envId 環境ID
     * @param {UpdateEnvParam} [updateEnvParam]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateEnv: (envId: number, updateEnvParam?: UpdateEnvParam | undefined, options?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * EnvApi - functional programming interface
 * @export
 */
export declare const EnvApiFp: (configuration?: Configuration | undefined) => {
    /**
     * 連携のテストや開発用環境や実際の運用で利用する環境など複数の環境を定義することができるようになっており、 環境情報を作成します。
     * @summary 環境情報を作成
     * @param {Env} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createEnv(body?: Env | undefined, options?: AxiosRequestConfig<any> | undefined): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<Env>>;
    /**
     * 環境情報を削除します。
     * @summary 環境情報を削除
     * @param {number} envId 環境ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteEnv(envId: number, options?: AxiosRequestConfig<any> | undefined): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<void>>;
    /**
     * 環境情報の詳細を取得します。
     * @summary 環境情報の取得
     * @param {number} envId 環境ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEnv(envId: number, options?: AxiosRequestConfig<any> | undefined): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<Env>>;
    /**
     * 連携のテストや開発用環境や実際の運用で利用する環境など複数の環境を定義することができるようになっており、 登録されている環境情報を取得します。
     * @summary 環境情報一覧を取得
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEnvs(options?: AxiosRequestConfig<any> | undefined): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<Envs>>;
    /**
     * 環境情報を更新します。
     * @summary 環境情報を更新
     * @param {number} envId 環境ID
     * @param {UpdateEnvParam} [updateEnvParam]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateEnv(envId: number, updateEnvParam?: UpdateEnvParam | undefined, options?: AxiosRequestConfig<any> | undefined): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<void>>;
};
/**
 * EnvApi - factory interface
 * @export
 */
export declare const EnvApiFactory: (configuration?: Configuration | undefined, basePath?: string | undefined, axios?: AxiosInstance | undefined) => {
    /**
     * 連携のテストや開発用環境や実際の運用で利用する環境など複数の環境を定義することができるようになっており、 環境情報を作成します。
     * @summary 環境情報を作成
     * @param {Env} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createEnv(body?: Env | undefined, options?: any): AxiosPromise<Env>;
    /**
     * 環境情報を削除します。
     * @summary 環境情報を削除
     * @param {number} envId 環境ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteEnv(envId: number, options?: any): AxiosPromise<void>;
    /**
     * 環境情報の詳細を取得します。
     * @summary 環境情報の取得
     * @param {number} envId 環境ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEnv(envId: number, options?: any): AxiosPromise<Env>;
    /**
     * 連携のテストや開発用環境や実際の運用で利用する環境など複数の環境を定義することができるようになっており、 登録されている環境情報を取得します。
     * @summary 環境情報一覧を取得
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEnvs(options?: any): AxiosPromise<Envs>;
    /**
     * 環境情報を更新します。
     * @summary 環境情報を更新
     * @param {number} envId 環境ID
     * @param {UpdateEnvParam} [updateEnvParam]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateEnv(envId: number, updateEnvParam?: UpdateEnvParam | undefined, options?: any): AxiosPromise<void>;
};
/**
 * EnvApi - object-oriented interface
 * @export
 * @class EnvApi
 * @extends {BaseAPI}
 */
export declare class EnvApi extends BaseAPI {
    /**
     * 連携のテストや開発用環境や実際の運用で利用する環境など複数の環境を定義することができるようになっており、 環境情報を作成します。
     * @summary 環境情報を作成
     * @param {Env} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EnvApi
     */
    createEnv(body?: Env, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<Env, any>>;
    /**
     * 環境情報を削除します。
     * @summary 環境情報を削除
     * @param {number} envId 環境ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EnvApi
     */
    deleteEnv(envId: number, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * 環境情報の詳細を取得します。
     * @summary 環境情報の取得
     * @param {number} envId 環境ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EnvApi
     */
    getEnv(envId: number, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<Env, any>>;
    /**
     * 連携のテストや開発用環境や実際の運用で利用する環境など複数の環境を定義することができるようになっており、 登録されている環境情報を取得します。
     * @summary 環境情報一覧を取得
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EnvApi
     */
    getEnvs(options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<Envs, any>>;
    /**
     * 環境情報を更新します。
     * @summary 環境情報を更新
     * @param {number} envId 環境ID
     * @param {UpdateEnvParam} [updateEnvParam]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EnvApi
     */
    updateEnv(envId: number, updateEnvParam?: UpdateEnvParam, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
}
/**
 * RoleApi - axios parameter creator
 * @export
 */
export declare const RoleApiAxiosParamCreator: (configuration?: Configuration | undefined) => {
    /**
     * 役割(ロール)を作成します。 ここで作成した役割をユーザーに付与することによって、SaaS側で役割ベースの認可を実装することが用意になります。 また、同じユーザーでも、属するテナント・環境ごとに持っている役割を変えることが可能です。
     * @summary 役割(ロール)を作成
     * @param {Role} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createRole: (body?: Role | undefined, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * 役割(ロール)を削除します。
     * @summary 役割(ロール)を削除
     * @param {string} roleName 役割(ロール)名
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteRole: (roleName: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * 登録されている役割(ロール)を一覧として取得します。 ここで定義した役割をユーザーに付与することによって、SaaS側で役割ベースの認可を実装することが用意になります。 また、同じユーザーでも、属するテナント・環境ごとに持っている役割を変えることが可能です。
     * @summary 役割(ロール)一覧を取得
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getRoles: (options?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * RoleApi - functional programming interface
 * @export
 */
export declare const RoleApiFp: (configuration?: Configuration | undefined) => {
    /**
     * 役割(ロール)を作成します。 ここで作成した役割をユーザーに付与することによって、SaaS側で役割ベースの認可を実装することが用意になります。 また、同じユーザーでも、属するテナント・環境ごとに持っている役割を変えることが可能です。
     * @summary 役割(ロール)を作成
     * @param {Role} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createRole(body?: Role | undefined, options?: AxiosRequestConfig<any> | undefined): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<Role>>;
    /**
     * 役割(ロール)を削除します。
     * @summary 役割(ロール)を削除
     * @param {string} roleName 役割(ロール)名
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteRole(roleName: string, options?: AxiosRequestConfig<any> | undefined): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<void>>;
    /**
     * 登録されている役割(ロール)を一覧として取得します。 ここで定義した役割をユーザーに付与することによって、SaaS側で役割ベースの認可を実装することが用意になります。 また、同じユーザーでも、属するテナント・環境ごとに持っている役割を変えることが可能です。
     * @summary 役割(ロール)一覧を取得
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getRoles(options?: AxiosRequestConfig<any> | undefined): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<Roles>>;
};
/**
 * RoleApi - factory interface
 * @export
 */
export declare const RoleApiFactory: (configuration?: Configuration | undefined, basePath?: string | undefined, axios?: AxiosInstance | undefined) => {
    /**
     * 役割(ロール)を作成します。 ここで作成した役割をユーザーに付与することによって、SaaS側で役割ベースの認可を実装することが用意になります。 また、同じユーザーでも、属するテナント・環境ごとに持っている役割を変えることが可能です。
     * @summary 役割(ロール)を作成
     * @param {Role} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createRole(body?: Role | undefined, options?: any): AxiosPromise<Role>;
    /**
     * 役割(ロール)を削除します。
     * @summary 役割(ロール)を削除
     * @param {string} roleName 役割(ロール)名
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteRole(roleName: string, options?: any): AxiosPromise<void>;
    /**
     * 登録されている役割(ロール)を一覧として取得します。 ここで定義した役割をユーザーに付与することによって、SaaS側で役割ベースの認可を実装することが用意になります。 また、同じユーザーでも、属するテナント・環境ごとに持っている役割を変えることが可能です。
     * @summary 役割(ロール)一覧を取得
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getRoles(options?: any): AxiosPromise<Roles>;
};
/**
 * RoleApi - object-oriented interface
 * @export
 * @class RoleApi
 * @extends {BaseAPI}
 */
export declare class RoleApi extends BaseAPI {
    /**
     * 役割(ロール)を作成します。 ここで作成した役割をユーザーに付与することによって、SaaS側で役割ベースの認可を実装することが用意になります。 また、同じユーザーでも、属するテナント・環境ごとに持っている役割を変えることが可能です。
     * @summary 役割(ロール)を作成
     * @param {Role} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RoleApi
     */
    createRole(body?: Role, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<Role, any>>;
    /**
     * 役割(ロール)を削除します。
     * @summary 役割(ロール)を削除
     * @param {string} roleName 役割(ロール)名
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RoleApi
     */
    deleteRole(roleName: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * 登録されている役割(ロール)を一覧として取得します。 ここで定義した役割をユーザーに付与することによって、SaaS側で役割ベースの認可を実装することが用意になります。 また、同じユーザーでも、属するテナント・環境ごとに持っている役割を変えることが可能です。
     * @summary 役割(ロール)一覧を取得
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RoleApi
     */
    getRoles(options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<Roles, any>>;
}
/**
 * SaasUserApi - axios parameter creator
 * @export
 */
export declare const SaasUserApiAxiosParamCreator: (configuration?: Configuration | undefined) => {
    /**
     * SaaSにユーザーを作成します。
     * @summary SaaSにユーザーを作成
     * @param {CreateSaasUserParam} [createSaasUserParam]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createSaaSUser: (createSaasUserParam?: CreateSaasUserParam | undefined, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * 認証アプリケーション登録用のシークレットコードを作成します。
     * @summary 認証アプリケーション登録用のシークレットコードを作成
     * @param {string} userId ユーザーID
     * @param {CreateSecretCodeParam} [createSecretCodeParam]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createSecretCode: (userId: string, createSecretCodeParam?: CreateSecretCodeParam | undefined, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * ユーザーIDを元に一致するユーザーをテナントからすべて削除し、SaaSからも削除します。
     * @summary ユーザー情報を削除
     * @param {string} userId ユーザーID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteSaaSUser: (userId: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * ユーザーIDからユーザー情報を取得します。
     * @summary ユーザー情報を取得
     * @param {string} userId ユーザーID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getSaaSUser: (userId: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * SaaSのユーザー全件を取得します。
     * @summary ユーザー一覧を取得
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getSaaSUsers: (options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * ユーザーのMFA設定を取得します。
     * @summary ユーザーのMFA設定を取得
     * @param {string} userId ユーザーID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUserMfaPreference: (userId: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * ユーザーのメールアドレスを変更します。
     * @summary メールアドレスを変更
     * @param {string} userId ユーザーID
     * @param {UpdateSaasUserEmailParam} [updateSaasUserEmailParam]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateSaasUserEmail: (userId: string, updateSaasUserEmailParam?: UpdateSaasUserEmailParam | undefined, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * ユーザーのログインパスワードを変更します。
     * @summary パスワードを変更
     * @param {string} userId ユーザーID
     * @param {UpdateSaasUserPasswordParam} [updateSaasUserPasswordParam]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateSaasUserPassword: (userId: string, updateSaasUserPasswordParam?: UpdateSaasUserPasswordParam | undefined, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * 認証アプリケーションを登録します。
     * @summary 認証アプリケーションを登録
     * @param {string} userId ユーザーID
     * @param {UpdateSoftwareTokenParam} [updateSoftwareTokenParam]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateSoftwareToken: (userId: string, updateSoftwareTokenParam?: UpdateSoftwareTokenParam | undefined, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * ユーザーのMFA設定を更新します。
     * @summary ユーザーのMFA設定を更新
     * @param {string} userId ユーザーID
     * @param {MfaPreference} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateUserMfaPreference: (userId: string, body?: MfaPreference | undefined, options?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * SaasUserApi - functional programming interface
 * @export
 */
export declare const SaasUserApiFp: (configuration?: Configuration | undefined) => {
    /**
     * SaaSにユーザーを作成します。
     * @summary SaaSにユーザーを作成
     * @param {CreateSaasUserParam} [createSaasUserParam]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createSaaSUser(createSaasUserParam?: CreateSaasUserParam | undefined, options?: AxiosRequestConfig<any> | undefined): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<SaasUser>>;
    /**
     * 認証アプリケーション登録用のシークレットコードを作成します。
     * @summary 認証アプリケーション登録用のシークレットコードを作成
     * @param {string} userId ユーザーID
     * @param {CreateSecretCodeParam} [createSecretCodeParam]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createSecretCode(userId: string, createSecretCodeParam?: CreateSecretCodeParam | undefined, options?: AxiosRequestConfig<any> | undefined): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<SoftwareTokenSecretCode>>;
    /**
     * ユーザーIDを元に一致するユーザーをテナントからすべて削除し、SaaSからも削除します。
     * @summary ユーザー情報を削除
     * @param {string} userId ユーザーID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteSaaSUser(userId: string, options?: AxiosRequestConfig<any> | undefined): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<void>>;
    /**
     * ユーザーIDからユーザー情報を取得します。
     * @summary ユーザー情報を取得
     * @param {string} userId ユーザーID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getSaaSUser(userId: string, options?: AxiosRequestConfig<any> | undefined): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<SaasUser>>;
    /**
     * SaaSのユーザー全件を取得します。
     * @summary ユーザー一覧を取得
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getSaaSUsers(options?: AxiosRequestConfig<any> | undefined): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<SaasUsers>>;
    /**
     * ユーザーのMFA設定を取得します。
     * @summary ユーザーのMFA設定を取得
     * @param {string} userId ユーザーID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUserMfaPreference(userId: string, options?: AxiosRequestConfig<any> | undefined): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<MfaPreference>>;
    /**
     * ユーザーのメールアドレスを変更します。
     * @summary メールアドレスを変更
     * @param {string} userId ユーザーID
     * @param {UpdateSaasUserEmailParam} [updateSaasUserEmailParam]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateSaasUserEmail(userId: string, updateSaasUserEmailParam?: UpdateSaasUserEmailParam | undefined, options?: AxiosRequestConfig<any> | undefined): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<void>>;
    /**
     * ユーザーのログインパスワードを変更します。
     * @summary パスワードを変更
     * @param {string} userId ユーザーID
     * @param {UpdateSaasUserPasswordParam} [updateSaasUserPasswordParam]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateSaasUserPassword(userId: string, updateSaasUserPasswordParam?: UpdateSaasUserPasswordParam | undefined, options?: AxiosRequestConfig<any> | undefined): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<void>>;
    /**
     * 認証アプリケーションを登録します。
     * @summary 認証アプリケーションを登録
     * @param {string} userId ユーザーID
     * @param {UpdateSoftwareTokenParam} [updateSoftwareTokenParam]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateSoftwareToken(userId: string, updateSoftwareTokenParam?: UpdateSoftwareTokenParam | undefined, options?: AxiosRequestConfig<any> | undefined): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<void>>;
    /**
     * ユーザーのMFA設定を更新します。
     * @summary ユーザーのMFA設定を更新
     * @param {string} userId ユーザーID
     * @param {MfaPreference} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateUserMfaPreference(userId: string, body?: MfaPreference | undefined, options?: AxiosRequestConfig<any> | undefined): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<void>>;
};
/**
 * SaasUserApi - factory interface
 * @export
 */
export declare const SaasUserApiFactory: (configuration?: Configuration | undefined, basePath?: string | undefined, axios?: AxiosInstance | undefined) => {
    /**
     * SaaSにユーザーを作成します。
     * @summary SaaSにユーザーを作成
     * @param {CreateSaasUserParam} [createSaasUserParam]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createSaaSUser(createSaasUserParam?: CreateSaasUserParam | undefined, options?: any): AxiosPromise<SaasUser>;
    /**
     * 認証アプリケーション登録用のシークレットコードを作成します。
     * @summary 認証アプリケーション登録用のシークレットコードを作成
     * @param {string} userId ユーザーID
     * @param {CreateSecretCodeParam} [createSecretCodeParam]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createSecretCode(userId: string, createSecretCodeParam?: CreateSecretCodeParam | undefined, options?: any): AxiosPromise<SoftwareTokenSecretCode>;
    /**
     * ユーザーIDを元に一致するユーザーをテナントからすべて削除し、SaaSからも削除します。
     * @summary ユーザー情報を削除
     * @param {string} userId ユーザーID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteSaaSUser(userId: string, options?: any): AxiosPromise<void>;
    /**
     * ユーザーIDからユーザー情報を取得します。
     * @summary ユーザー情報を取得
     * @param {string} userId ユーザーID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getSaaSUser(userId: string, options?: any): AxiosPromise<SaasUser>;
    /**
     * SaaSのユーザー全件を取得します。
     * @summary ユーザー一覧を取得
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getSaaSUsers(options?: any): AxiosPromise<SaasUsers>;
    /**
     * ユーザーのMFA設定を取得します。
     * @summary ユーザーのMFA設定を取得
     * @param {string} userId ユーザーID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUserMfaPreference(userId: string, options?: any): AxiosPromise<MfaPreference>;
    /**
     * ユーザーのメールアドレスを変更します。
     * @summary メールアドレスを変更
     * @param {string} userId ユーザーID
     * @param {UpdateSaasUserEmailParam} [updateSaasUserEmailParam]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateSaasUserEmail(userId: string, updateSaasUserEmailParam?: UpdateSaasUserEmailParam | undefined, options?: any): AxiosPromise<void>;
    /**
     * ユーザーのログインパスワードを変更します。
     * @summary パスワードを変更
     * @param {string} userId ユーザーID
     * @param {UpdateSaasUserPasswordParam} [updateSaasUserPasswordParam]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateSaasUserPassword(userId: string, updateSaasUserPasswordParam?: UpdateSaasUserPasswordParam | undefined, options?: any): AxiosPromise<void>;
    /**
     * 認証アプリケーションを登録します。
     * @summary 認証アプリケーションを登録
     * @param {string} userId ユーザーID
     * @param {UpdateSoftwareTokenParam} [updateSoftwareTokenParam]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateSoftwareToken(userId: string, updateSoftwareTokenParam?: UpdateSoftwareTokenParam | undefined, options?: any): AxiosPromise<void>;
    /**
     * ユーザーのMFA設定を更新します。
     * @summary ユーザーのMFA設定を更新
     * @param {string} userId ユーザーID
     * @param {MfaPreference} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateUserMfaPreference(userId: string, body?: MfaPreference | undefined, options?: any): AxiosPromise<void>;
};
/**
 * SaasUserApi - object-oriented interface
 * @export
 * @class SaasUserApi
 * @extends {BaseAPI}
 */
export declare class SaasUserApi extends BaseAPI {
    /**
     * SaaSにユーザーを作成します。
     * @summary SaaSにユーザーを作成
     * @param {CreateSaasUserParam} [createSaasUserParam]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SaasUserApi
     */
    createSaaSUser(createSaasUserParam?: CreateSaasUserParam, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<SaasUser, any>>;
    /**
     * 認証アプリケーション登録用のシークレットコードを作成します。
     * @summary 認証アプリケーション登録用のシークレットコードを作成
     * @param {string} userId ユーザーID
     * @param {CreateSecretCodeParam} [createSecretCodeParam]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SaasUserApi
     */
    createSecretCode(userId: string, createSecretCodeParam?: CreateSecretCodeParam, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<SoftwareTokenSecretCode, any>>;
    /**
     * ユーザーIDを元に一致するユーザーをテナントからすべて削除し、SaaSからも削除します。
     * @summary ユーザー情報を削除
     * @param {string} userId ユーザーID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SaasUserApi
     */
    deleteSaaSUser(userId: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * ユーザーIDからユーザー情報を取得します。
     * @summary ユーザー情報を取得
     * @param {string} userId ユーザーID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SaasUserApi
     */
    getSaaSUser(userId: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<SaasUser, any>>;
    /**
     * SaaSのユーザー全件を取得します。
     * @summary ユーザー一覧を取得
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SaasUserApi
     */
    getSaaSUsers(options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<SaasUsers, any>>;
    /**
     * ユーザーのMFA設定を取得します。
     * @summary ユーザーのMFA設定を取得
     * @param {string} userId ユーザーID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SaasUserApi
     */
    getUserMfaPreference(userId: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<MfaPreference, any>>;
    /**
     * ユーザーのメールアドレスを変更します。
     * @summary メールアドレスを変更
     * @param {string} userId ユーザーID
     * @param {UpdateSaasUserEmailParam} [updateSaasUserEmailParam]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SaasUserApi
     */
    updateSaasUserEmail(userId: string, updateSaasUserEmailParam?: UpdateSaasUserEmailParam, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * ユーザーのログインパスワードを変更します。
     * @summary パスワードを変更
     * @param {string} userId ユーザーID
     * @param {UpdateSaasUserPasswordParam} [updateSaasUserPasswordParam]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SaasUserApi
     */
    updateSaasUserPassword(userId: string, updateSaasUserPasswordParam?: UpdateSaasUserPasswordParam, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * 認証アプリケーションを登録します。
     * @summary 認証アプリケーションを登録
     * @param {string} userId ユーザーID
     * @param {UpdateSoftwareTokenParam} [updateSoftwareTokenParam]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SaasUserApi
     */
    updateSoftwareToken(userId: string, updateSoftwareTokenParam?: UpdateSoftwareTokenParam, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * ユーザーのMFA設定を更新します。
     * @summary ユーザーのMFA設定を更新
     * @param {string} userId ユーザーID
     * @param {MfaPreference} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SaasUserApi
     */
    updateUserMfaPreference(userId: string, body?: MfaPreference, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
}
/**
 * SaasusTenantApi - axios parameter creator
 * @export
 */
export declare const SaasusTenantApiAxiosParamCreator: (configuration?: Configuration | undefined) => {
    /**
     * サーバサイド用に API キーを発行します。最大 2 つまで発行できます。
     * @summary APIキーを作成
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createApiKey: (options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * サーバサイド用の API キーを削除します。
     * @summary APIキーを削除
     * @param {string} apiKey APIキー
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteApiKey: (apiKey: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * サーバサイド用に API キーを取得します。最大 2 つまで発行できます。
     * @summary APIキー一覧を取得
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getApiKeys: (options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * クライアントへのすべての API リクエストでアプリが使用する固定文字列を取得します。
     * @summary クライアントシークレットを取得
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getClientSecret: (options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * テナントのSaasIDを取得します。 SaaSus API および SaaSus SDK にて利用します。
     * @summary SaasIDを取得
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getSaasID: (options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * クライアントへのすべての API リクエストでアプリが使用する固定文字列を再発行します。 既に稼働中のSaaSアプリケーションに設定している場合には、動作に影響があります。
     * @summary クライアントシークレットを更新
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateClientSecret: (options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * テナントのSaasIDを更新します。 SaaSus API および SaaSus SDK にて利用します。 既に稼働中の SaaS アプリケーションに設定している場合には、動作に影響があります。
     * @summary SaasIDを更新
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateSaasID: (options?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * SaasusTenantApi - functional programming interface
 * @export
 */
export declare const SaasusTenantApiFp: (configuration?: Configuration | undefined) => {
    /**
     * サーバサイド用に API キーを発行します。最大 2 つまで発行できます。
     * @summary APIキーを作成
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createApiKey(options?: AxiosRequestConfig<any> | undefined): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<void>>;
    /**
     * サーバサイド用の API キーを削除します。
     * @summary APIキーを削除
     * @param {string} apiKey APIキー
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteApiKey(apiKey: string, options?: AxiosRequestConfig<any> | undefined): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<void>>;
    /**
     * サーバサイド用に API キーを取得します。最大 2 つまで発行できます。
     * @summary APIキー一覧を取得
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getApiKeys(options?: AxiosRequestConfig<any> | undefined): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<ApiKeys>>;
    /**
     * クライアントへのすべての API リクエストでアプリが使用する固定文字列を取得します。
     * @summary クライアントシークレットを取得
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getClientSecret(options?: AxiosRequestConfig<any> | undefined): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<ClientSecret>>;
    /**
     * テナントのSaasIDを取得します。 SaaSus API および SaaSus SDK にて利用します。
     * @summary SaasIDを取得
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getSaasID(options?: AxiosRequestConfig<any> | undefined): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<SaasID>>;
    /**
     * クライアントへのすべての API リクエストでアプリが使用する固定文字列を再発行します。 既に稼働中のSaaSアプリケーションに設定している場合には、動作に影響があります。
     * @summary クライアントシークレットを更新
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateClientSecret(options?: AxiosRequestConfig<any> | undefined): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<void>>;
    /**
     * テナントのSaasIDを更新します。 SaaSus API および SaaSus SDK にて利用します。 既に稼働中の SaaS アプリケーションに設定している場合には、動作に影響があります。
     * @summary SaasIDを更新
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateSaasID(options?: AxiosRequestConfig<any> | undefined): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<void>>;
};
/**
 * SaasusTenantApi - factory interface
 * @export
 */
export declare const SaasusTenantApiFactory: (configuration?: Configuration | undefined, basePath?: string | undefined, axios?: AxiosInstance | undefined) => {
    /**
     * サーバサイド用に API キーを発行します。最大 2 つまで発行できます。
     * @summary APIキーを作成
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createApiKey(options?: any): AxiosPromise<void>;
    /**
     * サーバサイド用の API キーを削除します。
     * @summary APIキーを削除
     * @param {string} apiKey APIキー
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteApiKey(apiKey: string, options?: any): AxiosPromise<void>;
    /**
     * サーバサイド用に API キーを取得します。最大 2 つまで発行できます。
     * @summary APIキー一覧を取得
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getApiKeys(options?: any): AxiosPromise<ApiKeys>;
    /**
     * クライアントへのすべての API リクエストでアプリが使用する固定文字列を取得します。
     * @summary クライアントシークレットを取得
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getClientSecret(options?: any): AxiosPromise<ClientSecret>;
    /**
     * テナントのSaasIDを取得します。 SaaSus API および SaaSus SDK にて利用します。
     * @summary SaasIDを取得
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getSaasID(options?: any): AxiosPromise<SaasID>;
    /**
     * クライアントへのすべての API リクエストでアプリが使用する固定文字列を再発行します。 既に稼働中のSaaSアプリケーションに設定している場合には、動作に影響があります。
     * @summary クライアントシークレットを更新
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateClientSecret(options?: any): AxiosPromise<void>;
    /**
     * テナントのSaasIDを更新します。 SaaSus API および SaaSus SDK にて利用します。 既に稼働中の SaaS アプリケーションに設定している場合には、動作に影響があります。
     * @summary SaasIDを更新
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateSaasID(options?: any): AxiosPromise<void>;
};
/**
 * SaasusTenantApi - object-oriented interface
 * @export
 * @class SaasusTenantApi
 * @extends {BaseAPI}
 */
export declare class SaasusTenantApi extends BaseAPI {
    /**
     * サーバサイド用に API キーを発行します。最大 2 つまで発行できます。
     * @summary APIキーを作成
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SaasusTenantApi
     */
    createApiKey(options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * サーバサイド用の API キーを削除します。
     * @summary APIキーを削除
     * @param {string} apiKey APIキー
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SaasusTenantApi
     */
    deleteApiKey(apiKey: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * サーバサイド用に API キーを取得します。最大 2 つまで発行できます。
     * @summary APIキー一覧を取得
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SaasusTenantApi
     */
    getApiKeys(options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<ApiKeys, any>>;
    /**
     * クライアントへのすべての API リクエストでアプリが使用する固定文字列を取得します。
     * @summary クライアントシークレットを取得
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SaasusTenantApi
     */
    getClientSecret(options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<ClientSecret, any>>;
    /**
     * テナントのSaasIDを取得します。 SaaSus API および SaaSus SDK にて利用します。
     * @summary SaasIDを取得
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SaasusTenantApi
     */
    getSaasID(options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<SaasID, any>>;
    /**
     * クライアントへのすべての API リクエストでアプリが使用する固定文字列を再発行します。 既に稼働中のSaaSアプリケーションに設定している場合には、動作に影響があります。
     * @summary クライアントシークレットを更新
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SaasusTenantApi
     */
    updateClientSecret(options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * テナントのSaasIDを更新します。 SaaSus API および SaaSus SDK にて利用します。 既に稼働中の SaaS アプリケーションに設定している場合には、動作に影響があります。
     * @summary SaasIDを更新
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SaasusTenantApi
     */
    updateSaasID(options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
}
/**
 * TenantApi - axios parameter creator
 * @export
 */
export declare const TenantApiAxiosParamCreator: (configuration?: Configuration | undefined) => {
    /**
     * SaaSus Platform で管理する、テナント情報を作成します。
     * @summary テナントを作成
     * @param {TenantProps} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createTenant: (body?: TenantProps | undefined, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * billing経由でstripeへ初期情報を設定
     * @summary stripe初期設定
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createTenantAndPricing: (options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * SaaSus Platform で管理する、テナントの詳細情報を削除します。
     * @summary テナント情報を削除
     * @param {string} tenantId テナントID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteTenant: (tenantId: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * SaaSus Platform で管理する、テナントの詳細情報を取得します。
     * @summary テナント情報を取得
     * @param {string} tenantId テナントID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getTenant: (tenantId: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * SaaSus Platform で管理する、テナント情報の取得を行います。
     * @summary テナント一覧取得
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getTenants: (options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * SaaSus Platform で管理する、テナントの詳細情報を更新します。
     * @summary テナント情報を更新
     * @param {string} tenantId テナントID
     * @param {TenantProps} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateTenant: (tenantId: string, body?: TenantProps | undefined, options?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * TenantApi - functional programming interface
 * @export
 */
export declare const TenantApiFp: (configuration?: Configuration | undefined) => {
    /**
     * SaaSus Platform で管理する、テナント情報を作成します。
     * @summary テナントを作成
     * @param {TenantProps} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createTenant(body?: TenantProps | undefined, options?: AxiosRequestConfig<any> | undefined): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<Tenant>>;
    /**
     * billing経由でstripeへ初期情報を設定
     * @summary stripe初期設定
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createTenantAndPricing(options?: AxiosRequestConfig<any> | undefined): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<void>>;
    /**
     * SaaSus Platform で管理する、テナントの詳細情報を削除します。
     * @summary テナント情報を削除
     * @param {string} tenantId テナントID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteTenant(tenantId: string, options?: AxiosRequestConfig<any> | undefined): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<void>>;
    /**
     * SaaSus Platform で管理する、テナントの詳細情報を取得します。
     * @summary テナント情報を取得
     * @param {string} tenantId テナントID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getTenant(tenantId: string, options?: AxiosRequestConfig<any> | undefined): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<Tenant>>;
    /**
     * SaaSus Platform で管理する、テナント情報の取得を行います。
     * @summary テナント一覧取得
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getTenants(options?: AxiosRequestConfig<any> | undefined): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<Tenants>>;
    /**
     * SaaSus Platform で管理する、テナントの詳細情報を更新します。
     * @summary テナント情報を更新
     * @param {string} tenantId テナントID
     * @param {TenantProps} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateTenant(tenantId: string, body?: TenantProps | undefined, options?: AxiosRequestConfig<any> | undefined): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<void>>;
};
/**
 * TenantApi - factory interface
 * @export
 */
export declare const TenantApiFactory: (configuration?: Configuration | undefined, basePath?: string | undefined, axios?: AxiosInstance | undefined) => {
    /**
     * SaaSus Platform で管理する、テナント情報を作成します。
     * @summary テナントを作成
     * @param {TenantProps} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createTenant(body?: TenantProps | undefined, options?: any): AxiosPromise<Tenant>;
    /**
     * billing経由でstripeへ初期情報を設定
     * @summary stripe初期設定
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createTenantAndPricing(options?: any): AxiosPromise<void>;
    /**
     * SaaSus Platform で管理する、テナントの詳細情報を削除します。
     * @summary テナント情報を削除
     * @param {string} tenantId テナントID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteTenant(tenantId: string, options?: any): AxiosPromise<void>;
    /**
     * SaaSus Platform で管理する、テナントの詳細情報を取得します。
     * @summary テナント情報を取得
     * @param {string} tenantId テナントID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getTenant(tenantId: string, options?: any): AxiosPromise<Tenant>;
    /**
     * SaaSus Platform で管理する、テナント情報の取得を行います。
     * @summary テナント一覧取得
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getTenants(options?: any): AxiosPromise<Tenants>;
    /**
     * SaaSus Platform で管理する、テナントの詳細情報を更新します。
     * @summary テナント情報を更新
     * @param {string} tenantId テナントID
     * @param {TenantProps} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateTenant(tenantId: string, body?: TenantProps | undefined, options?: any): AxiosPromise<void>;
};
/**
 * TenantApi - object-oriented interface
 * @export
 * @class TenantApi
 * @extends {BaseAPI}
 */
export declare class TenantApi extends BaseAPI {
    /**
     * SaaSus Platform で管理する、テナント情報を作成します。
     * @summary テナントを作成
     * @param {TenantProps} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TenantApi
     */
    createTenant(body?: TenantProps, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<Tenant, any>>;
    /**
     * billing経由でstripeへ初期情報を設定
     * @summary stripe初期設定
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TenantApi
     */
    createTenantAndPricing(options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * SaaSus Platform で管理する、テナントの詳細情報を削除します。
     * @summary テナント情報を削除
     * @param {string} tenantId テナントID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TenantApi
     */
    deleteTenant(tenantId: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * SaaSus Platform で管理する、テナントの詳細情報を取得します。
     * @summary テナント情報を取得
     * @param {string} tenantId テナントID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TenantApi
     */
    getTenant(tenantId: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<Tenant, any>>;
    /**
     * SaaSus Platform で管理する、テナント情報の取得を行います。
     * @summary テナント一覧取得
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TenantApi
     */
    getTenants(options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<Tenants, any>>;
    /**
     * SaaSus Platform で管理する、テナントの詳細情報を更新します。
     * @summary テナント情報を更新
     * @param {string} tenantId テナントID
     * @param {TenantProps} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TenantApi
     */
    updateTenant(tenantId: string, body?: TenantProps, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
}
/**
 * TenantAttributeApi - axios parameter creator
 * @export
 */
export declare const TenantAttributeApiAxiosParamCreator: (configuration?: Configuration | undefined) => {
    /**
     * SaaSus Platform で管理する、テナントの追加属性の登録を行います。 例えばテナントの呼び名やメモなどをを持たせることができ、SaaSからSaaSus SDK/APIを利用して取得することができます。
     * @summary テナント属性の作成
     * @param {Attribute} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createTenantAttribute: (body?: Attribute | undefined, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * SaaSus Platform で管理する、テナントの追加属性の削除を行います。
     * @summary テナント属性の削除
     * @param {string} attributeName 属性名
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteTenantAttribute: (attributeName: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * SaaSus Platform で管理する、テナントの追加属性の定義を取得します。 例えばテナントの呼び名やメモなどをを持たせることができ、SaaSからSaaSus SDK/APIを利用して取得することができます。
     * @summary テナント属性の一覧を取得
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getTenantAttributes: (options?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * TenantAttributeApi - functional programming interface
 * @export
 */
export declare const TenantAttributeApiFp: (configuration?: Configuration | undefined) => {
    /**
     * SaaSus Platform で管理する、テナントの追加属性の登録を行います。 例えばテナントの呼び名やメモなどをを持たせることができ、SaaSからSaaSus SDK/APIを利用して取得することができます。
     * @summary テナント属性の作成
     * @param {Attribute} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createTenantAttribute(body?: Attribute | undefined, options?: AxiosRequestConfig<any> | undefined): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<Attribute>>;
    /**
     * SaaSus Platform で管理する、テナントの追加属性の削除を行います。
     * @summary テナント属性の削除
     * @param {string} attributeName 属性名
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteTenantAttribute(attributeName: string, options?: AxiosRequestConfig<any> | undefined): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<void>>;
    /**
     * SaaSus Platform で管理する、テナントの追加属性の定義を取得します。 例えばテナントの呼び名やメモなどをを持たせることができ、SaaSからSaaSus SDK/APIを利用して取得することができます。
     * @summary テナント属性の一覧を取得
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getTenantAttributes(options?: AxiosRequestConfig<any> | undefined): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<TenantAttributes>>;
};
/**
 * TenantAttributeApi - factory interface
 * @export
 */
export declare const TenantAttributeApiFactory: (configuration?: Configuration | undefined, basePath?: string | undefined, axios?: AxiosInstance | undefined) => {
    /**
     * SaaSus Platform で管理する、テナントの追加属性の登録を行います。 例えばテナントの呼び名やメモなどをを持たせることができ、SaaSからSaaSus SDK/APIを利用して取得することができます。
     * @summary テナント属性の作成
     * @param {Attribute} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createTenantAttribute(body?: Attribute | undefined, options?: any): AxiosPromise<Attribute>;
    /**
     * SaaSus Platform で管理する、テナントの追加属性の削除を行います。
     * @summary テナント属性の削除
     * @param {string} attributeName 属性名
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteTenantAttribute(attributeName: string, options?: any): AxiosPromise<void>;
    /**
     * SaaSus Platform で管理する、テナントの追加属性の定義を取得します。 例えばテナントの呼び名やメモなどをを持たせることができ、SaaSからSaaSus SDK/APIを利用して取得することができます。
     * @summary テナント属性の一覧を取得
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getTenantAttributes(options?: any): AxiosPromise<TenantAttributes>;
};
/**
 * TenantAttributeApi - object-oriented interface
 * @export
 * @class TenantAttributeApi
 * @extends {BaseAPI}
 */
export declare class TenantAttributeApi extends BaseAPI {
    /**
     * SaaSus Platform で管理する、テナントの追加属性の登録を行います。 例えばテナントの呼び名やメモなどをを持たせることができ、SaaSからSaaSus SDK/APIを利用して取得することができます。
     * @summary テナント属性の作成
     * @param {Attribute} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TenantAttributeApi
     */
    createTenantAttribute(body?: Attribute, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<Attribute, any>>;
    /**
     * SaaSus Platform で管理する、テナントの追加属性の削除を行います。
     * @summary テナント属性の削除
     * @param {string} attributeName 属性名
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TenantAttributeApi
     */
    deleteTenantAttribute(attributeName: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * SaaSus Platform で管理する、テナントの追加属性の定義を取得します。 例えばテナントの呼び名やメモなどをを持たせることができ、SaaSからSaaSus SDK/APIを利用して取得することができます。
     * @summary テナント属性の一覧を取得
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TenantAttributeApi
     */
    getTenantAttributes(options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<TenantAttributes, any>>;
}
/**
 * TenantUserApi - axios parameter creator
 * @export
 */
export declare const TenantUserApiAxiosParamCreator: (configuration?: Configuration | undefined) => {
    /**
     * テナントにユーザーを作成します。attributesを空のオブジェクトにした場合、追加属性は空で作成されます。
     * @summary テナントにユーザーを作成
     * @param {string} tenantId テナントID
     * @param {CreateTenantUserParam} [createTenantUserParam]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createTenantUser: (tenantId: string, createTenantUserParam?: CreateTenantUserParam | undefined, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * テナントのユーザーに役割(ロール)を作成します。
     * @summary テナントのユーザー情報に役割(ロール)を作成
     * @param {string} tenantId テナントID
     * @param {string} userId ユーザーID
     * @param {number} envId 環境ID
     * @param {CreateTenantUserRolesParam} [createTenantUserRolesParam]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createTenantUserRoles: (tenantId: string, userId: string, envId: number, createTenantUserRolesParam?: CreateTenantUserRolesParam | undefined, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * テナントからユーザーを削除します。
     * @summary テナントのユーザー情報を削除
     * @param {string} tenantId テナントID
     * @param {string} userId ユーザーID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteTenantUser: (tenantId: string, userId: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * テナントのユーザーから役割(ロール)を削除します。
     * @summary テナントのユーザーから役割(ロール)を削除
     * @param {string} tenantId テナントID
     * @param {string} userId ユーザーID
     * @param {number} envId 環境ID
     * @param {string} roleName 役割(ロール)名
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteTenantUserRole: (tenantId: string, userId: string, envId: number, roleName: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * ユーザーIDからテナントに所属しているユーザー情報を取得します。複数テナントに所属している場合は別のオブジェクトとして返却されます。
     * @summary ユーザー情報を取得
     * @param {string} userId ユーザーID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllTenantUser: (userId: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * テナントに所属しているユーザー全件を取得します。複数テナントに所属する同一ユーザーは別のオブジェクトとして返却されます。idは一意ではありません。
     * @summary ユーザー一覧を取得
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllTenantUsers: (options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * テナントのユーザーをIDから一件取得します。
     * @summary テナントのユーザー情報を取得
     * @param {string} tenantId テナントID
     * @param {string} userId ユーザーID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getTenantUser: (tenantId: string, userId: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * テナントに所属するユーザーを全件取得します。 idは一意です。
     * @summary テナントのユーザー一覧を取得
     * @param {string} tenantId テナントID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getTenantUsers: (tenantId: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * テナントのユーザー属性情報を更新します。
     * @summary テナントのユーザー属性情報を更新
     * @param {string} tenantId テナントID
     * @param {string} userId ユーザーID
     * @param {UpdateTenantUserParam} [updateTenantUserParam]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateTenantUser: (tenantId: string, userId: string, updateTenantUserParam?: UpdateTenantUserParam | undefined, options?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * TenantUserApi - functional programming interface
 * @export
 */
export declare const TenantUserApiFp: (configuration?: Configuration | undefined) => {
    /**
     * テナントにユーザーを作成します。attributesを空のオブジェクトにした場合、追加属性は空で作成されます。
     * @summary テナントにユーザーを作成
     * @param {string} tenantId テナントID
     * @param {CreateTenantUserParam} [createTenantUserParam]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createTenantUser(tenantId: string, createTenantUserParam?: CreateTenantUserParam | undefined, options?: AxiosRequestConfig<any> | undefined): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<User>>;
    /**
     * テナントのユーザーに役割(ロール)を作成します。
     * @summary テナントのユーザー情報に役割(ロール)を作成
     * @param {string} tenantId テナントID
     * @param {string} userId ユーザーID
     * @param {number} envId 環境ID
     * @param {CreateTenantUserRolesParam} [createTenantUserRolesParam]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createTenantUserRoles(tenantId: string, userId: string, envId: number, createTenantUserRolesParam?: CreateTenantUserRolesParam | undefined, options?: AxiosRequestConfig<any> | undefined): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<void>>;
    /**
     * テナントからユーザーを削除します。
     * @summary テナントのユーザー情報を削除
     * @param {string} tenantId テナントID
     * @param {string} userId ユーザーID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteTenantUser(tenantId: string, userId: string, options?: AxiosRequestConfig<any> | undefined): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<void>>;
    /**
     * テナントのユーザーから役割(ロール)を削除します。
     * @summary テナントのユーザーから役割(ロール)を削除
     * @param {string} tenantId テナントID
     * @param {string} userId ユーザーID
     * @param {number} envId 環境ID
     * @param {string} roleName 役割(ロール)名
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteTenantUserRole(tenantId: string, userId: string, envId: number, roleName: string, options?: AxiosRequestConfig<any> | undefined): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<void>>;
    /**
     * ユーザーIDからテナントに所属しているユーザー情報を取得します。複数テナントに所属している場合は別のオブジェクトとして返却されます。
     * @summary ユーザー情報を取得
     * @param {string} userId ユーザーID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllTenantUser(userId: string, options?: AxiosRequestConfig<any> | undefined): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<Users>>;
    /**
     * テナントに所属しているユーザー全件を取得します。複数テナントに所属する同一ユーザーは別のオブジェクトとして返却されます。idは一意ではありません。
     * @summary ユーザー一覧を取得
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllTenantUsers(options?: AxiosRequestConfig<any> | undefined): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<Users>>;
    /**
     * テナントのユーザーをIDから一件取得します。
     * @summary テナントのユーザー情報を取得
     * @param {string} tenantId テナントID
     * @param {string} userId ユーザーID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getTenantUser(tenantId: string, userId: string, options?: AxiosRequestConfig<any> | undefined): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<User>>;
    /**
     * テナントに所属するユーザーを全件取得します。 idは一意です。
     * @summary テナントのユーザー一覧を取得
     * @param {string} tenantId テナントID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getTenantUsers(tenantId: string, options?: AxiosRequestConfig<any> | undefined): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<Users>>;
    /**
     * テナントのユーザー属性情報を更新します。
     * @summary テナントのユーザー属性情報を更新
     * @param {string} tenantId テナントID
     * @param {string} userId ユーザーID
     * @param {UpdateTenantUserParam} [updateTenantUserParam]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateTenantUser(tenantId: string, userId: string, updateTenantUserParam?: UpdateTenantUserParam | undefined, options?: AxiosRequestConfig<any> | undefined): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<void>>;
};
/**
 * TenantUserApi - factory interface
 * @export
 */
export declare const TenantUserApiFactory: (configuration?: Configuration | undefined, basePath?: string | undefined, axios?: AxiosInstance | undefined) => {
    /**
     * テナントにユーザーを作成します。attributesを空のオブジェクトにした場合、追加属性は空で作成されます。
     * @summary テナントにユーザーを作成
     * @param {string} tenantId テナントID
     * @param {CreateTenantUserParam} [createTenantUserParam]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createTenantUser(tenantId: string, createTenantUserParam?: CreateTenantUserParam | undefined, options?: any): AxiosPromise<User>;
    /**
     * テナントのユーザーに役割(ロール)を作成します。
     * @summary テナントのユーザー情報に役割(ロール)を作成
     * @param {string} tenantId テナントID
     * @param {string} userId ユーザーID
     * @param {number} envId 環境ID
     * @param {CreateTenantUserRolesParam} [createTenantUserRolesParam]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createTenantUserRoles(tenantId: string, userId: string, envId: number, createTenantUserRolesParam?: CreateTenantUserRolesParam | undefined, options?: any): AxiosPromise<void>;
    /**
     * テナントからユーザーを削除します。
     * @summary テナントのユーザー情報を削除
     * @param {string} tenantId テナントID
     * @param {string} userId ユーザーID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteTenantUser(tenantId: string, userId: string, options?: any): AxiosPromise<void>;
    /**
     * テナントのユーザーから役割(ロール)を削除します。
     * @summary テナントのユーザーから役割(ロール)を削除
     * @param {string} tenantId テナントID
     * @param {string} userId ユーザーID
     * @param {number} envId 環境ID
     * @param {string} roleName 役割(ロール)名
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteTenantUserRole(tenantId: string, userId: string, envId: number, roleName: string, options?: any): AxiosPromise<void>;
    /**
     * ユーザーIDからテナントに所属しているユーザー情報を取得します。複数テナントに所属している場合は別のオブジェクトとして返却されます。
     * @summary ユーザー情報を取得
     * @param {string} userId ユーザーID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllTenantUser(userId: string, options?: any): AxiosPromise<Users>;
    /**
     * テナントに所属しているユーザー全件を取得します。複数テナントに所属する同一ユーザーは別のオブジェクトとして返却されます。idは一意ではありません。
     * @summary ユーザー一覧を取得
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllTenantUsers(options?: any): AxiosPromise<Users>;
    /**
     * テナントのユーザーをIDから一件取得します。
     * @summary テナントのユーザー情報を取得
     * @param {string} tenantId テナントID
     * @param {string} userId ユーザーID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getTenantUser(tenantId: string, userId: string, options?: any): AxiosPromise<User>;
    /**
     * テナントに所属するユーザーを全件取得します。 idは一意です。
     * @summary テナントのユーザー一覧を取得
     * @param {string} tenantId テナントID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getTenantUsers(tenantId: string, options?: any): AxiosPromise<Users>;
    /**
     * テナントのユーザー属性情報を更新します。
     * @summary テナントのユーザー属性情報を更新
     * @param {string} tenantId テナントID
     * @param {string} userId ユーザーID
     * @param {UpdateTenantUserParam} [updateTenantUserParam]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateTenantUser(tenantId: string, userId: string, updateTenantUserParam?: UpdateTenantUserParam | undefined, options?: any): AxiosPromise<void>;
};
/**
 * TenantUserApi - object-oriented interface
 * @export
 * @class TenantUserApi
 * @extends {BaseAPI}
 */
export declare class TenantUserApi extends BaseAPI {
    /**
     * テナントにユーザーを作成します。attributesを空のオブジェクトにした場合、追加属性は空で作成されます。
     * @summary テナントにユーザーを作成
     * @param {string} tenantId テナントID
     * @param {CreateTenantUserParam} [createTenantUserParam]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TenantUserApi
     */
    createTenantUser(tenantId: string, createTenantUserParam?: CreateTenantUserParam, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<User, any>>;
    /**
     * テナントのユーザーに役割(ロール)を作成します。
     * @summary テナントのユーザー情報に役割(ロール)を作成
     * @param {string} tenantId テナントID
     * @param {string} userId ユーザーID
     * @param {number} envId 環境ID
     * @param {CreateTenantUserRolesParam} [createTenantUserRolesParam]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TenantUserApi
     */
    createTenantUserRoles(tenantId: string, userId: string, envId: number, createTenantUserRolesParam?: CreateTenantUserRolesParam, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * テナントからユーザーを削除します。
     * @summary テナントのユーザー情報を削除
     * @param {string} tenantId テナントID
     * @param {string} userId ユーザーID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TenantUserApi
     */
    deleteTenantUser(tenantId: string, userId: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * テナントのユーザーから役割(ロール)を削除します。
     * @summary テナントのユーザーから役割(ロール)を削除
     * @param {string} tenantId テナントID
     * @param {string} userId ユーザーID
     * @param {number} envId 環境ID
     * @param {string} roleName 役割(ロール)名
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TenantUserApi
     */
    deleteTenantUserRole(tenantId: string, userId: string, envId: number, roleName: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * ユーザーIDからテナントに所属しているユーザー情報を取得します。複数テナントに所属している場合は別のオブジェクトとして返却されます。
     * @summary ユーザー情報を取得
     * @param {string} userId ユーザーID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TenantUserApi
     */
    getAllTenantUser(userId: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<Users, any>>;
    /**
     * テナントに所属しているユーザー全件を取得します。複数テナントに所属する同一ユーザーは別のオブジェクトとして返却されます。idは一意ではありません。
     * @summary ユーザー一覧を取得
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TenantUserApi
     */
    getAllTenantUsers(options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<Users, any>>;
    /**
     * テナントのユーザーをIDから一件取得します。
     * @summary テナントのユーザー情報を取得
     * @param {string} tenantId テナントID
     * @param {string} userId ユーザーID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TenantUserApi
     */
    getTenantUser(tenantId: string, userId: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<User, any>>;
    /**
     * テナントに所属するユーザーを全件取得します。 idは一意です。
     * @summary テナントのユーザー一覧を取得
     * @param {string} tenantId テナントID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TenantUserApi
     */
    getTenantUsers(tenantId: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<Users, any>>;
    /**
     * テナントのユーザー属性情報を更新します。
     * @summary テナントのユーザー属性情報を更新
     * @param {string} tenantId テナントID
     * @param {string} userId ユーザーID
     * @param {UpdateTenantUserParam} [updateTenantUserParam]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TenantUserApi
     */
    updateTenantUser(tenantId: string, userId: string, updateTenantUserParam?: UpdateTenantUserParam, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
}
/**
 * UserAttributeApi - axios parameter creator
 * @export
 */
export declare const UserAttributeApiAxiosParamCreator: (configuration?: Configuration | undefined) => {
    /**
     * SaaSus Platform にて保持するユーザーの追加属性を登録します。 例えば、ユーザー名を持たせる、誕生日を持たせるなど、ユーザーに紐付いた項目の定義を行うことができます。 一方で、個人情報を SaaSus Platform 側に持たせたくない場合は、このユーザー属性定義を行わずに SaaS 側で個人情報を持つことを検討してください。
     * @summary ユーザー属性の作成
     * @param {Attribute} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createUserAttribute: (body?: Attribute | undefined, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * SaaSus Platform にて保持するユーザーの追加属性を削除します。
     * @summary ユーザー属性の削除
     * @param {string} attributeName 属性名
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteUserAttribute: (attributeName: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * SaaSus Platform にて保持するユーザーの追加属性を取得します。 例えば、ユーザー名を持たせる、誕生日を持たせるなど、ユーザーに紐付いた項目の定義を行うことができます。 一方で、個人情報を SaaSus Platform 側に持たせたくない場合は、このユーザー属性定義を行わずに SaaS 側で個人情報を持つことを検討してください。
     * @summary ユーザー属性の一覧を取得
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUserAttributes: (options?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * UserAttributeApi - functional programming interface
 * @export
 */
export declare const UserAttributeApiFp: (configuration?: Configuration | undefined) => {
    /**
     * SaaSus Platform にて保持するユーザーの追加属性を登録します。 例えば、ユーザー名を持たせる、誕生日を持たせるなど、ユーザーに紐付いた項目の定義を行うことができます。 一方で、個人情報を SaaSus Platform 側に持たせたくない場合は、このユーザー属性定義を行わずに SaaS 側で個人情報を持つことを検討してください。
     * @summary ユーザー属性の作成
     * @param {Attribute} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createUserAttribute(body?: Attribute | undefined, options?: AxiosRequestConfig<any> | undefined): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<Attribute>>;
    /**
     * SaaSus Platform にて保持するユーザーの追加属性を削除します。
     * @summary ユーザー属性の削除
     * @param {string} attributeName 属性名
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteUserAttribute(attributeName: string, options?: AxiosRequestConfig<any> | undefined): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<void>>;
    /**
     * SaaSus Platform にて保持するユーザーの追加属性を取得します。 例えば、ユーザー名を持たせる、誕生日を持たせるなど、ユーザーに紐付いた項目の定義を行うことができます。 一方で、個人情報を SaaSus Platform 側に持たせたくない場合は、このユーザー属性定義を行わずに SaaS 側で個人情報を持つことを検討してください。
     * @summary ユーザー属性の一覧を取得
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUserAttributes(options?: AxiosRequestConfig<any> | undefined): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<UserAttributes>>;
};
/**
 * UserAttributeApi - factory interface
 * @export
 */
export declare const UserAttributeApiFactory: (configuration?: Configuration | undefined, basePath?: string | undefined, axios?: AxiosInstance | undefined) => {
    /**
     * SaaSus Platform にて保持するユーザーの追加属性を登録します。 例えば、ユーザー名を持たせる、誕生日を持たせるなど、ユーザーに紐付いた項目の定義を行うことができます。 一方で、個人情報を SaaSus Platform 側に持たせたくない場合は、このユーザー属性定義を行わずに SaaS 側で個人情報を持つことを検討してください。
     * @summary ユーザー属性の作成
     * @param {Attribute} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createUserAttribute(body?: Attribute | undefined, options?: any): AxiosPromise<Attribute>;
    /**
     * SaaSus Platform にて保持するユーザーの追加属性を削除します。
     * @summary ユーザー属性の削除
     * @param {string} attributeName 属性名
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteUserAttribute(attributeName: string, options?: any): AxiosPromise<void>;
    /**
     * SaaSus Platform にて保持するユーザーの追加属性を取得します。 例えば、ユーザー名を持たせる、誕生日を持たせるなど、ユーザーに紐付いた項目の定義を行うことができます。 一方で、個人情報を SaaSus Platform 側に持たせたくない場合は、このユーザー属性定義を行わずに SaaS 側で個人情報を持つことを検討してください。
     * @summary ユーザー属性の一覧を取得
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUserAttributes(options?: any): AxiosPromise<UserAttributes>;
};
/**
 * UserAttributeApi - object-oriented interface
 * @export
 * @class UserAttributeApi
 * @extends {BaseAPI}
 */
export declare class UserAttributeApi extends BaseAPI {
    /**
     * SaaSus Platform にて保持するユーザーの追加属性を登録します。 例えば、ユーザー名を持たせる、誕生日を持たせるなど、ユーザーに紐付いた項目の定義を行うことができます。 一方で、個人情報を SaaSus Platform 側に持たせたくない場合は、このユーザー属性定義を行わずに SaaS 側で個人情報を持つことを検討してください。
     * @summary ユーザー属性の作成
     * @param {Attribute} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserAttributeApi
     */
    createUserAttribute(body?: Attribute, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<Attribute, any>>;
    /**
     * SaaSus Platform にて保持するユーザーの追加属性を削除します。
     * @summary ユーザー属性の削除
     * @param {string} attributeName 属性名
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserAttributeApi
     */
    deleteUserAttribute(attributeName: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * SaaSus Platform にて保持するユーザーの追加属性を取得します。 例えば、ユーザー名を持たせる、誕生日を持たせるなど、ユーザーに紐付いた項目の定義を行うことができます。 一方で、個人情報を SaaSus Platform 側に持たせたくない場合は、このユーザー属性定義を行わずに SaaS 側で個人情報を持つことを検討してください。
     * @summary ユーザー属性の一覧を取得
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserAttributeApi
     */
    getUserAttributes(options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<UserAttributes, any>>;
}
/**
 * UserInfoApi - axios parameter creator
 * @export
 */
export declare const UserInfoApiAxiosParamCreator: (configuration?: Configuration | undefined) => {
    /**
     * SaaS利用ユーザ(登録ユーザ)のIDトークンを元に、ユーザ情報を取得します。 IDトークンは、SaaSus Platform生成のログイン画面からログイン時にCallback URLに渡されます。 サーバ側でそのURLからIDトークンを取得し、このAPIを呼ぶことにより、該当ユーザの情報が取得できます。 取得した上には、所属テナントや役割(ロール)、料金プランなどが含まれているため、それを元に認可の実装を行うことが可能です。
     * @summary ユーザー情報取得
     * @param {string} token IDトークン
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUserInfo: (token: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * UserInfoApi - functional programming interface
 * @export
 */
export declare const UserInfoApiFp: (configuration?: Configuration | undefined) => {
    /**
     * SaaS利用ユーザ(登録ユーザ)のIDトークンを元に、ユーザ情報を取得します。 IDトークンは、SaaSus Platform生成のログイン画面からログイン時にCallback URLに渡されます。 サーバ側でそのURLからIDトークンを取得し、このAPIを呼ぶことにより、該当ユーザの情報が取得できます。 取得した上には、所属テナントや役割(ロール)、料金プランなどが含まれているため、それを元に認可の実装を行うことが可能です。
     * @summary ユーザー情報取得
     * @param {string} token IDトークン
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUserInfo(token: string, options?: AxiosRequestConfig<any> | undefined): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<UserInfo>>;
};
/**
 * UserInfoApi - factory interface
 * @export
 */
export declare const UserInfoApiFactory: (configuration?: Configuration | undefined, basePath?: string | undefined, axios?: AxiosInstance | undefined) => {
    /**
     * SaaS利用ユーザ(登録ユーザ)のIDトークンを元に、ユーザ情報を取得します。 IDトークンは、SaaSus Platform生成のログイン画面からログイン時にCallback URLに渡されます。 サーバ側でそのURLからIDトークンを取得し、このAPIを呼ぶことにより、該当ユーザの情報が取得できます。 取得した上には、所属テナントや役割(ロール)、料金プランなどが含まれているため、それを元に認可の実装を行うことが可能です。
     * @summary ユーザー情報取得
     * @param {string} token IDトークン
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUserInfo(token: string, options?: any): AxiosPromise<UserInfo>;
};
/**
 * UserInfoApi - object-oriented interface
 * @export
 * @class UserInfoApi
 * @extends {BaseAPI}
 */
export declare class UserInfoApi extends BaseAPI {
    /**
     * SaaS利用ユーザ(登録ユーザ)のIDトークンを元に、ユーザ情報を取得します。 IDトークンは、SaaSus Platform生成のログイン画面からログイン時にCallback URLに渡されます。 サーバ側でそのURLからIDトークンを取得し、このAPIを呼ぶことにより、該当ユーザの情報が取得できます。 取得した上には、所属テナントや役割(ロール)、料金プランなどが含まれているため、それを元に認可の実装を行うことが可能です。
     * @summary ユーザー情報取得
     * @param {string} token IDトークン
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserInfoApi
     */
    getUserInfo(token: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<UserInfo, any>>;
}
