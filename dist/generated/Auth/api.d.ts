/**
 * SaaSus Auth API Schema
 * Schema
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import { Configuration } from './configuration';
import { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { RequestArgs, BaseAPI } from './base';
/**
 * Account authentication settings ※ This function is not yet provided, so it cannot be changed or saved.
 * @export
 * @interface AccountVerification
 */
export interface AccountVerification {
    /**
     * code: verification code link: verification link ※ This function is not yet provided, so it cannot be changed or saved.
     * @type {string}
     * @memberof AccountVerification
     */
    'verification_method': AccountVerificationVerificationMethodEnum;
    /**
     * email: e-mail sms: SMS smsOrEmail: email if SMS is not possible
     * @type {string}
     * @memberof AccountVerification
     */
    'sending_to': AccountVerificationSendingToEnum;
}
export declare const AccountVerificationVerificationMethodEnum: {
    readonly Code: "code";
    readonly Link: "link";
};
export declare type AccountVerificationVerificationMethodEnum = typeof AccountVerificationVerificationMethodEnum[keyof typeof AccountVerificationVerificationMethodEnum];
export declare const AccountVerificationSendingToEnum: {
    readonly Email: "email";
    readonly Sms: "sms";
    readonly SmsOrEmail: "smsOrEmail";
};
export declare type AccountVerificationSendingToEnum = typeof AccountVerificationSendingToEnum[keyof typeof AccountVerificationSendingToEnum];
/**
 *
 * @export
 * @interface ApiKeys
 */
export interface ApiKeys {
    /**
     * API Key
     * @type {Array<string>}
     * @memberof ApiKeys
     */
    'api_keys': Array<string>;
}
/**
 *
 * @export
 * @interface Attribute
 */
export interface Attribute {
    /**
     * Attribute Name
     * @type {string}
     * @memberof Attribute
     */
    'attribute_name': string;
    /**
     * Display Name
     * @type {string}
     * @memberof Attribute
     */
    'display_name': string;
    /**
     *
     * @type {AttributeType}
     * @memberof Attribute
     */
    'attribute_type': AttributeType;
}
/**
 * Type (date can be set to YYYY-MM-DD format.)
 * @export
 * @enum {string}
 */
export declare const AttributeType: {
    readonly String: "string";
    readonly Number: "number";
    readonly Bool: "bool";
    readonly Date: "date";
};
export declare type AttributeType = typeof AttributeType[keyof typeof AttributeType];
/**
 *
 * @export
 * @interface AuthInfo
 */
export interface AuthInfo {
    /**
     * Redirect After Authentication
     * @type {string}
     * @memberof AuthInfo
     */
    'callback_url': string;
}
/**
 *
 * @export
 * @interface AuthorizationTempCode
 */
export interface AuthorizationTempCode {
    /**
     *
     * @type {string}
     * @memberof AuthorizationTempCode
     */
    'code': string;
}
/**
 *
 * @export
 * @interface BasicInfo
 */
export interface BasicInfo {
    /**
     * Domain Name
     * @type {string}
     * @memberof BasicInfo
     */
    'domain_name': string;
    /**
     * DNS Record Verification Results
     * @type {boolean}
     * @memberof BasicInfo
     */
    'is_dns_validated': boolean;
    /**
     *
     * @type {DnsRecord}
     * @memberof BasicInfo
     */
    'certificate_dns_record': DnsRecord;
    /**
     *
     * @type {DnsRecord}
     * @memberof BasicInfo
     */
    'cloud_front_dns_record': DnsRecord;
    /**
     * DKIM DNS Records
     * @type {Array<DnsRecord>}
     * @memberof BasicInfo
     */
    'dkim_dns_records': Array<DnsRecord>;
    /**
     * Default Domain Name
     * @type {string}
     * @memberof BasicInfo
     */
    'default_domain_name': string;
    /**
     * Sender Email for Authentication Email
     * @type {string}
     * @memberof BasicInfo
     */
    'from_email_address': string;
    /**
     * Reply-from email address of authentication email
     * @type {string}
     * @memberof BasicInfo
     */
    'reply_email_address': string;
    /**
     * SES sandbox release and Cognito SES configuration results
     * @type {boolean}
     * @memberof BasicInfo
     */
    'is_ses_sandbox_granted': boolean;
}
/**
 *
 * @export
 * @interface BillingAddress
 */
export interface BillingAddress {
    /**
     * Street address, apartment or suite number.
     * @type {string}
     * @memberof BillingAddress
     */
    'street': string;
    /**
     * City, district, suburb, town, or village.
     * @type {string}
     * @memberof BillingAddress
     */
    'city': string;
    /**
     * State name or abbreviation.
     * @type {string}
     * @memberof BillingAddress
     */
    'state': string;
    /**
     * Country of the address using ISO 3166-1 alpha-2 code.
     * @type {string}
     * @memberof BillingAddress
     */
    'country': string;
    /**
     * Additional information about the address, such as a building name, floor, or department name.
     * @type {string}
     * @memberof BillingAddress
     */
    'additional_address_info'?: string;
    /**
     * ZIP or postal code.
     * @type {string}
     * @memberof BillingAddress
     */
    'postal_code': string;
}
/**
 *
 * @export
 * @interface BillingInfo
 */
export interface BillingInfo {
    /**
     * Tenant name for billing
     * @type {string}
     * @memberof BillingInfo
     */
    'name': string;
    /**
     *
     * @type {BillingAddress}
     * @memberof BillingInfo
     */
    'address': BillingAddress;
    /**
     *
     * @type {InvoiceLanguage}
     * @memberof BillingInfo
     */
    'invoice_language': InvoiceLanguage;
}
/**
 *
 * @export
 * @interface ClientSecret
 */
export interface ClientSecret {
    /**
     * Client Secret
     * @type {string}
     * @memberof ClientSecret
     */
    'client_secret': string;
}
/**
 *
 * @export
 * @interface ConfirmEmailUpdateParam
 */
export interface ConfirmEmailUpdateParam {
    /**
     *
     * @type {string}
     * @memberof ConfirmEmailUpdateParam
     */
    'code': string;
    /**
     *
     * @type {string}
     * @memberof ConfirmEmailUpdateParam
     */
    'access_token': string;
}
/**
 *
 * @export
 * @interface ConfirmExternalUserLinkParam
 */
export interface ConfirmExternalUserLinkParam {
    /**
     *
     * @type {string}
     * @memberof ConfirmExternalUserLinkParam
     */
    'access_token': string;
    /**
     *
     * @type {string}
     * @memberof ConfirmExternalUserLinkParam
     */
    'code': string;
}
/**
 *
 * @export
 * @interface ConfirmSignUpWithAwsMarketplaceParam
 */
export interface ConfirmSignUpWithAwsMarketplaceParam {
    /**
     * Tenant name
     * @type {string}
     * @memberof ConfirmSignUpWithAwsMarketplaceParam
     */
    'tenant_name'?: string;
    /**
     * Access token
     * @type {string}
     * @memberof ConfirmSignUpWithAwsMarketplaceParam
     */
    'access_token': string;
    /**
     * Registration Token
     * @type {string}
     * @memberof ConfirmSignUpWithAwsMarketplaceParam
     */
    'registration_token': string;
}
/**
 *
 * @export
 * @interface CreateSaasUserParam
 */
export interface CreateSaasUserParam {
    /**
     * E-mail
     * @type {string}
     * @memberof CreateSaasUserParam
     */
    'email': string;
    /**
     * Password
     * @type {string}
     * @memberof CreateSaasUserParam
     */
    'password': string;
}
/**
 *
 * @export
 * @interface CreateSecretCodeParam
 */
export interface CreateSecretCodeParam {
    /**
     * access token
     * @type {string}
     * @memberof CreateSecretCodeParam
     */
    'access_token': string;
}
/**
 *
 * @export
 * @interface CreateTenantInvitationParam
 */
export interface CreateTenantInvitationParam {
    /**
     * Email address of the user to be invited
     * @type {string}
     * @memberof CreateTenantInvitationParam
     */
    'email': string;
    /**
     * Access token of the user who creates an invitation
     * @type {string}
     * @memberof CreateTenantInvitationParam
     */
    'access_token': string;
    /**
     *
     * @type {Array<InvitedUserEnvironmentInformationInner>}
     * @memberof CreateTenantInvitationParam
     */
    'envs': Array<InvitedUserEnvironmentInformationInner>;
}
/**
 *
 * @export
 * @interface CreateTenantUserParam
 */
export interface CreateTenantUserParam {
    /**
     * E-mail
     * @type {string}
     * @memberof CreateTenantUserParam
     */
    'email': string;
    /**
     * Attribute information (Get information set by defining user attributes in the SaaS development console)
     * @type {{ [key: string]: any; }}
     * @memberof CreateTenantUserParam
     */
    'attributes': {
        [key: string]: any;
    };
}
/**
 *
 * @export
 * @interface CreateTenantUserRolesParam
 */
export interface CreateTenantUserRolesParam {
    /**
     * Role Info
     * @type {Array<string>}
     * @memberof CreateTenantUserRolesParam
     */
    'role_names': Array<string>;
}
/**
 *
 * @export
 * @interface Credentials
 */
export interface Credentials {
    /**
     * ID token
     * @type {string}
     * @memberof Credentials
     */
    'id_token': string;
    /**
     * Access token
     * @type {string}
     * @memberof Credentials
     */
    'access_token': string;
    /**
     * Refresh token
     * @type {string}
     * @memberof Credentials
     */
    'refresh_token'?: string;
}
/**
 *
 * @export
 * @interface CustomizePageProps
 */
export interface CustomizePageProps {
    /**
     * Edit page HTML ※ This function is not yet provided, so it cannot be changed or saved.
     * @type {string}
     * @memberof CustomizePageProps
     */
    'html_contents': string;
    /**
     * display the terms of use agreement check box
     * @type {boolean}
     * @memberof CustomizePageProps
     */
    'is_terms_of_service': boolean;
    /**
     * show the privacy policy checkbox
     * @type {boolean}
     * @memberof CustomizePageProps
     */
    'is_privacy_policy': boolean;
}
/**
 *
 * @export
 * @interface CustomizePageSettings
 */
export interface CustomizePageSettings {
    /**
     * service icon
     * @type {string}
     * @memberof CustomizePageSettings
     */
    'icon': string;
    /**
     * favicon
     * @type {string}
     * @memberof CustomizePageSettings
     */
    'favicon': string;
    /**
     * service name
     * @type {string}
     * @memberof CustomizePageSettings
     */
    'title': string;
    /**
     * terms of service URL
     * @type {string}
     * @memberof CustomizePageSettings
     */
    'terms_of_service_url': string;
    /**
     * privacy policy URL
     * @type {string}
     * @memberof CustomizePageSettings
     */
    'privacy_policy_url': string;
    /**
     * Google Tag Manager container ID
     * @type {string}
     * @memberof CustomizePageSettings
     */
    'google_tag_manager_container_id': string;
}
/**
 *
 * @export
 * @interface CustomizePageSettingsAllOf
 */
export interface CustomizePageSettingsAllOf {
    /**
     * service icon
     * @type {string}
     * @memberof CustomizePageSettingsAllOf
     */
    'icon': string;
    /**
     * favicon
     * @type {string}
     * @memberof CustomizePageSettingsAllOf
     */
    'favicon': string;
}
/**
 *
 * @export
 * @interface CustomizePageSettingsProps
 */
export interface CustomizePageSettingsProps {
    /**
     * service name
     * @type {string}
     * @memberof CustomizePageSettingsProps
     */
    'title': string;
    /**
     * terms of service URL
     * @type {string}
     * @memberof CustomizePageSettingsProps
     */
    'terms_of_service_url': string;
    /**
     * privacy policy URL
     * @type {string}
     * @memberof CustomizePageSettingsProps
     */
    'privacy_policy_url': string;
    /**
     * Google Tag Manager container ID
     * @type {string}
     * @memberof CustomizePageSettingsProps
     */
    'google_tag_manager_container_id': string;
}
/**
 *
 * @export
 * @interface CustomizePages
 */
export interface CustomizePages {
    /**
     *
     * @type {CustomizePageProps}
     * @memberof CustomizePages
     */
    'sign_up_page': CustomizePageProps;
    /**
     *
     * @type {CustomizePageProps}
     * @memberof CustomizePages
     */
    'sign_in_page': CustomizePageProps;
    /**
     *
     * @type {CustomizePageProps}
     * @memberof CustomizePages
     */
    'password_reset_page': CustomizePageProps;
}
/**
 * Settings for remembering trusted devices
 * @export
 * @interface DeviceConfiguration
 */
export interface DeviceConfiguration {
    /**
     * always: always remember userOptIn: user opt-in no: don\'t save
     * @type {string}
     * @memberof DeviceConfiguration
     */
    'device_remembering': DeviceConfigurationDeviceRememberingEnum;
}
export declare const DeviceConfigurationDeviceRememberingEnum: {
    readonly Always: "always";
    readonly UserOptIn: "userOptIn";
    readonly No: "no";
};
export declare type DeviceConfigurationDeviceRememberingEnum = typeof DeviceConfigurationDeviceRememberingEnum[keyof typeof DeviceConfigurationDeviceRememberingEnum];
/**
 *
 * @export
 * @interface DnsRecord
 */
export interface DnsRecord {
    /**
     * CNAME Resource Record
     * @type {string}
     * @memberof DnsRecord
     */
    'type': DnsRecordTypeEnum;
    /**
     * Record Name
     * @type {string}
     * @memberof DnsRecord
     */
    'name': string;
    /**
     * Value
     * @type {string}
     * @memberof DnsRecord
     */
    'value': string;
}
export declare const DnsRecordTypeEnum: {
    readonly Cname: "CNAME";
};
export declare type DnsRecordTypeEnum = typeof DnsRecordTypeEnum[keyof typeof DnsRecordTypeEnum];
/**
 * env info
 * @export
 * @interface Env
 */
export interface Env {
    /**
     *
     * @type {number}
     * @memberof Env
     */
    'id': number;
    /**
     * env name
     * @type {string}
     * @memberof Env
     */
    'name': string;
    /**
     * env display name
     * @type {string}
     * @memberof Env
     */
    'display_name'?: string;
}
/**
 * env list
 * @export
 * @interface Envs
 */
export interface Envs {
    /**
     *
     * @type {Array<Env>}
     * @memberof Envs
     */
    'envs': Array<Env>;
}
/**
 * This information is required to set up sign-in using an external identity provider. It cannot be changed.
 * @export
 * @interface IdentityProviderConfiguration
 */
export interface IdentityProviderConfiguration {
    /**
     * domain
     * @type {string}
     * @memberof IdentityProviderConfiguration
     */
    'domain': string;
    /**
     * redirect URL
     * @type {string}
     * @memberof IdentityProviderConfiguration
     */
    'redirect_url': string;
    /**
     * entity ID
     * @type {string}
     * @memberof IdentityProviderConfiguration
     */
    'entity_id': string;
    /**
     * reply URL
     * @type {string}
     * @memberof IdentityProviderConfiguration
     */
    'reply_url': string;
}
/**
 *
 * @export
 * @interface IdentityProviderProps
 */
export interface IdentityProviderProps {
    /**
     *
     * @type {string}
     * @memberof IdentityProviderProps
     */
    'application_id': string;
    /**
     *
     * @type {string}
     * @memberof IdentityProviderProps
     */
    'application_secret': string;
    /**
     *
     * @type {string}
     * @memberof IdentityProviderProps
     */
    'approval_scope': string;
    /**
     *
     * @type {boolean}
     * @memberof IdentityProviderProps
     */
    'is_button_hidden'?: boolean;
}
/**
 *
 * @export
 * @interface IdentityProviderSaml
 */
export interface IdentityProviderSaml {
    /**
     *
     * @type {string}
     * @memberof IdentityProviderSaml
     */
    'metadata_url': string;
    /**
     *
     * @type {string}
     * @memberof IdentityProviderSaml
     */
    'email_attribute': string;
}
/**
 *
 * @export
 * @interface IdentityProviders
 */
export interface IdentityProviders {
    /**
     *
     * @type {IdentityProviderProps}
     * @memberof IdentityProviders
     */
    'google': IdentityProviderProps;
}
/**
 *
 * @export
 * @interface Invitation
 */
export interface Invitation {
    /**
     *
     * @type {string}
     * @memberof Invitation
     */
    'id': string;
    /**
     * Email address of the invited user
     * @type {string}
     * @memberof Invitation
     */
    'email': string;
    /**
     * Invitation URL
     * @type {string}
     * @memberof Invitation
     */
    'invitation_url': string;
    /**
     *
     * @type {Array<UserAvailableEnv>}
     * @memberof Invitation
     */
    'envs': Array<UserAvailableEnv>;
    /**
     * Expiration date of the invitation
     * @type {number}
     * @memberof Invitation
     */
    'expired_at': number;
    /**
     *
     * @type {InvitationStatus}
     * @memberof Invitation
     */
    'status': InvitationStatus;
}
/**
 *
 * @export
 * @enum {string}
 */
export declare const InvitationStatus: {
    readonly Pending: "pending";
    readonly Accepted: "accepted";
    readonly Expired: "expired";
};
export declare type InvitationStatus = typeof InvitationStatus[keyof typeof InvitationStatus];
/**
 * Invitation validity
 * @export
 * @interface InvitationValidity
 */
export interface InvitationValidity {
    /**
     * Whether the validation is valid or not
     * @type {boolean}
     * @memberof InvitationValidity
     */
    'is_valid': boolean;
}
/**
 *
 * @export
 * @interface Invitations
 */
export interface Invitations {
    /**
     * Invitation list
     * @type {Array<Invitation>}
     * @memberof Invitations
     */
    'invitations': Array<Invitation>;
}
/**
 *
 * @export
 * @interface InvitedUserEnvironmentInformationInner
 */
export interface InvitedUserEnvironmentInformationInner {
    /**
     *
     * @type {number}
     * @memberof InvitedUserEnvironmentInformationInner
     */
    'id': number;
    /**
     * Role name
     * @type {Array<string>}
     * @memberof InvitedUserEnvironmentInformationInner
     */
    'role_names': Array<string>;
}
/**
 * Language of invoice
 * @export
 * @enum {string}
 */
export declare const InvoiceLanguage: {
    readonly JaJp: "ja-JP";
    readonly EnUs: "en-US";
};
export declare type InvoiceLanguage = typeof InvoiceLanguage[keyof typeof InvoiceLanguage];
/**
 *
 * @export
 * @interface LinkAwsMarketplaceParam
 */
export interface LinkAwsMarketplaceParam {
    /**
     * Tenant ID
     * @type {string}
     * @memberof LinkAwsMarketplaceParam
     */
    'tenant_id': string;
    /**
     * Access token
     * @type {string}
     * @memberof LinkAwsMarketplaceParam
     */
    'access_token': string;
    /**
     * Registration Token
     * @type {string}
     * @memberof LinkAwsMarketplaceParam
     */
    'registration_token': string;
}
/**
 *
 * @export
 * @interface MessageTemplate
 */
export interface MessageTemplate {
    /**
     * Title
     * @type {string}
     * @memberof MessageTemplate
     */
    'subject': string;
    /**
     * Message
     * @type {string}
     * @memberof MessageTemplate
     */
    'message': string;
}
/**
 * MFA device authentication settings ※ This function is not yet provided, so it cannot be changed or saved.
 * @export
 * @interface MfaConfiguration
 */
export interface MfaConfiguration {
    /**
     * on: apply when all users log in optional: apply to individual users with MFA factor enabled ※ The parameter is currently optional and fixed.
     * @type {string}
     * @memberof MfaConfiguration
     */
    'mfa_configuration': MfaConfigurationMfaConfigurationEnum;
}
export declare const MfaConfigurationMfaConfigurationEnum: {
    readonly On: "on";
    readonly Optional: "optional";
};
export declare type MfaConfigurationMfaConfigurationEnum = typeof MfaConfigurationMfaConfigurationEnum[keyof typeof MfaConfigurationMfaConfigurationEnum];
/**
 *
 * @export
 * @interface MfaPreference
 */
export interface MfaPreference {
    /**
     * enable MFA
     * @type {boolean}
     * @memberof MfaPreference
     */
    'enabled': boolean;
    /**
     * MFA method (required if enabled is true)
     * @type {string}
     * @memberof MfaPreference
     */
    'method'?: MfaPreferenceMethodEnum;
}
export declare const MfaPreferenceMethodEnum: {
    readonly SoftwareToken: "softwareToken";
};
export declare type MfaPreferenceMethodEnum = typeof MfaPreferenceMethodEnum[keyof typeof MfaPreferenceMethodEnum];
/**
 *
 * @export
 * @interface ModelError
 */
export interface ModelError {
    /**
     * permission_denied
     * @type {string}
     * @memberof ModelError
     */
    'type': string;
    /**
     * Error message
     * @type {string}
     * @memberof ModelError
     */
    'message': string;
    /**
     *
     * @type {{ [key: string]: any; }}
     * @memberof ModelError
     */
    'data'?: {
        [key: string]: any;
    };
}
/**
 *
 * @export
 * @interface NotificationMessages
 */
export interface NotificationMessages {
    /**
     *
     * @type {MessageTemplate}
     * @memberof NotificationMessages
     */
    'sign_up': MessageTemplate;
    /**
     *
     * @type {MessageTemplate}
     * @memberof NotificationMessages
     */
    'create_user': MessageTemplate;
    /**
     *
     * @type {MessageTemplate}
     * @memberof NotificationMessages
     */
    'resend_code': MessageTemplate;
    /**
     *
     * @type {MessageTemplate}
     * @memberof NotificationMessages
     */
    'forgot_password': MessageTemplate;
    /**
     *
     * @type {MessageTemplate}
     * @memberof NotificationMessages
     */
    'update_user_attribute': MessageTemplate;
    /**
     *
     * @type {MessageTemplate}
     * @memberof NotificationMessages
     */
    'verify_user_attribute': MessageTemplate;
    /**
     *
     * @type {MessageTemplate}
     * @memberof NotificationMessages
     */
    'authentication_mfa': MessageTemplate;
    /**
     *
     * @type {MessageTemplate}
     * @memberof NotificationMessages
     */
    'invite_tenant_user': MessageTemplate;
    /**
     *
     * @type {MessageTemplate}
     * @memberof NotificationMessages
     */
    'verify_external_user': MessageTemplate;
}
/**
 * Password Policy
 * @export
 * @interface PasswordPolicy
 */
export interface PasswordPolicy {
    /**
     * Minimum number of characters
     * @type {number}
     * @memberof PasswordPolicy
     */
    'minimum_length': number;
    /**
     * Contains one or more lowercase characters
     * @type {boolean}
     * @memberof PasswordPolicy
     */
    'is_require_lowercase': boolean;
    /**
     * Contains one or more numeric characters
     * @type {boolean}
     * @memberof PasswordPolicy
     */
    'is_require_numbers': boolean;
    /**
     * Contains one or more special characters
     * @type {boolean}
     * @memberof PasswordPolicy
     */
    'is_require_symbols': boolean;
    /**
     * Contains one or more uppercase letters
     * @type {boolean}
     * @memberof PasswordPolicy
     */
    'is_require_uppercase': boolean;
    /**
     * Temporary password expiration date
     * @type {number}
     * @memberof PasswordPolicy
     */
    'temporary_password_validity_days': number;
}
/**
 *
 * @export
 * @interface PlanHistories
 */
export interface PlanHistories {
    /**
     * Plan History
     * @type {Array<PlanHistory>}
     * @memberof PlanHistories
     */
    'plan_histories': Array<PlanHistory>;
}
/**
 *
 * @export
 * @interface PlanHistory
 */
export interface PlanHistory {
    /**
     *
     * @type {string}
     * @memberof PlanHistory
     */
    'plan_id': string;
    /**
     * Registration date
     * @type {number}
     * @memberof PlanHistory
     */
    'plan_applied_at': number;
    /**
     *
     * @type {string}
     * @memberof PlanHistory
     */
    'tax_rate_id'?: string;
    /**
     *
     * @type {ProrationBehavior}
     * @memberof PlanHistory
     */
    'proration_behavior'?: ProrationBehavior;
    /**
     * If you have a stripe linkage,  you can set whether to delete pay-as-you-go items when changing plans. When you change plan, you can remove all pay-as-you-go items included in your current subscription to stop being billed based on pay-as-you-go items. The recorded usage is cleared immediately. Since it cannot be restored, please note that plan change reservations with delete_usage set to true cannot be canceled.
     * @type {boolean}
     * @memberof PlanHistory
     */
    'delete_usage'?: boolean;
}
/**
 *
 * @export
 * @interface PlanReservation
 */
export interface PlanReservation {
    /**
     *
     * @type {string}
     * @memberof PlanReservation
     */
    'next_plan_id'?: string;
    /**
     * Next billing plan start time (When using stripe, you can create a subscription that starts at the beginning of the current month by specifying 00:00 (UTC) at the beginning of the current month. Ex. 1672531200 for January 2023.)
     * @type {number}
     * @memberof PlanReservation
     */
    'using_next_plan_from'?: number;
    /**
     *
     * @type {string}
     * @memberof PlanReservation
     */
    'next_plan_tax_rate_id'?: string;
    /**
     *
     * @type {ProrationBehavior}
     * @memberof PlanReservation
     */
    'proration_behavior'?: ProrationBehavior;
    /**
     * If you have a stripe linkage,  you can set whether to delete pay-as-you-go items when changing plans. When you change plan, you can remove all pay-as-you-go items included in your current subscription to stop being billed based on pay-as-you-go items. The recorded usage is cleared immediately. Since it cannot be restored, please note that plan change reservations with delete_usage set to true cannot be canceled.
     * @type {boolean}
     * @memberof PlanReservation
     */
    'delete_usage'?: boolean;
}
/**
 * If you have a strine linkage, you can set the behavior of the proportional allocation when changing plans. When a plan is changed, you can set whether to prorate the billing amount and reflect it on the next invoice, to issue a prorated invoice immediately, or not to prorate at all.
 * @export
 * @enum {string}
 */
export declare const ProrationBehavior: {
    readonly CreateProrations: "create_prorations";
    readonly None: "none";
    readonly AlwaysInvoice: "always_invoice";
};
export declare type ProrationBehavior = typeof ProrationBehavior[keyof typeof ProrationBehavior];
/**
 *
 * @export
 * @enum {string}
 */
export declare const ProviderName: {
    readonly Google: "Google";
};
export declare type ProviderName = typeof ProviderName[keyof typeof ProviderName];
/**
 *
 * @export
 * @enum {string}
 */
export declare const ProviderType: {
    readonly Saml: "SAML";
};
export declare type ProviderType = typeof ProviderType[keyof typeof ProviderType];
/**
 * reCAPTCHA authentication settings ※ This function is not yet provided, so it cannot be changed or saved.
 * @export
 * @interface RecaptchaProps
 */
export interface RecaptchaProps {
    /**
     * site key
     * @type {string}
     * @memberof RecaptchaProps
     */
    'site_key': string;
    /**
     * secret key
     * @type {string}
     * @memberof RecaptchaProps
     */
    'secret_key': string;
}
/**
 *
 * @export
 * @interface RequestEmailUpdateParam
 */
export interface RequestEmailUpdateParam {
    /**
     * Email Address
     * @type {string}
     * @memberof RequestEmailUpdateParam
     */
    'email': string;
    /**
     *
     * @type {string}
     * @memberof RequestEmailUpdateParam
     */
    'access_token': string;
}
/**
 *
 * @export
 * @interface RequestExternalUserLinkParam
 */
export interface RequestExternalUserLinkParam {
    /**
     *
     * @type {string}
     * @memberof RequestExternalUserLinkParam
     */
    'access_token': string;
}
/**
 *
 * @export
 * @interface ResendSignUpConfirmationEmailParam
 */
export interface ResendSignUpConfirmationEmailParam {
    /**
     * Email Address
     * @type {string}
     * @memberof ResendSignUpConfirmationEmailParam
     */
    'email': string;
}
/**
 * role info
 * @export
 * @interface Role
 */
export interface Role {
    /**
     * role name
     * @type {string}
     * @memberof Role
     */
    'role_name': string;
    /**
     * role display name
     * @type {string}
     * @memberof Role
     */
    'display_name': string;
}
/**
 *
 * @export
 * @interface Roles
 */
export interface Roles {
    /**
     *
     * @type {Array<Role>}
     * @memberof Roles
     */
    'roles': Array<Role>;
}
/**
 *
 * @export
 * @interface SaasId
 */
export interface SaasId {
    /**
     *
     * @type {string}
     * @memberof SaasId
     */
    'tenant_id': string;
    /**
     *
     * @type {number}
     * @memberof SaasId
     */
    'env_id': number;
    /**
     * SaaS ID
     * @type {string}
     * @memberof SaasId
     */
    'saas_id': string;
}
/**
 *
 * @export
 * @interface SaasUser
 */
export interface SaasUser {
    /**
     *
     * @type {string}
     * @memberof SaasUser
     */
    'id': string;
    /**
     * E-mail
     * @type {string}
     * @memberof SaasUser
     */
    'email': string;
}
/**
 *
 * @export
 * @interface SaasUsers
 */
export interface SaasUsers {
    /**
     *
     * @type {Array<SaasUser>}
     * @memberof SaasUsers
     */
    'users': Array<SaasUser>;
}
/**
 * self sign-up permission
 * @export
 * @interface SelfRegist
 */
export interface SelfRegist {
    /**
     *
     * @type {boolean}
     * @memberof SelfRegist
     */
    'enable': boolean;
}
/**
 *
 * @export
 * @interface SignInSettings
 */
export interface SignInSettings {
    /**
     *
     * @type {PasswordPolicy}
     * @memberof SignInSettings
     */
    'password_policy': PasswordPolicy;
    /**
     *
     * @type {DeviceConfiguration}
     * @memberof SignInSettings
     */
    'device_configuration': DeviceConfiguration;
    /**
     *
     * @type {MfaConfiguration}
     * @memberof SignInSettings
     */
    'mfa_configuration': MfaConfiguration;
    /**
     *
     * @type {RecaptchaProps}
     * @memberof SignInSettings
     */
    'recaptcha_props': RecaptchaProps;
    /**
     *
     * @type {AccountVerification}
     * @memberof SignInSettings
     */
    'account_verification': AccountVerification;
    /**
     *
     * @type {SelfRegist}
     * @memberof SignInSettings
     */
    'self_regist': SelfRegist;
    /**
     *
     * @type {IdentityProviderConfiguration}
     * @memberof SignInSettings
     */
    'identity_provider_configuration': IdentityProviderConfiguration;
}
/**
 *
 * @export
 * @interface SignUpParam
 */
export interface SignUpParam {
    /**
     * Email Address
     * @type {string}
     * @memberof SignUpParam
     */
    'email': string;
}
/**
 *
 * @export
 * @interface SignUpWithAwsMarketplaceParam
 */
export interface SignUpWithAwsMarketplaceParam {
    /**
     * Email Address
     * @type {string}
     * @memberof SignUpWithAwsMarketplaceParam
     */
    'email': string;
    /**
     * Registration Token
     * @type {string}
     * @memberof SignUpWithAwsMarketplaceParam
     */
    'registration_token': string;
}
/**
 *
 * @export
 * @interface SoftwareTokenSecretCode
 */
export interface SoftwareTokenSecretCode {
    /**
     * secret code
     * @type {string}
     * @memberof SoftwareTokenSecretCode
     */
    'secret_code': string;
}
/**
 *
 * @export
 * @interface Tenant
 */
export interface Tenant {
    /**
     *
     * @type {string}
     * @memberof Tenant
     */
    'id': string;
    /**
     *
     * @type {string}
     * @memberof Tenant
     */
    'plan_id'?: string;
    /**
     *
     * @type {BillingInfo}
     * @memberof Tenant
     */
    'billing_info'?: BillingInfo;
    /**
     * tenant name
     * @type {string}
     * @memberof Tenant
     */
    'name': string;
    /**
     * attribute info
     * @type {{ [key: string]: any; }}
     * @memberof Tenant
     */
    'attributes': {
        [key: string]: any;
    };
    /**
     * administrative staff email address
     * @type {string}
     * @memberof Tenant
     */
    'back_office_staff_email': string;
    /**
     *
     * @type {string}
     * @memberof Tenant
     */
    'next_plan_id'?: string;
    /**
     * Next billing plan start time (When using stripe, you can create a subscription that starts at the beginning of the current month by specifying 00:00 (UTC) at the beginning of the current month. Ex. 1672531200 for January 2023.)
     * @type {number}
     * @memberof Tenant
     */
    'using_next_plan_from'?: number;
    /**
     *
     * @type {string}
     * @memberof Tenant
     */
    'next_plan_tax_rate_id'?: string;
    /**
     *
     * @type {ProrationBehavior}
     * @memberof Tenant
     */
    'proration_behavior'?: ProrationBehavior;
    /**
     * If you have a stripe linkage,  you can set whether to delete pay-as-you-go items when changing plans. When you change plan, you can remove all pay-as-you-go items included in your current subscription to stop being billed based on pay-as-you-go items. The recorded usage is cleared immediately. Since it cannot be restored, please note that plan change reservations with delete_usage set to true cannot be canceled.
     * @type {boolean}
     * @memberof Tenant
     */
    'delete_usage'?: boolean;
    /**
     * Plan History
     * @type {Array<PlanHistory>}
     * @memberof Tenant
     */
    'plan_histories': Array<PlanHistory>;
}
/**
 *
 * @export
 * @interface TenantAllOf
 */
export interface TenantAllOf {
    /**
     *
     * @type {string}
     * @memberof TenantAllOf
     */
    'id': string;
    /**
     *
     * @type {string}
     * @memberof TenantAllOf
     */
    'plan_id'?: string;
    /**
     *
     * @type {BillingInfo}
     * @memberof TenantAllOf
     */
    'billing_info'?: BillingInfo;
}
/**
 *
 * @export
 * @interface TenantAttributes
 */
export interface TenantAttributes {
    /**
     * Tenant Attribute Definition
     * @type {Array<Attribute>}
     * @memberof TenantAttributes
     */
    'tenant_attributes': Array<Attribute>;
}
/**
 *
 * @export
 * @interface TenantDetail
 */
export interface TenantDetail {
    /**
     * current plan period start
     * @type {number}
     * @memberof TenantDetail
     */
    'current_plan_period_start'?: number;
    /**
     * current plan period end
     * @type {number}
     * @memberof TenantDetail
     */
    'current_plan_period_end'?: number;
    /**
     *
     * @type {string}
     * @memberof TenantDetail
     */
    'id': string;
    /**
     *
     * @type {string}
     * @memberof TenantDetail
     */
    'plan_id'?: string;
    /**
     *
     * @type {BillingInfo}
     * @memberof TenantDetail
     */
    'billing_info'?: BillingInfo;
    /**
     * tenant name
     * @type {string}
     * @memberof TenantDetail
     */
    'name': string;
    /**
     * attribute info
     * @type {{ [key: string]: any; }}
     * @memberof TenantDetail
     */
    'attributes': {
        [key: string]: any;
    };
    /**
     * administrative staff email address
     * @type {string}
     * @memberof TenantDetail
     */
    'back_office_staff_email': string;
    /**
     *
     * @type {string}
     * @memberof TenantDetail
     */
    'next_plan_id'?: string;
    /**
     * Next billing plan start time (When using stripe, you can create a subscription that starts at the beginning of the current month by specifying 00:00 (UTC) at the beginning of the current month. Ex. 1672531200 for January 2023.)
     * @type {number}
     * @memberof TenantDetail
     */
    'using_next_plan_from'?: number;
    /**
     *
     * @type {string}
     * @memberof TenantDetail
     */
    'next_plan_tax_rate_id'?: string;
    /**
     *
     * @type {ProrationBehavior}
     * @memberof TenantDetail
     */
    'proration_behavior'?: ProrationBehavior;
    /**
     * If you have a stripe linkage,  you can set whether to delete pay-as-you-go items when changing plans. When you change plan, you can remove all pay-as-you-go items included in your current subscription to stop being billed based on pay-as-you-go items. The recorded usage is cleared immediately. Since it cannot be restored, please note that plan change reservations with delete_usage set to true cannot be canceled.
     * @type {boolean}
     * @memberof TenantDetail
     */
    'delete_usage'?: boolean;
    /**
     * Plan History
     * @type {Array<PlanHistory>}
     * @memberof TenantDetail
     */
    'plan_histories': Array<PlanHistory>;
}
/**
 *
 * @export
 * @interface TenantDetailAllOf
 */
export interface TenantDetailAllOf {
    /**
     * current plan period start
     * @type {number}
     * @memberof TenantDetailAllOf
     */
    'current_plan_period_start'?: number;
    /**
     * current plan period end
     * @type {number}
     * @memberof TenantDetailAllOf
     */
    'current_plan_period_end'?: number;
}
/**
 * @type TenantIdentityProviderProps
 * @export
 */
export declare type TenantIdentityProviderProps = IdentityProviderSaml;
/**
 *
 * @export
 * @interface TenantIdentityProviders
 */
export interface TenantIdentityProviders {
    /**
     *
     * @type {TenantIdentityProvidersSaml}
     * @memberof TenantIdentityProviders
     */
    'saml'?: TenantIdentityProvidersSaml;
}
/**
 *
 * @export
 * @interface TenantIdentityProvidersSaml
 */
export interface TenantIdentityProvidersSaml {
    /**
     *
     * @type {string}
     * @memberof TenantIdentityProvidersSaml
     */
    'sign_in_url': string;
    /**
     *
     * @type {string}
     * @memberof TenantIdentityProvidersSaml
     */
    'metadata_url': string;
    /**
     *
     * @type {string}
     * @memberof TenantIdentityProvidersSaml
     */
    'email_attribute': string;
}
/**
 *
 * @export
 * @interface TenantIdentityProvidersSamlAllOf
 */
export interface TenantIdentityProvidersSamlAllOf {
    /**
     *
     * @type {string}
     * @memberof TenantIdentityProvidersSamlAllOf
     */
    'sign_in_url': string;
}
/**
 *
 * @export
 * @interface TenantProps
 */
export interface TenantProps {
    /**
     * tenant name
     * @type {string}
     * @memberof TenantProps
     */
    'name': string;
    /**
     * attribute info
     * @type {{ [key: string]: any; }}
     * @memberof TenantProps
     */
    'attributes': {
        [key: string]: any;
    };
    /**
     * administrative staff email address
     * @type {string}
     * @memberof TenantProps
     */
    'back_office_staff_email': string;
}
/**
 * Tenant Info
 * @export
 * @interface Tenants
 */
export interface Tenants {
    /**
     *
     * @type {Array<Tenant>}
     * @memberof Tenants
     */
    'tenants': Array<Tenant>;
}
/**
 *
 * @export
 * @interface UpdateBasicInfoParam
 */
export interface UpdateBasicInfoParam {
    /**
     * Domain Name
     * @type {string}
     * @memberof UpdateBasicInfoParam
     */
    'domain_name': string;
    /**
     * Sender email of authentication email
     * @type {string}
     * @memberof UpdateBasicInfoParam
     */
    'from_email_address': string;
    /**
     * Reply-from email address of authentication email
     * @type {string}
     * @memberof UpdateBasicInfoParam
     */
    'reply_email_address'?: string;
}
/**
 *
 * @export
 * @interface UpdateCustomizePageSettingsParam
 */
export interface UpdateCustomizePageSettingsParam {
    /**
     * service icon
     * @type {string}
     * @memberof UpdateCustomizePageSettingsParam
     */
    'icon': string;
    /**
     * favicon
     * @type {string}
     * @memberof UpdateCustomizePageSettingsParam
     */
    'favicon': string;
    /**
     * service name
     * @type {string}
     * @memberof UpdateCustomizePageSettingsParam
     */
    'title': string;
    /**
     * terms of service URL
     * @type {string}
     * @memberof UpdateCustomizePageSettingsParam
     */
    'terms_of_service_url': string;
    /**
     * privacy policy URL
     * @type {string}
     * @memberof UpdateCustomizePageSettingsParam
     */
    'privacy_policy_url': string;
    /**
     * Google Tag Manager container ID
     * @type {string}
     * @memberof UpdateCustomizePageSettingsParam
     */
    'google_tag_manager_container_id': string;
}
/**
 *
 * @export
 * @interface UpdateCustomizePageSettingsParamAllOf
 */
export interface UpdateCustomizePageSettingsParamAllOf {
    /**
     * service icon
     * @type {string}
     * @memberof UpdateCustomizePageSettingsParamAllOf
     */
    'icon': string;
    /**
     * favicon
     * @type {string}
     * @memberof UpdateCustomizePageSettingsParamAllOf
     */
    'favicon': string;
}
/**
 *
 * @export
 * @interface UpdateCustomizePagesParam
 */
export interface UpdateCustomizePagesParam {
    /**
     *
     * @type {CustomizePageProps}
     * @memberof UpdateCustomizePagesParam
     */
    'sign_up_page'?: CustomizePageProps;
    /**
     *
     * @type {CustomizePageProps}
     * @memberof UpdateCustomizePagesParam
     */
    'sign_in_page'?: CustomizePageProps;
    /**
     *
     * @type {CustomizePageProps}
     * @memberof UpdateCustomizePagesParam
     */
    'password_reset_page'?: CustomizePageProps;
}
/**
 *
 * @export
 * @interface UpdateEnvParam
 */
export interface UpdateEnvParam {
    /**
     * env name
     * @type {string}
     * @memberof UpdateEnvParam
     */
    'name': string;
    /**
     * env display name
     * @type {string}
     * @memberof UpdateEnvParam
     */
    'display_name'?: string;
}
/**
 *
 * @export
 * @interface UpdateIdentityProviderParam
 */
export interface UpdateIdentityProviderParam {
    /**
     *
     * @type {ProviderName}
     * @memberof UpdateIdentityProviderParam
     */
    'provider': ProviderName;
    /**
     *
     * @type {IdentityProviderProps}
     * @memberof UpdateIdentityProviderParam
     */
    'identity_provider_props'?: IdentityProviderProps;
}
/**
 *
 * @export
 * @interface UpdateNotificationMessagesParam
 */
export interface UpdateNotificationMessagesParam {
    /**
     *
     * @type {MessageTemplate}
     * @memberof UpdateNotificationMessagesParam
     */
    'sign_up'?: MessageTemplate;
    /**
     *
     * @type {MessageTemplate}
     * @memberof UpdateNotificationMessagesParam
     */
    'create_user'?: MessageTemplate;
    /**
     *
     * @type {MessageTemplate}
     * @memberof UpdateNotificationMessagesParam
     */
    'resend_code'?: MessageTemplate;
    /**
     *
     * @type {MessageTemplate}
     * @memberof UpdateNotificationMessagesParam
     */
    'forgot_password'?: MessageTemplate;
    /**
     *
     * @type {MessageTemplate}
     * @memberof UpdateNotificationMessagesParam
     */
    'update_user_attribute'?: MessageTemplate;
    /**
     *
     * @type {MessageTemplate}
     * @memberof UpdateNotificationMessagesParam
     */
    'verify_user_attribute'?: MessageTemplate;
    /**
     *
     * @type {MessageTemplate}
     * @memberof UpdateNotificationMessagesParam
     */
    'authentication_mfa'?: MessageTemplate;
    /**
     *
     * @type {MessageTemplate}
     * @memberof UpdateNotificationMessagesParam
     */
    'invite_tenant_user'?: MessageTemplate;
    /**
     *
     * @type {MessageTemplate}
     * @memberof UpdateNotificationMessagesParam
     */
    'verify_external_user'?: MessageTemplate;
}
/**
 *
 * @export
 * @interface UpdateSaasUserEmailParam
 */
export interface UpdateSaasUserEmailParam {
    /**
     * E-mail
     * @type {string}
     * @memberof UpdateSaasUserEmailParam
     */
    'email': string;
}
/**
 *
 * @export
 * @interface UpdateSaasUserPasswordParam
 */
export interface UpdateSaasUserPasswordParam {
    /**
     * Password
     * @type {string}
     * @memberof UpdateSaasUserPasswordParam
     */
    'password': string;
}
/**
 *
 * @export
 * @interface UpdateSignInSettingsParam
 */
export interface UpdateSignInSettingsParam {
    /**
     *
     * @type {PasswordPolicy}
     * @memberof UpdateSignInSettingsParam
     */
    'password_policy'?: PasswordPolicy;
    /**
     *
     * @type {DeviceConfiguration}
     * @memberof UpdateSignInSettingsParam
     */
    'device_configuration'?: DeviceConfiguration;
    /**
     *
     * @type {MfaConfiguration}
     * @memberof UpdateSignInSettingsParam
     */
    'mfa_configuration'?: MfaConfiguration;
    /**
     *
     * @type {RecaptchaProps}
     * @memberof UpdateSignInSettingsParam
     */
    'recaptcha_props'?: RecaptchaProps;
    /**
     *
     * @type {AccountVerification}
     * @memberof UpdateSignInSettingsParam
     */
    'account_verification'?: AccountVerification;
    /**
     *
     * @type {SelfRegist}
     * @memberof UpdateSignInSettingsParam
     */
    'self_regist'?: SelfRegist;
}
/**
 *
 * @export
 * @interface UpdateSoftwareTokenParam
 */
export interface UpdateSoftwareTokenParam {
    /**
     * access token
     * @type {string}
     * @memberof UpdateSoftwareTokenParam
     */
    'access_token': string;
    /**
     * verification code
     * @type {string}
     * @memberof UpdateSoftwareTokenParam
     */
    'verification_code': string;
}
/**
 * If identity_provider_props is null, the sign-in information for the external identity provider specified in provider_type is disabled.
 * @export
 * @interface UpdateTenantIdentityProviderParam
 */
export interface UpdateTenantIdentityProviderParam {
    /**
     *
     * @type {ProviderType}
     * @memberof UpdateTenantIdentityProviderParam
     */
    'provider_type': ProviderType;
    /**
     *
     * @type {TenantIdentityProviderProps}
     * @memberof UpdateTenantIdentityProviderParam
     */
    'identity_provider_props'?: TenantIdentityProviderProps;
}
/**
 *
 * @export
 * @interface UpdateTenantUserParam
 */
export interface UpdateTenantUserParam {
    /**
     * Attribute information (Get information set by defining user attributes in the SaaS development console)
     * @type {{ [key: string]: any; }}
     * @memberof UpdateTenantUserParam
     */
    'attributes': {
        [key: string]: any;
    };
}
/**
 *
 * @export
 * @interface User
 */
export interface User {
    /**
     * User ID
     * @type {string}
     * @memberof User
     */
    'id': string;
    /**
     *
     * @type {string}
     * @memberof User
     */
    'tenant_id': string;
    /**
     * Tenant Name
     * @type {string}
     * @memberof User
     */
    'tenant_name': string;
    /**
     * E-mail
     * @type {string}
     * @memberof User
     */
    'email': string;
    /**
     * Attribute information (Get information set by defining user attributes in the SaaS development console)
     * @type {{ [key: string]: any; }}
     * @memberof User
     */
    'attributes': {
        [key: string]: any;
    };
    /**
     *
     * @type {Array<UserAvailableEnv>}
     * @memberof User
     */
    'envs': Array<UserAvailableEnv>;
}
/**
 *
 * @export
 * @interface UserAttributes
 */
export interface UserAttributes {
    /**
     * User Attribute Definition
     * @type {Array<Attribute>}
     * @memberof UserAttributes
     */
    'user_attributes': Array<Attribute>;
}
/**
 *
 * @export
 * @interface UserAvailableEnv
 */
export interface UserAvailableEnv {
    /**
     *
     * @type {number}
     * @memberof UserAvailableEnv
     */
    'id': number;
    /**
     * env name
     * @type {string}
     * @memberof UserAvailableEnv
     */
    'name': string;
    /**
     * env display name
     * @type {string}
     * @memberof UserAvailableEnv
     */
    'display_name'?: string;
    /**
     * role info
     * @type {Array<Role>}
     * @memberof UserAvailableEnv
     */
    'roles': Array<Role>;
}
/**
 *
 * @export
 * @interface UserAvailableTenant
 */
export interface UserAvailableTenant {
    /**
     *
     * @type {string}
     * @memberof UserAvailableTenant
     */
    'id': string;
    /**
     * Tenant Name
     * @type {string}
     * @memberof UserAvailableTenant
     */
    'name': string;
    /**
     *
     * @type {boolean}
     * @memberof UserAvailableTenant
     */
    'completed_sign_up': boolean;
    /**
     * environmental info, role info
     * @type {Array<UserAvailableEnv>}
     * @memberof UserAvailableTenant
     */
    'envs': Array<UserAvailableEnv>;
    /**
     * user additional attributes
     * @type {{ [key: string]: any; }}
     * @memberof UserAvailableTenant
     */
    'user_attribute': {
        [key: string]: any;
    };
    /**
     * back office contact email
     * @type {string}
     * @memberof UserAvailableTenant
     */
    'back_office_staff_email': string;
    /**
     *
     * @type {string}
     * @memberof UserAvailableTenant
     */
    'plan_id'?: string;
    /**
     * tenant payment status ※ Currently, it is returned only when stripe is linked.
     * @type {boolean}
     * @memberof UserAvailableTenant
     */
    'is_paid'?: boolean;
}
/**
 *
 * @export
 * @interface UserInfo
 */
export interface UserInfo {
    /**
     *
     * @type {string}
     * @memberof UserInfo
     */
    'id': string;
    /**
     * E-mail
     * @type {string}
     * @memberof UserInfo
     */
    'email': string;
    /**
     * Tenant Info
     * @type {Array<UserAvailableTenant>}
     * @memberof UserInfo
     */
    'tenants': Array<UserAvailableTenant>;
}
/**
 *
 * @export
 * @interface Users
 */
export interface Users {
    /**
     *
     * @type {Array<User>}
     * @memberof Users
     */
    'users': Array<User>;
}
/**
 * Access token is required for existing users, and email and password is required for new users.
 * @export
 * @interface ValidateInvitationParam
 */
export interface ValidateInvitationParam {
    /**
     * Access token of the invited user
     * @type {string}
     * @memberof ValidateInvitationParam
     */
    'access_token'?: string;
    /**
     * Email address of the invited user
     * @type {string}
     * @memberof ValidateInvitationParam
     */
    'email'?: string;
    /**
     * Password of the invited user
     * @type {string}
     * @memberof ValidateInvitationParam
     */
    'password'?: string;
}
/**
 * AuthInfoApi - axios parameter creator
 * @export
 */
export declare const AuthInfoApiAxiosParamCreator: (configuration?: Configuration | undefined) => {
    /**
     * Get the post-login SaaS URL that contains authentication information. You can pass authentication information to the URL obtained here and implement this Callback using the SaaSus SDK.
     * @summary Get Authentication Info
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAuthInfo: (options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Get sign-in information via external provider set in cognito.
     * @summary Get Sign-In Information Via External Provider
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getIdentityProviders: (options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Get user password requirements. Set a secure password that is difficult to decipher by increasing the number of digits by combining alphabets, numbers, and symbols.
     * @summary Get Password Requirements
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getSignInSettings: (options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Register post-login SaaS URL for authentication information. It is possible to pass authentication information to the URL registered here and implement this Callback using the SaaSus SDK.
     * @summary Update Authentication Info
     * @param {AuthInfo} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateAuthInfo: (body?: AuthInfo | undefined, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Update the sign-in information for the external ID provider
     * @summary Update Sign-In Information
     * @param {UpdateIdentityProviderParam} [updateIdentityProviderParam]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateIdentityProvider: (updateIdentityProviderParam?: UpdateIdentityProviderParam | undefined, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Update user password requirements. Set a secure password that is difficult to decipher by increasing the number of digits by combining alphabets, numbers, and symbols.
     * @summary Update Password Requirements
     * @param {UpdateSignInSettingsParam} [updateSignInSettingsParam]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateSignInSettings: (updateSignInSettingsParam?: UpdateSignInSettingsParam | undefined, options?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * AuthInfoApi - functional programming interface
 * @export
 */
export declare const AuthInfoApiFp: (configuration?: Configuration | undefined) => {
    /**
     * Get the post-login SaaS URL that contains authentication information. You can pass authentication information to the URL obtained here and implement this Callback using the SaaSus SDK.
     * @summary Get Authentication Info
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAuthInfo(options?: AxiosRequestConfig<any> | undefined): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<AuthInfo>>;
    /**
     * Get sign-in information via external provider set in cognito.
     * @summary Get Sign-In Information Via External Provider
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getIdentityProviders(options?: AxiosRequestConfig<any> | undefined): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<IdentityProviders>>;
    /**
     * Get user password requirements. Set a secure password that is difficult to decipher by increasing the number of digits by combining alphabets, numbers, and symbols.
     * @summary Get Password Requirements
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getSignInSettings(options?: AxiosRequestConfig<any> | undefined): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<SignInSettings>>;
    /**
     * Register post-login SaaS URL for authentication information. It is possible to pass authentication information to the URL registered here and implement this Callback using the SaaSus SDK.
     * @summary Update Authentication Info
     * @param {AuthInfo} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateAuthInfo(body?: AuthInfo | undefined, options?: AxiosRequestConfig<any> | undefined): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<void>>;
    /**
     * Update the sign-in information for the external ID provider
     * @summary Update Sign-In Information
     * @param {UpdateIdentityProviderParam} [updateIdentityProviderParam]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateIdentityProvider(updateIdentityProviderParam?: UpdateIdentityProviderParam | undefined, options?: AxiosRequestConfig<any> | undefined): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<void>>;
    /**
     * Update user password requirements. Set a secure password that is difficult to decipher by increasing the number of digits by combining alphabets, numbers, and symbols.
     * @summary Update Password Requirements
     * @param {UpdateSignInSettingsParam} [updateSignInSettingsParam]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateSignInSettings(updateSignInSettingsParam?: UpdateSignInSettingsParam | undefined, options?: AxiosRequestConfig<any> | undefined): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<void>>;
};
/**
 * AuthInfoApi - factory interface
 * @export
 */
export declare const AuthInfoApiFactory: (configuration?: Configuration | undefined, basePath?: string | undefined, axios?: AxiosInstance | undefined) => {
    /**
     * Get the post-login SaaS URL that contains authentication information. You can pass authentication information to the URL obtained here and implement this Callback using the SaaSus SDK.
     * @summary Get Authentication Info
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAuthInfo(options?: any): AxiosPromise<AuthInfo>;
    /**
     * Get sign-in information via external provider set in cognito.
     * @summary Get Sign-In Information Via External Provider
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getIdentityProviders(options?: any): AxiosPromise<IdentityProviders>;
    /**
     * Get user password requirements. Set a secure password that is difficult to decipher by increasing the number of digits by combining alphabets, numbers, and symbols.
     * @summary Get Password Requirements
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getSignInSettings(options?: any): AxiosPromise<SignInSettings>;
    /**
     * Register post-login SaaS URL for authentication information. It is possible to pass authentication information to the URL registered here and implement this Callback using the SaaSus SDK.
     * @summary Update Authentication Info
     * @param {AuthInfo} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateAuthInfo(body?: AuthInfo | undefined, options?: any): AxiosPromise<void>;
    /**
     * Update the sign-in information for the external ID provider
     * @summary Update Sign-In Information
     * @param {UpdateIdentityProviderParam} [updateIdentityProviderParam]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateIdentityProvider(updateIdentityProviderParam?: UpdateIdentityProviderParam | undefined, options?: any): AxiosPromise<void>;
    /**
     * Update user password requirements. Set a secure password that is difficult to decipher by increasing the number of digits by combining alphabets, numbers, and symbols.
     * @summary Update Password Requirements
     * @param {UpdateSignInSettingsParam} [updateSignInSettingsParam]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateSignInSettings(updateSignInSettingsParam?: UpdateSignInSettingsParam | undefined, options?: any): AxiosPromise<void>;
};
/**
 * AuthInfoApi - object-oriented interface
 * @export
 * @class AuthInfoApi
 * @extends {BaseAPI}
 */
export declare class AuthInfoApi extends BaseAPI {
    /**
     * Get the post-login SaaS URL that contains authentication information. You can pass authentication information to the URL obtained here and implement this Callback using the SaaSus SDK.
     * @summary Get Authentication Info
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthInfoApi
     */
    getAuthInfo(options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<AuthInfo, any>>;
    /**
     * Get sign-in information via external provider set in cognito.
     * @summary Get Sign-In Information Via External Provider
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthInfoApi
     */
    getIdentityProviders(options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<IdentityProviders, any>>;
    /**
     * Get user password requirements. Set a secure password that is difficult to decipher by increasing the number of digits by combining alphabets, numbers, and symbols.
     * @summary Get Password Requirements
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthInfoApi
     */
    getSignInSettings(options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<SignInSettings, any>>;
    /**
     * Register post-login SaaS URL for authentication information. It is possible to pass authentication information to the URL registered here and implement this Callback using the SaaSus SDK.
     * @summary Update Authentication Info
     * @param {AuthInfo} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthInfoApi
     */
    updateAuthInfo(body?: AuthInfo, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * Update the sign-in information for the external ID provider
     * @summary Update Sign-In Information
     * @param {UpdateIdentityProviderParam} [updateIdentityProviderParam]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthInfoApi
     */
    updateIdentityProvider(updateIdentityProviderParam?: UpdateIdentityProviderParam, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * Update user password requirements. Set a secure password that is difficult to decipher by increasing the number of digits by combining alphabets, numbers, and symbols.
     * @summary Update Password Requirements
     * @param {UpdateSignInSettingsParam} [updateSignInSettingsParam]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthInfoApi
     */
    updateSignInSettings(updateSignInSettingsParam?: UpdateSignInSettingsParam, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
}
/**
 * BasicInfoApi - axios parameter creator
 * @export
 */
export declare const BasicInfoApiAxiosParamCreator: (configuration?: Configuration | undefined) => {
    /**
     * Get notification email templates.
     * @summary Get Notification Email Templates
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    findNotificationMessages: (options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Get the domain name and CNAME record based on the SaaS ID. By setting the CNAME record on the DNS the login screen will be generated.
     * @summary Get Basic Configurations
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getBasicInfo: (options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Get authentication authorization basic information.
     * @summary Get Authentication Authorization Basic Information
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCustomizePageSettings: (options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Get the authentication screen setting information (new registration, login, password reset, etc.).
     * @summary Get Authentication Page Setting
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCustomizePages: (options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Update the domain name that was set as a parameter based on the SaaS ID. After the CNAME record is generated, set it in your DNS. If it is set on a SaaS application that is already running, it will affect the behavior.
     * @summary Update Basic Configurations
     * @param {UpdateBasicInfoParam} [updateBasicInfoParam]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateBasicInfo: (updateBasicInfoParam?: UpdateBasicInfoParam | undefined, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Update authentication authorization basic information.
     * @summary Update Authentication Authorization Basic Information
     * @param {UpdateCustomizePageSettingsParam} [updateCustomizePageSettingsParam]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateCustomizePageSettings: (updateCustomizePageSettingsParam?: UpdateCustomizePageSettingsParam | undefined, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Update the authentication page setting information (new registration, login, password reset, etc.).
     * @summary Authentication Page Setting
     * @param {UpdateCustomizePagesParam} [updateCustomizePagesParam]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateCustomizePages: (updateCustomizePagesParam?: UpdateCustomizePagesParam | undefined, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Update notification email template.
     * @summary Update Notification Email Template
     * @param {UpdateNotificationMessagesParam} [updateNotificationMessagesParam]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateNotificationMessages: (updateNotificationMessagesParam?: UpdateNotificationMessagesParam | undefined, options?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * BasicInfoApi - functional programming interface
 * @export
 */
export declare const BasicInfoApiFp: (configuration?: Configuration | undefined) => {
    /**
     * Get notification email templates.
     * @summary Get Notification Email Templates
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    findNotificationMessages(options?: AxiosRequestConfig<any> | undefined): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<NotificationMessages>>;
    /**
     * Get the domain name and CNAME record based on the SaaS ID. By setting the CNAME record on the DNS the login screen will be generated.
     * @summary Get Basic Configurations
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getBasicInfo(options?: AxiosRequestConfig<any> | undefined): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<BasicInfo>>;
    /**
     * Get authentication authorization basic information.
     * @summary Get Authentication Authorization Basic Information
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCustomizePageSettings(options?: AxiosRequestConfig<any> | undefined): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<CustomizePageSettings>>;
    /**
     * Get the authentication screen setting information (new registration, login, password reset, etc.).
     * @summary Get Authentication Page Setting
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCustomizePages(options?: AxiosRequestConfig<any> | undefined): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<CustomizePages>>;
    /**
     * Update the domain name that was set as a parameter based on the SaaS ID. After the CNAME record is generated, set it in your DNS. If it is set on a SaaS application that is already running, it will affect the behavior.
     * @summary Update Basic Configurations
     * @param {UpdateBasicInfoParam} [updateBasicInfoParam]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateBasicInfo(updateBasicInfoParam?: UpdateBasicInfoParam | undefined, options?: AxiosRequestConfig<any> | undefined): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<void>>;
    /**
     * Update authentication authorization basic information.
     * @summary Update Authentication Authorization Basic Information
     * @param {UpdateCustomizePageSettingsParam} [updateCustomizePageSettingsParam]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateCustomizePageSettings(updateCustomizePageSettingsParam?: UpdateCustomizePageSettingsParam | undefined, options?: AxiosRequestConfig<any> | undefined): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<void>>;
    /**
     * Update the authentication page setting information (new registration, login, password reset, etc.).
     * @summary Authentication Page Setting
     * @param {UpdateCustomizePagesParam} [updateCustomizePagesParam]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateCustomizePages(updateCustomizePagesParam?: UpdateCustomizePagesParam | undefined, options?: AxiosRequestConfig<any> | undefined): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<void>>;
    /**
     * Update notification email template.
     * @summary Update Notification Email Template
     * @param {UpdateNotificationMessagesParam} [updateNotificationMessagesParam]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateNotificationMessages(updateNotificationMessagesParam?: UpdateNotificationMessagesParam | undefined, options?: AxiosRequestConfig<any> | undefined): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<void>>;
};
/**
 * BasicInfoApi - factory interface
 * @export
 */
export declare const BasicInfoApiFactory: (configuration?: Configuration | undefined, basePath?: string | undefined, axios?: AxiosInstance | undefined) => {
    /**
     * Get notification email templates.
     * @summary Get Notification Email Templates
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    findNotificationMessages(options?: any): AxiosPromise<NotificationMessages>;
    /**
     * Get the domain name and CNAME record based on the SaaS ID. By setting the CNAME record on the DNS the login screen will be generated.
     * @summary Get Basic Configurations
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getBasicInfo(options?: any): AxiosPromise<BasicInfo>;
    /**
     * Get authentication authorization basic information.
     * @summary Get Authentication Authorization Basic Information
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCustomizePageSettings(options?: any): AxiosPromise<CustomizePageSettings>;
    /**
     * Get the authentication screen setting information (new registration, login, password reset, etc.).
     * @summary Get Authentication Page Setting
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCustomizePages(options?: any): AxiosPromise<CustomizePages>;
    /**
     * Update the domain name that was set as a parameter based on the SaaS ID. After the CNAME record is generated, set it in your DNS. If it is set on a SaaS application that is already running, it will affect the behavior.
     * @summary Update Basic Configurations
     * @param {UpdateBasicInfoParam} [updateBasicInfoParam]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateBasicInfo(updateBasicInfoParam?: UpdateBasicInfoParam | undefined, options?: any): AxiosPromise<void>;
    /**
     * Update authentication authorization basic information.
     * @summary Update Authentication Authorization Basic Information
     * @param {UpdateCustomizePageSettingsParam} [updateCustomizePageSettingsParam]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateCustomizePageSettings(updateCustomizePageSettingsParam?: UpdateCustomizePageSettingsParam | undefined, options?: any): AxiosPromise<void>;
    /**
     * Update the authentication page setting information (new registration, login, password reset, etc.).
     * @summary Authentication Page Setting
     * @param {UpdateCustomizePagesParam} [updateCustomizePagesParam]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateCustomizePages(updateCustomizePagesParam?: UpdateCustomizePagesParam | undefined, options?: any): AxiosPromise<void>;
    /**
     * Update notification email template.
     * @summary Update Notification Email Template
     * @param {UpdateNotificationMessagesParam} [updateNotificationMessagesParam]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateNotificationMessages(updateNotificationMessagesParam?: UpdateNotificationMessagesParam | undefined, options?: any): AxiosPromise<void>;
};
/**
 * BasicInfoApi - object-oriented interface
 * @export
 * @class BasicInfoApi
 * @extends {BaseAPI}
 */
export declare class BasicInfoApi extends BaseAPI {
    /**
     * Get notification email templates.
     * @summary Get Notification Email Templates
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BasicInfoApi
     */
    findNotificationMessages(options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<NotificationMessages, any>>;
    /**
     * Get the domain name and CNAME record based on the SaaS ID. By setting the CNAME record on the DNS the login screen will be generated.
     * @summary Get Basic Configurations
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BasicInfoApi
     */
    getBasicInfo(options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<BasicInfo, any>>;
    /**
     * Get authentication authorization basic information.
     * @summary Get Authentication Authorization Basic Information
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BasicInfoApi
     */
    getCustomizePageSettings(options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<CustomizePageSettings, any>>;
    /**
     * Get the authentication screen setting information (new registration, login, password reset, etc.).
     * @summary Get Authentication Page Setting
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BasicInfoApi
     */
    getCustomizePages(options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<CustomizePages, any>>;
    /**
     * Update the domain name that was set as a parameter based on the SaaS ID. After the CNAME record is generated, set it in your DNS. If it is set on a SaaS application that is already running, it will affect the behavior.
     * @summary Update Basic Configurations
     * @param {UpdateBasicInfoParam} [updateBasicInfoParam]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BasicInfoApi
     */
    updateBasicInfo(updateBasicInfoParam?: UpdateBasicInfoParam, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * Update authentication authorization basic information.
     * @summary Update Authentication Authorization Basic Information
     * @param {UpdateCustomizePageSettingsParam} [updateCustomizePageSettingsParam]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BasicInfoApi
     */
    updateCustomizePageSettings(updateCustomizePageSettingsParam?: UpdateCustomizePageSettingsParam, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * Update the authentication page setting information (new registration, login, password reset, etc.).
     * @summary Authentication Page Setting
     * @param {UpdateCustomizePagesParam} [updateCustomizePagesParam]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BasicInfoApi
     */
    updateCustomizePages(updateCustomizePagesParam?: UpdateCustomizePagesParam, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * Update notification email template.
     * @summary Update Notification Email Template
     * @param {UpdateNotificationMessagesParam} [updateNotificationMessagesParam]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BasicInfoApi
     */
    updateNotificationMessages(updateNotificationMessagesParam?: UpdateNotificationMessagesParam, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
}
/**
 * CredentialApi - axios parameter creator
 * @export
 */
export declare const CredentialApiAxiosParamCreator: (configuration?: Configuration | undefined) => {
    /**
     * Temporarily save the parameter for the ID token, access token, and refresh token and return a temporary code for obtaining. Temporary codes are valid for 10 seconds from issuance.
     * @summary Save Authentication/Authorization Information
     * @param {Credentials} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createAuthCredentials: (body?: Credentials | undefined, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Get ID token, access token, and refresh token using a temporary code or a refresh token.
     * @summary Get Authentication/Authorization Information
     * @param {string} [code] Temp Code
     * @param {'tempCodeAuth' | 'refreshTokenAuth'} [authFlow] Authentication Flow tempCodeAuth: Getting authentication information using a temporary code refreshTokenAuth: Getting authentication information using a refresh token If not specified, it will be tempCodeAuth
     * @param {string} [refreshToken] Refresh Token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAuthCredentials: (code?: string | undefined, authFlow?: "tempCodeAuth" | "refreshTokenAuth" | undefined, refreshToken?: string | undefined, options?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * CredentialApi - functional programming interface
 * @export
 */
export declare const CredentialApiFp: (configuration?: Configuration | undefined) => {
    /**
     * Temporarily save the parameter for the ID token, access token, and refresh token and return a temporary code for obtaining. Temporary codes are valid for 10 seconds from issuance.
     * @summary Save Authentication/Authorization Information
     * @param {Credentials} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createAuthCredentials(body?: Credentials | undefined, options?: AxiosRequestConfig<any> | undefined): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<AuthorizationTempCode>>;
    /**
     * Get ID token, access token, and refresh token using a temporary code or a refresh token.
     * @summary Get Authentication/Authorization Information
     * @param {string} [code] Temp Code
     * @param {'tempCodeAuth' | 'refreshTokenAuth'} [authFlow] Authentication Flow tempCodeAuth: Getting authentication information using a temporary code refreshTokenAuth: Getting authentication information using a refresh token If not specified, it will be tempCodeAuth
     * @param {string} [refreshToken] Refresh Token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAuthCredentials(code?: string | undefined, authFlow?: "tempCodeAuth" | "refreshTokenAuth" | undefined, refreshToken?: string | undefined, options?: AxiosRequestConfig<any> | undefined): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<Credentials>>;
};
/**
 * CredentialApi - factory interface
 * @export
 */
export declare const CredentialApiFactory: (configuration?: Configuration | undefined, basePath?: string | undefined, axios?: AxiosInstance | undefined) => {
    /**
     * Temporarily save the parameter for the ID token, access token, and refresh token and return a temporary code for obtaining. Temporary codes are valid for 10 seconds from issuance.
     * @summary Save Authentication/Authorization Information
     * @param {Credentials} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createAuthCredentials(body?: Credentials | undefined, options?: any): AxiosPromise<AuthorizationTempCode>;
    /**
     * Get ID token, access token, and refresh token using a temporary code or a refresh token.
     * @summary Get Authentication/Authorization Information
     * @param {string} [code] Temp Code
     * @param {'tempCodeAuth' | 'refreshTokenAuth'} [authFlow] Authentication Flow tempCodeAuth: Getting authentication information using a temporary code refreshTokenAuth: Getting authentication information using a refresh token If not specified, it will be tempCodeAuth
     * @param {string} [refreshToken] Refresh Token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAuthCredentials(code?: string | undefined, authFlow?: "tempCodeAuth" | "refreshTokenAuth" | undefined, refreshToken?: string | undefined, options?: any): AxiosPromise<Credentials>;
};
/**
 * CredentialApi - object-oriented interface
 * @export
 * @class CredentialApi
 * @extends {BaseAPI}
 */
export declare class CredentialApi extends BaseAPI {
    /**
     * Temporarily save the parameter for the ID token, access token, and refresh token and return a temporary code for obtaining. Temporary codes are valid for 10 seconds from issuance.
     * @summary Save Authentication/Authorization Information
     * @param {Credentials} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CredentialApi
     */
    createAuthCredentials(body?: Credentials, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<AuthorizationTempCode, any>>;
    /**
     * Get ID token, access token, and refresh token using a temporary code or a refresh token.
     * @summary Get Authentication/Authorization Information
     * @param {string} [code] Temp Code
     * @param {'tempCodeAuth' | 'refreshTokenAuth'} [authFlow] Authentication Flow tempCodeAuth: Getting authentication information using a temporary code refreshTokenAuth: Getting authentication information using a refresh token If not specified, it will be tempCodeAuth
     * @param {string} [refreshToken] Refresh Token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CredentialApi
     */
    getAuthCredentials(code?: string, authFlow?: 'tempCodeAuth' | 'refreshTokenAuth', refreshToken?: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<Credentials, any>>;
}
/**
 * EnvApi - axios parameter creator
 * @export
 */
export declare const EnvApiAxiosParamCreator: (configuration?: Configuration | undefined) => {
    /**
     * Create environment information. Multiple environments can be defined, such as an environment for testing linkage, an environment for development, and an environment for actual operation.
     * @summary Create Env Info
     * @param {Env} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createEnv: (body?: Env | undefined, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Delete env info. Env with id 3 cannot be deleted.
     * @summary Delete Env Info
     * @param {number} envId Env ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteEnv: (envId: number, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Get environment details.
     * @summary Get Env Details
     * @param {number} envId Env ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEnv: (envId: number, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Get registered environment information. Multiple environments can be defined, such as an environment for testing linkage, an environment for development, and an environment for actual operation.
     * @summary Get Env Info
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEnvs: (options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Update env info.
     * @summary Update Env Info
     * @param {number} envId Env ID
     * @param {UpdateEnvParam} [updateEnvParam]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateEnv: (envId: number, updateEnvParam?: UpdateEnvParam | undefined, options?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * EnvApi - functional programming interface
 * @export
 */
export declare const EnvApiFp: (configuration?: Configuration | undefined) => {
    /**
     * Create environment information. Multiple environments can be defined, such as an environment for testing linkage, an environment for development, and an environment for actual operation.
     * @summary Create Env Info
     * @param {Env} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createEnv(body?: Env | undefined, options?: AxiosRequestConfig<any> | undefined): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<Env>>;
    /**
     * Delete env info. Env with id 3 cannot be deleted.
     * @summary Delete Env Info
     * @param {number} envId Env ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteEnv(envId: number, options?: AxiosRequestConfig<any> | undefined): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<void>>;
    /**
     * Get environment details.
     * @summary Get Env Details
     * @param {number} envId Env ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEnv(envId: number, options?: AxiosRequestConfig<any> | undefined): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<Env>>;
    /**
     * Get registered environment information. Multiple environments can be defined, such as an environment for testing linkage, an environment for development, and an environment for actual operation.
     * @summary Get Env Info
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEnvs(options?: AxiosRequestConfig<any> | undefined): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<Envs>>;
    /**
     * Update env info.
     * @summary Update Env Info
     * @param {number} envId Env ID
     * @param {UpdateEnvParam} [updateEnvParam]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateEnv(envId: number, updateEnvParam?: UpdateEnvParam | undefined, options?: AxiosRequestConfig<any> | undefined): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<void>>;
};
/**
 * EnvApi - factory interface
 * @export
 */
export declare const EnvApiFactory: (configuration?: Configuration | undefined, basePath?: string | undefined, axios?: AxiosInstance | undefined) => {
    /**
     * Create environment information. Multiple environments can be defined, such as an environment for testing linkage, an environment for development, and an environment for actual operation.
     * @summary Create Env Info
     * @param {Env} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createEnv(body?: Env | undefined, options?: any): AxiosPromise<Env>;
    /**
     * Delete env info. Env with id 3 cannot be deleted.
     * @summary Delete Env Info
     * @param {number} envId Env ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteEnv(envId: number, options?: any): AxiosPromise<void>;
    /**
     * Get environment details.
     * @summary Get Env Details
     * @param {number} envId Env ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEnv(envId: number, options?: any): AxiosPromise<Env>;
    /**
     * Get registered environment information. Multiple environments can be defined, such as an environment for testing linkage, an environment for development, and an environment for actual operation.
     * @summary Get Env Info
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEnvs(options?: any): AxiosPromise<Envs>;
    /**
     * Update env info.
     * @summary Update Env Info
     * @param {number} envId Env ID
     * @param {UpdateEnvParam} [updateEnvParam]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateEnv(envId: number, updateEnvParam?: UpdateEnvParam | undefined, options?: any): AxiosPromise<void>;
};
/**
 * EnvApi - object-oriented interface
 * @export
 * @class EnvApi
 * @extends {BaseAPI}
 */
export declare class EnvApi extends BaseAPI {
    /**
     * Create environment information. Multiple environments can be defined, such as an environment for testing linkage, an environment for development, and an environment for actual operation.
     * @summary Create Env Info
     * @param {Env} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EnvApi
     */
    createEnv(body?: Env, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<Env, any>>;
    /**
     * Delete env info. Env with id 3 cannot be deleted.
     * @summary Delete Env Info
     * @param {number} envId Env ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EnvApi
     */
    deleteEnv(envId: number, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * Get environment details.
     * @summary Get Env Details
     * @param {number} envId Env ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EnvApi
     */
    getEnv(envId: number, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<Env, any>>;
    /**
     * Get registered environment information. Multiple environments can be defined, such as an environment for testing linkage, an environment for development, and an environment for actual operation.
     * @summary Get Env Info
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EnvApi
     */
    getEnvs(options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<Envs, any>>;
    /**
     * Update env info.
     * @summary Update Env Info
     * @param {number} envId Env ID
     * @param {UpdateEnvParam} [updateEnvParam]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EnvApi
     */
    updateEnv(envId: number, updateEnvParam?: UpdateEnvParam, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
}
/**
 * ErrorApi - axios parameter creator
 * @export
 */
export declare const ErrorApiAxiosParamCreator: (configuration?: Configuration | undefined) => {
    /**
     * This endpoint is used for testing purposes. Returns a server error with status code 500.
     * @summary Return Internal Server Error
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    returnInternalServerError: (options?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * ErrorApi - functional programming interface
 * @export
 */
export declare const ErrorApiFp: (configuration?: Configuration | undefined) => {
    /**
     * This endpoint is used for testing purposes. Returns a server error with status code 500.
     * @summary Return Internal Server Error
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    returnInternalServerError(options?: AxiosRequestConfig<any> | undefined): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<void>>;
};
/**
 * ErrorApi - factory interface
 * @export
 */
export declare const ErrorApiFactory: (configuration?: Configuration | undefined, basePath?: string | undefined, axios?: AxiosInstance | undefined) => {
    /**
     * This endpoint is used for testing purposes. Returns a server error with status code 500.
     * @summary Return Internal Server Error
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    returnInternalServerError(options?: any): AxiosPromise<void>;
};
/**
 * ErrorApi - object-oriented interface
 * @export
 * @class ErrorApi
 * @extends {BaseAPI}
 */
export declare class ErrorApi extends BaseAPI {
    /**
     * This endpoint is used for testing purposes. Returns a server error with status code 500.
     * @summary Return Internal Server Error
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ErrorApi
     */
    returnInternalServerError(options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
}
/**
 * InvitationApi - axios parameter creator
 * @export
 */
export declare const InvitationApiAxiosParamCreator: (configuration?: Configuration | undefined) => {
    /**
     * Create an invitation to the tenant.
     * @summary Create Tenant Invitation
     * @param {string} tenantId Tenant ID
     * @param {CreateTenantInvitationParam} [createTenantInvitationParam]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createTenantInvitation: (tenantId: string, createTenantInvitationParam?: CreateTenantInvitationParam | undefined, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Delete an invitation for the tenant.
     * @summary Delete Tenant Invitation
     * @param {string} tenantId Tenant ID
     * @param {string} invitationId Invitation ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteTenantInvitation: (tenantId: string, invitationId: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Get the validity of an invitation to the tenant.
     * @summary Get Invitation Validity
     * @param {string} invitationId Invitation ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getInvitationValidity: (invitationId: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Get invitation information for the tenant.
     * @summary Get Tenant Invitation
     * @param {string} tenantId Tenant ID
     * @param {string} invitationId Invitation ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getTenantInvitation: (tenantId: string, invitationId: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Get a list of invitations to the tenant.
     * @summary Get Tenant Invitations
     * @param {string} tenantId Tenant ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getTenantInvitations: (tenantId: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Validate an invitation to the tenant.
     * @summary Validate Invitation
     * @param {string} invitationId Invitation ID
     * @param {ValidateInvitationParam} [validateInvitationParam]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    validateInvitation: (invitationId: string, validateInvitationParam?: ValidateInvitationParam | undefined, options?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * InvitationApi - functional programming interface
 * @export
 */
export declare const InvitationApiFp: (configuration?: Configuration | undefined) => {
    /**
     * Create an invitation to the tenant.
     * @summary Create Tenant Invitation
     * @param {string} tenantId Tenant ID
     * @param {CreateTenantInvitationParam} [createTenantInvitationParam]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createTenantInvitation(tenantId: string, createTenantInvitationParam?: CreateTenantInvitationParam | undefined, options?: AxiosRequestConfig<any> | undefined): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<Invitation>>;
    /**
     * Delete an invitation for the tenant.
     * @summary Delete Tenant Invitation
     * @param {string} tenantId Tenant ID
     * @param {string} invitationId Invitation ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteTenantInvitation(tenantId: string, invitationId: string, options?: AxiosRequestConfig<any> | undefined): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<void>>;
    /**
     * Get the validity of an invitation to the tenant.
     * @summary Get Invitation Validity
     * @param {string} invitationId Invitation ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getInvitationValidity(invitationId: string, options?: AxiosRequestConfig<any> | undefined): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<InvitationValidity>>;
    /**
     * Get invitation information for the tenant.
     * @summary Get Tenant Invitation
     * @param {string} tenantId Tenant ID
     * @param {string} invitationId Invitation ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getTenantInvitation(tenantId: string, invitationId: string, options?: AxiosRequestConfig<any> | undefined): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<Invitation>>;
    /**
     * Get a list of invitations to the tenant.
     * @summary Get Tenant Invitations
     * @param {string} tenantId Tenant ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getTenantInvitations(tenantId: string, options?: AxiosRequestConfig<any> | undefined): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<Invitations>>;
    /**
     * Validate an invitation to the tenant.
     * @summary Validate Invitation
     * @param {string} invitationId Invitation ID
     * @param {ValidateInvitationParam} [validateInvitationParam]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    validateInvitation(invitationId: string, validateInvitationParam?: ValidateInvitationParam | undefined, options?: AxiosRequestConfig<any> | undefined): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<void>>;
};
/**
 * InvitationApi - factory interface
 * @export
 */
export declare const InvitationApiFactory: (configuration?: Configuration | undefined, basePath?: string | undefined, axios?: AxiosInstance | undefined) => {
    /**
     * Create an invitation to the tenant.
     * @summary Create Tenant Invitation
     * @param {string} tenantId Tenant ID
     * @param {CreateTenantInvitationParam} [createTenantInvitationParam]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createTenantInvitation(tenantId: string, createTenantInvitationParam?: CreateTenantInvitationParam | undefined, options?: any): AxiosPromise<Invitation>;
    /**
     * Delete an invitation for the tenant.
     * @summary Delete Tenant Invitation
     * @param {string} tenantId Tenant ID
     * @param {string} invitationId Invitation ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteTenantInvitation(tenantId: string, invitationId: string, options?: any): AxiosPromise<void>;
    /**
     * Get the validity of an invitation to the tenant.
     * @summary Get Invitation Validity
     * @param {string} invitationId Invitation ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getInvitationValidity(invitationId: string, options?: any): AxiosPromise<InvitationValidity>;
    /**
     * Get invitation information for the tenant.
     * @summary Get Tenant Invitation
     * @param {string} tenantId Tenant ID
     * @param {string} invitationId Invitation ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getTenantInvitation(tenantId: string, invitationId: string, options?: any): AxiosPromise<Invitation>;
    /**
     * Get a list of invitations to the tenant.
     * @summary Get Tenant Invitations
     * @param {string} tenantId Tenant ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getTenantInvitations(tenantId: string, options?: any): AxiosPromise<Invitations>;
    /**
     * Validate an invitation to the tenant.
     * @summary Validate Invitation
     * @param {string} invitationId Invitation ID
     * @param {ValidateInvitationParam} [validateInvitationParam]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    validateInvitation(invitationId: string, validateInvitationParam?: ValidateInvitationParam | undefined, options?: any): AxiosPromise<void>;
};
/**
 * InvitationApi - object-oriented interface
 * @export
 * @class InvitationApi
 * @extends {BaseAPI}
 */
export declare class InvitationApi extends BaseAPI {
    /**
     * Create an invitation to the tenant.
     * @summary Create Tenant Invitation
     * @param {string} tenantId Tenant ID
     * @param {CreateTenantInvitationParam} [createTenantInvitationParam]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InvitationApi
     */
    createTenantInvitation(tenantId: string, createTenantInvitationParam?: CreateTenantInvitationParam, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<Invitation, any>>;
    /**
     * Delete an invitation for the tenant.
     * @summary Delete Tenant Invitation
     * @param {string} tenantId Tenant ID
     * @param {string} invitationId Invitation ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InvitationApi
     */
    deleteTenantInvitation(tenantId: string, invitationId: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * Get the validity of an invitation to the tenant.
     * @summary Get Invitation Validity
     * @param {string} invitationId Invitation ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InvitationApi
     */
    getInvitationValidity(invitationId: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<InvitationValidity, any>>;
    /**
     * Get invitation information for the tenant.
     * @summary Get Tenant Invitation
     * @param {string} tenantId Tenant ID
     * @param {string} invitationId Invitation ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InvitationApi
     */
    getTenantInvitation(tenantId: string, invitationId: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<Invitation, any>>;
    /**
     * Get a list of invitations to the tenant.
     * @summary Get Tenant Invitations
     * @param {string} tenantId Tenant ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InvitationApi
     */
    getTenantInvitations(tenantId: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<Invitations, any>>;
    /**
     * Validate an invitation to the tenant.
     * @summary Validate Invitation
     * @param {string} invitationId Invitation ID
     * @param {ValidateInvitationParam} [validateInvitationParam]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InvitationApi
     */
    validateInvitation(invitationId: string, validateInvitationParam?: ValidateInvitationParam, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
}
/**
 * RoleApi - axios parameter creator
 * @export
 */
export declare const RoleApiAxiosParamCreator: (configuration?: Configuration | undefined) => {
    /**
     * Create a role. By granting users the roles created here, it becomes easier to implement role-based authorization on the SaaS side. In addition, even the same user can have different roles for each tenant/environment to which they belong.
     * @summary Create Role
     * @param {Role} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createRole: (body?: Role | undefined, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Delete role.
     * @summary Delete Role
     * @param {string} roleName Role name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteRole: (roleName: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Get registered roles list. Granting users the roles defined here makes it easy to implement role-based authorization on the SaaS side. In addition, even the same user can have different roles for each tenant/environment to which they belong.
     * @summary Get Roles
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getRoles: (options?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * RoleApi - functional programming interface
 * @export
 */
export declare const RoleApiFp: (configuration?: Configuration | undefined) => {
    /**
     * Create a role. By granting users the roles created here, it becomes easier to implement role-based authorization on the SaaS side. In addition, even the same user can have different roles for each tenant/environment to which they belong.
     * @summary Create Role
     * @param {Role} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createRole(body?: Role | undefined, options?: AxiosRequestConfig<any> | undefined): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<Role>>;
    /**
     * Delete role.
     * @summary Delete Role
     * @param {string} roleName Role name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteRole(roleName: string, options?: AxiosRequestConfig<any> | undefined): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<void>>;
    /**
     * Get registered roles list. Granting users the roles defined here makes it easy to implement role-based authorization on the SaaS side. In addition, even the same user can have different roles for each tenant/environment to which they belong.
     * @summary Get Roles
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getRoles(options?: AxiosRequestConfig<any> | undefined): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<Roles>>;
};
/**
 * RoleApi - factory interface
 * @export
 */
export declare const RoleApiFactory: (configuration?: Configuration | undefined, basePath?: string | undefined, axios?: AxiosInstance | undefined) => {
    /**
     * Create a role. By granting users the roles created here, it becomes easier to implement role-based authorization on the SaaS side. In addition, even the same user can have different roles for each tenant/environment to which they belong.
     * @summary Create Role
     * @param {Role} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createRole(body?: Role | undefined, options?: any): AxiosPromise<Role>;
    /**
     * Delete role.
     * @summary Delete Role
     * @param {string} roleName Role name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteRole(roleName: string, options?: any): AxiosPromise<void>;
    /**
     * Get registered roles list. Granting users the roles defined here makes it easy to implement role-based authorization on the SaaS side. In addition, even the same user can have different roles for each tenant/environment to which they belong.
     * @summary Get Roles
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getRoles(options?: any): AxiosPromise<Roles>;
};
/**
 * RoleApi - object-oriented interface
 * @export
 * @class RoleApi
 * @extends {BaseAPI}
 */
export declare class RoleApi extends BaseAPI {
    /**
     * Create a role. By granting users the roles created here, it becomes easier to implement role-based authorization on the SaaS side. In addition, even the same user can have different roles for each tenant/environment to which they belong.
     * @summary Create Role
     * @param {Role} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RoleApi
     */
    createRole(body?: Role, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<Role, any>>;
    /**
     * Delete role.
     * @summary Delete Role
     * @param {string} roleName Role name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RoleApi
     */
    deleteRole(roleName: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * Get registered roles list. Granting users the roles defined here makes it easy to implement role-based authorization on the SaaS side. In addition, even the same user can have different roles for each tenant/environment to which they belong.
     * @summary Get Roles
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RoleApi
     */
    getRoles(options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<Roles, any>>;
}
/**
 * SaasUserApi - axios parameter creator
 * @export
 */
export declare const SaasUserApiAxiosParamCreator: (configuration?: Configuration | undefined) => {
    /**
     * Verify the code to confirm the user\'s email address update. Requires the user\'s access token.
     * @summary Confirm User Email Update
     * @param {string} userId User ID
     * @param {ConfirmEmailUpdateParam} [confirmEmailUpdateParam]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    confirmEmailUpdate: (userId: string, confirmEmailUpdateParam?: ConfirmEmailUpdateParam | undefined, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Verify the code for external account user link confirmation.
     * @summary Confirm External User Account Link
     * @param {ConfirmExternalUserLinkParam} [confirmExternalUserLinkParam]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    confirmExternalUserLink: (confirmExternalUserLinkParam?: ConfirmExternalUserLinkParam | undefined, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Confirm a new use registeration linked to AWS Marketplace. Create a new tenant linked to AWS Marketplace. If the Registration Token is not valid, an error is returned.
     * @summary Confirm Sign Up with AWS Marketplace
     * @param {ConfirmSignUpWithAwsMarketplaceParam} [confirmSignUpWithAwsMarketplaceParam]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    confirmSignUpWithAwsMarketplace: (confirmSignUpWithAwsMarketplaceParam?: ConfirmSignUpWithAwsMarketplaceParam | undefined, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Create SaaS User.
     * @summary Create SaaS User
     * @param {CreateSaasUserParam} [createSaasUserParam]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createSaasUser: (createSaasUserParam?: CreateSaasUserParam | undefined, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Create a secret code for authentication application registration.
     * @summary Create secret code for authentication application registration
     * @param {string} userId User ID
     * @param {CreateSecretCodeParam} [createSecretCodeParam]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createSecretCode: (userId: string, createSecretCodeParam?: CreateSecretCodeParam | undefined, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Delete all users with matching user ID from the tenant and SaaS.
     * @summary Delete User
     * @param {string} userId User ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteSaasUser: (userId: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Get user information based on user ID.
     * @summary Get User
     * @param {string} userId User ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getSaasUser: (userId: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Get all SaaS users.
     * @summary Get Users
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getSaasUsers: (options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Get the user\'s MFA settings.
     * @summary Get User\'s MFA Settings
     * @param {string} userId User ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUserMfaPreference: (userId: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Link an existing tenant with AWS Marketplace. If the Registration Token is not valid, an error is returned.
     * @summary Link an existing tenant with AWS Marketplace
     * @param {LinkAwsMarketplaceParam} [linkAwsMarketplaceParam]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    linkAwsMarketplace: (linkAwsMarketplaceParam?: LinkAwsMarketplaceParam | undefined, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Request to update the user\'s email address. Sends a verification code to the requested email address. Requires the user\'s access token. The verification code is valid for 24 hours.
     * @summary Request User Email Update
     * @param {string} userId User ID
     * @param {RequestEmailUpdateParam} [requestEmailUpdateParam]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    requestEmailUpdate: (userId: string, requestEmailUpdateParam?: RequestEmailUpdateParam | undefined, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Request to link an external account user. Get the email address of the user to be linked from the access token and send a verification code to that email address. The verification code is valid for 24 hours.
     * @summary Request External User Account Link
     * @param {RequestExternalUserLinkParam} [requestExternalUserLinkParam]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    requestExternalUserLink: (requestExternalUserLinkParam?: RequestExternalUserLinkParam | undefined, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Resend temporary password for the new registered user.
     * @summary Resend Sign Up Confirmation Email
     * @param {ResendSignUpConfirmationEmailParam} [resendSignUpConfirmationEmailParam]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    resendSignUpConfirmationEmail: (resendSignUpConfirmationEmailParam?: ResendSignUpConfirmationEmailParam | undefined, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Register a new user. A temporary password will be sent to the registered email.
     * @summary Sign Up
     * @param {SignUpParam} [signUpParam]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    signUp: (signUpParam?: SignUpParam | undefined, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Register a new user linked to AWS Marketplace. A temporary password will be sent to the registered email. If the Registration Token is not valid, an error is returned.
     * @summary Sign Up with AWS Marketplace
     * @param {SignUpWithAwsMarketplaceParam} [signUpWithAwsMarketplaceParam]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    signUpWithAwsMarketplace: (signUpWithAwsMarketplaceParam?: SignUpWithAwsMarketplaceParam | undefined, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Unlink external identity providers.
     * @summary Unlink external identity providers
     * @param {string} providerName
     * @param {string} userId User ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    unlinkProvider: (providerName: string, userId: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Change user\'s email.
     * @summary Change Email
     * @param {string} userId User ID
     * @param {UpdateSaasUserEmailParam} [updateSaasUserEmailParam]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateSaasUserEmail: (userId: string, updateSaasUserEmailParam?: UpdateSaasUserEmailParam | undefined, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Change user\'s login password.
     * @summary Change Password
     * @param {string} userId User ID
     * @param {UpdateSaasUserPasswordParam} [updateSaasUserPasswordParam]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateSaasUserPassword: (userId: string, updateSaasUserPasswordParam?: UpdateSaasUserPasswordParam | undefined, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Register an authentication application.
     * @summary Register Authentication Application
     * @param {string} userId User ID
     * @param {UpdateSoftwareTokenParam} [updateSoftwareTokenParam]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateSoftwareToken: (userId: string, updateSoftwareTokenParam?: UpdateSoftwareTokenParam | undefined, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Update user\'s MFA settings.
     * @summary Update User\'s MFA Settings
     * @param {string} userId User ID
     * @param {MfaPreference} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateUserMfaPreference: (userId: string, body?: MfaPreference | undefined, options?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * SaasUserApi - functional programming interface
 * @export
 */
export declare const SaasUserApiFp: (configuration?: Configuration | undefined) => {
    /**
     * Verify the code to confirm the user\'s email address update. Requires the user\'s access token.
     * @summary Confirm User Email Update
     * @param {string} userId User ID
     * @param {ConfirmEmailUpdateParam} [confirmEmailUpdateParam]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    confirmEmailUpdate(userId: string, confirmEmailUpdateParam?: ConfirmEmailUpdateParam | undefined, options?: AxiosRequestConfig<any> | undefined): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<void>>;
    /**
     * Verify the code for external account user link confirmation.
     * @summary Confirm External User Account Link
     * @param {ConfirmExternalUserLinkParam} [confirmExternalUserLinkParam]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    confirmExternalUserLink(confirmExternalUserLinkParam?: ConfirmExternalUserLinkParam | undefined, options?: AxiosRequestConfig<any> | undefined): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<void>>;
    /**
     * Confirm a new use registeration linked to AWS Marketplace. Create a new tenant linked to AWS Marketplace. If the Registration Token is not valid, an error is returned.
     * @summary Confirm Sign Up with AWS Marketplace
     * @param {ConfirmSignUpWithAwsMarketplaceParam} [confirmSignUpWithAwsMarketplaceParam]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    confirmSignUpWithAwsMarketplace(confirmSignUpWithAwsMarketplaceParam?: ConfirmSignUpWithAwsMarketplaceParam | undefined, options?: AxiosRequestConfig<any> | undefined): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<Tenant>>;
    /**
     * Create SaaS User.
     * @summary Create SaaS User
     * @param {CreateSaasUserParam} [createSaasUserParam]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createSaasUser(createSaasUserParam?: CreateSaasUserParam | undefined, options?: AxiosRequestConfig<any> | undefined): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<SaasUser>>;
    /**
     * Create a secret code for authentication application registration.
     * @summary Create secret code for authentication application registration
     * @param {string} userId User ID
     * @param {CreateSecretCodeParam} [createSecretCodeParam]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createSecretCode(userId: string, createSecretCodeParam?: CreateSecretCodeParam | undefined, options?: AxiosRequestConfig<any> | undefined): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<SoftwareTokenSecretCode>>;
    /**
     * Delete all users with matching user ID from the tenant and SaaS.
     * @summary Delete User
     * @param {string} userId User ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteSaasUser(userId: string, options?: AxiosRequestConfig<any> | undefined): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<void>>;
    /**
     * Get user information based on user ID.
     * @summary Get User
     * @param {string} userId User ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getSaasUser(userId: string, options?: AxiosRequestConfig<any> | undefined): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<SaasUser>>;
    /**
     * Get all SaaS users.
     * @summary Get Users
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getSaasUsers(options?: AxiosRequestConfig<any> | undefined): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<SaasUsers>>;
    /**
     * Get the user\'s MFA settings.
     * @summary Get User\'s MFA Settings
     * @param {string} userId User ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUserMfaPreference(userId: string, options?: AxiosRequestConfig<any> | undefined): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<MfaPreference>>;
    /**
     * Link an existing tenant with AWS Marketplace. If the Registration Token is not valid, an error is returned.
     * @summary Link an existing tenant with AWS Marketplace
     * @param {LinkAwsMarketplaceParam} [linkAwsMarketplaceParam]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    linkAwsMarketplace(linkAwsMarketplaceParam?: LinkAwsMarketplaceParam | undefined, options?: AxiosRequestConfig<any> | undefined): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<void>>;
    /**
     * Request to update the user\'s email address. Sends a verification code to the requested email address. Requires the user\'s access token. The verification code is valid for 24 hours.
     * @summary Request User Email Update
     * @param {string} userId User ID
     * @param {RequestEmailUpdateParam} [requestEmailUpdateParam]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    requestEmailUpdate(userId: string, requestEmailUpdateParam?: RequestEmailUpdateParam | undefined, options?: AxiosRequestConfig<any> | undefined): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<void>>;
    /**
     * Request to link an external account user. Get the email address of the user to be linked from the access token and send a verification code to that email address. The verification code is valid for 24 hours.
     * @summary Request External User Account Link
     * @param {RequestExternalUserLinkParam} [requestExternalUserLinkParam]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    requestExternalUserLink(requestExternalUserLinkParam?: RequestExternalUserLinkParam | undefined, options?: AxiosRequestConfig<any> | undefined): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<void>>;
    /**
     * Resend temporary password for the new registered user.
     * @summary Resend Sign Up Confirmation Email
     * @param {ResendSignUpConfirmationEmailParam} [resendSignUpConfirmationEmailParam]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    resendSignUpConfirmationEmail(resendSignUpConfirmationEmailParam?: ResendSignUpConfirmationEmailParam | undefined, options?: AxiosRequestConfig<any> | undefined): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<void>>;
    /**
     * Register a new user. A temporary password will be sent to the registered email.
     * @summary Sign Up
     * @param {SignUpParam} [signUpParam]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    signUp(signUpParam?: SignUpParam | undefined, options?: AxiosRequestConfig<any> | undefined): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<SaasUser>>;
    /**
     * Register a new user linked to AWS Marketplace. A temporary password will be sent to the registered email. If the Registration Token is not valid, an error is returned.
     * @summary Sign Up with AWS Marketplace
     * @param {SignUpWithAwsMarketplaceParam} [signUpWithAwsMarketplaceParam]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    signUpWithAwsMarketplace(signUpWithAwsMarketplaceParam?: SignUpWithAwsMarketplaceParam | undefined, options?: AxiosRequestConfig<any> | undefined): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<SaasUser>>;
    /**
     * Unlink external identity providers.
     * @summary Unlink external identity providers
     * @param {string} providerName
     * @param {string} userId User ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    unlinkProvider(providerName: string, userId: string, options?: AxiosRequestConfig<any> | undefined): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<void>>;
    /**
     * Change user\'s email.
     * @summary Change Email
     * @param {string} userId User ID
     * @param {UpdateSaasUserEmailParam} [updateSaasUserEmailParam]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateSaasUserEmail(userId: string, updateSaasUserEmailParam?: UpdateSaasUserEmailParam | undefined, options?: AxiosRequestConfig<any> | undefined): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<void>>;
    /**
     * Change user\'s login password.
     * @summary Change Password
     * @param {string} userId User ID
     * @param {UpdateSaasUserPasswordParam} [updateSaasUserPasswordParam]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateSaasUserPassword(userId: string, updateSaasUserPasswordParam?: UpdateSaasUserPasswordParam | undefined, options?: AxiosRequestConfig<any> | undefined): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<void>>;
    /**
     * Register an authentication application.
     * @summary Register Authentication Application
     * @param {string} userId User ID
     * @param {UpdateSoftwareTokenParam} [updateSoftwareTokenParam]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateSoftwareToken(userId: string, updateSoftwareTokenParam?: UpdateSoftwareTokenParam | undefined, options?: AxiosRequestConfig<any> | undefined): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<void>>;
    /**
     * Update user\'s MFA settings.
     * @summary Update User\'s MFA Settings
     * @param {string} userId User ID
     * @param {MfaPreference} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateUserMfaPreference(userId: string, body?: MfaPreference | undefined, options?: AxiosRequestConfig<any> | undefined): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<void>>;
};
/**
 * SaasUserApi - factory interface
 * @export
 */
export declare const SaasUserApiFactory: (configuration?: Configuration | undefined, basePath?: string | undefined, axios?: AxiosInstance | undefined) => {
    /**
     * Verify the code to confirm the user\'s email address update. Requires the user\'s access token.
     * @summary Confirm User Email Update
     * @param {string} userId User ID
     * @param {ConfirmEmailUpdateParam} [confirmEmailUpdateParam]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    confirmEmailUpdate(userId: string, confirmEmailUpdateParam?: ConfirmEmailUpdateParam | undefined, options?: any): AxiosPromise<void>;
    /**
     * Verify the code for external account user link confirmation.
     * @summary Confirm External User Account Link
     * @param {ConfirmExternalUserLinkParam} [confirmExternalUserLinkParam]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    confirmExternalUserLink(confirmExternalUserLinkParam?: ConfirmExternalUserLinkParam | undefined, options?: any): AxiosPromise<void>;
    /**
     * Confirm a new use registeration linked to AWS Marketplace. Create a new tenant linked to AWS Marketplace. If the Registration Token is not valid, an error is returned.
     * @summary Confirm Sign Up with AWS Marketplace
     * @param {ConfirmSignUpWithAwsMarketplaceParam} [confirmSignUpWithAwsMarketplaceParam]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    confirmSignUpWithAwsMarketplace(confirmSignUpWithAwsMarketplaceParam?: ConfirmSignUpWithAwsMarketplaceParam | undefined, options?: any): AxiosPromise<Tenant>;
    /**
     * Create SaaS User.
     * @summary Create SaaS User
     * @param {CreateSaasUserParam} [createSaasUserParam]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createSaasUser(createSaasUserParam?: CreateSaasUserParam | undefined, options?: any): AxiosPromise<SaasUser>;
    /**
     * Create a secret code for authentication application registration.
     * @summary Create secret code for authentication application registration
     * @param {string} userId User ID
     * @param {CreateSecretCodeParam} [createSecretCodeParam]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createSecretCode(userId: string, createSecretCodeParam?: CreateSecretCodeParam | undefined, options?: any): AxiosPromise<SoftwareTokenSecretCode>;
    /**
     * Delete all users with matching user ID from the tenant and SaaS.
     * @summary Delete User
     * @param {string} userId User ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteSaasUser(userId: string, options?: any): AxiosPromise<void>;
    /**
     * Get user information based on user ID.
     * @summary Get User
     * @param {string} userId User ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getSaasUser(userId: string, options?: any): AxiosPromise<SaasUser>;
    /**
     * Get all SaaS users.
     * @summary Get Users
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getSaasUsers(options?: any): AxiosPromise<SaasUsers>;
    /**
     * Get the user\'s MFA settings.
     * @summary Get User\'s MFA Settings
     * @param {string} userId User ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUserMfaPreference(userId: string, options?: any): AxiosPromise<MfaPreference>;
    /**
     * Link an existing tenant with AWS Marketplace. If the Registration Token is not valid, an error is returned.
     * @summary Link an existing tenant with AWS Marketplace
     * @param {LinkAwsMarketplaceParam} [linkAwsMarketplaceParam]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    linkAwsMarketplace(linkAwsMarketplaceParam?: LinkAwsMarketplaceParam | undefined, options?: any): AxiosPromise<void>;
    /**
     * Request to update the user\'s email address. Sends a verification code to the requested email address. Requires the user\'s access token. The verification code is valid for 24 hours.
     * @summary Request User Email Update
     * @param {string} userId User ID
     * @param {RequestEmailUpdateParam} [requestEmailUpdateParam]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    requestEmailUpdate(userId: string, requestEmailUpdateParam?: RequestEmailUpdateParam | undefined, options?: any): AxiosPromise<void>;
    /**
     * Request to link an external account user. Get the email address of the user to be linked from the access token and send a verification code to that email address. The verification code is valid for 24 hours.
     * @summary Request External User Account Link
     * @param {RequestExternalUserLinkParam} [requestExternalUserLinkParam]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    requestExternalUserLink(requestExternalUserLinkParam?: RequestExternalUserLinkParam | undefined, options?: any): AxiosPromise<void>;
    /**
     * Resend temporary password for the new registered user.
     * @summary Resend Sign Up Confirmation Email
     * @param {ResendSignUpConfirmationEmailParam} [resendSignUpConfirmationEmailParam]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    resendSignUpConfirmationEmail(resendSignUpConfirmationEmailParam?: ResendSignUpConfirmationEmailParam | undefined, options?: any): AxiosPromise<void>;
    /**
     * Register a new user. A temporary password will be sent to the registered email.
     * @summary Sign Up
     * @param {SignUpParam} [signUpParam]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    signUp(signUpParam?: SignUpParam | undefined, options?: any): AxiosPromise<SaasUser>;
    /**
     * Register a new user linked to AWS Marketplace. A temporary password will be sent to the registered email. If the Registration Token is not valid, an error is returned.
     * @summary Sign Up with AWS Marketplace
     * @param {SignUpWithAwsMarketplaceParam} [signUpWithAwsMarketplaceParam]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    signUpWithAwsMarketplace(signUpWithAwsMarketplaceParam?: SignUpWithAwsMarketplaceParam | undefined, options?: any): AxiosPromise<SaasUser>;
    /**
     * Unlink external identity providers.
     * @summary Unlink external identity providers
     * @param {string} providerName
     * @param {string} userId User ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    unlinkProvider(providerName: string, userId: string, options?: any): AxiosPromise<void>;
    /**
     * Change user\'s email.
     * @summary Change Email
     * @param {string} userId User ID
     * @param {UpdateSaasUserEmailParam} [updateSaasUserEmailParam]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateSaasUserEmail(userId: string, updateSaasUserEmailParam?: UpdateSaasUserEmailParam | undefined, options?: any): AxiosPromise<void>;
    /**
     * Change user\'s login password.
     * @summary Change Password
     * @param {string} userId User ID
     * @param {UpdateSaasUserPasswordParam} [updateSaasUserPasswordParam]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateSaasUserPassword(userId: string, updateSaasUserPasswordParam?: UpdateSaasUserPasswordParam | undefined, options?: any): AxiosPromise<void>;
    /**
     * Register an authentication application.
     * @summary Register Authentication Application
     * @param {string} userId User ID
     * @param {UpdateSoftwareTokenParam} [updateSoftwareTokenParam]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateSoftwareToken(userId: string, updateSoftwareTokenParam?: UpdateSoftwareTokenParam | undefined, options?: any): AxiosPromise<void>;
    /**
     * Update user\'s MFA settings.
     * @summary Update User\'s MFA Settings
     * @param {string} userId User ID
     * @param {MfaPreference} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateUserMfaPreference(userId: string, body?: MfaPreference | undefined, options?: any): AxiosPromise<void>;
};
/**
 * SaasUserApi - object-oriented interface
 * @export
 * @class SaasUserApi
 * @extends {BaseAPI}
 */
export declare class SaasUserApi extends BaseAPI {
    /**
     * Verify the code to confirm the user\'s email address update. Requires the user\'s access token.
     * @summary Confirm User Email Update
     * @param {string} userId User ID
     * @param {ConfirmEmailUpdateParam} [confirmEmailUpdateParam]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SaasUserApi
     */
    confirmEmailUpdate(userId: string, confirmEmailUpdateParam?: ConfirmEmailUpdateParam, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * Verify the code for external account user link confirmation.
     * @summary Confirm External User Account Link
     * @param {ConfirmExternalUserLinkParam} [confirmExternalUserLinkParam]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SaasUserApi
     */
    confirmExternalUserLink(confirmExternalUserLinkParam?: ConfirmExternalUserLinkParam, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * Confirm a new use registeration linked to AWS Marketplace. Create a new tenant linked to AWS Marketplace. If the Registration Token is not valid, an error is returned.
     * @summary Confirm Sign Up with AWS Marketplace
     * @param {ConfirmSignUpWithAwsMarketplaceParam} [confirmSignUpWithAwsMarketplaceParam]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SaasUserApi
     */
    confirmSignUpWithAwsMarketplace(confirmSignUpWithAwsMarketplaceParam?: ConfirmSignUpWithAwsMarketplaceParam, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<Tenant, any>>;
    /**
     * Create SaaS User.
     * @summary Create SaaS User
     * @param {CreateSaasUserParam} [createSaasUserParam]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SaasUserApi
     */
    createSaasUser(createSaasUserParam?: CreateSaasUserParam, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<SaasUser, any>>;
    /**
     * Create a secret code for authentication application registration.
     * @summary Create secret code for authentication application registration
     * @param {string} userId User ID
     * @param {CreateSecretCodeParam} [createSecretCodeParam]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SaasUserApi
     */
    createSecretCode(userId: string, createSecretCodeParam?: CreateSecretCodeParam, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<SoftwareTokenSecretCode, any>>;
    /**
     * Delete all users with matching user ID from the tenant and SaaS.
     * @summary Delete User
     * @param {string} userId User ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SaasUserApi
     */
    deleteSaasUser(userId: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * Get user information based on user ID.
     * @summary Get User
     * @param {string} userId User ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SaasUserApi
     */
    getSaasUser(userId: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<SaasUser, any>>;
    /**
     * Get all SaaS users.
     * @summary Get Users
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SaasUserApi
     */
    getSaasUsers(options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<SaasUsers, any>>;
    /**
     * Get the user\'s MFA settings.
     * @summary Get User\'s MFA Settings
     * @param {string} userId User ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SaasUserApi
     */
    getUserMfaPreference(userId: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<MfaPreference, any>>;
    /**
     * Link an existing tenant with AWS Marketplace. If the Registration Token is not valid, an error is returned.
     * @summary Link an existing tenant with AWS Marketplace
     * @param {LinkAwsMarketplaceParam} [linkAwsMarketplaceParam]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SaasUserApi
     */
    linkAwsMarketplace(linkAwsMarketplaceParam?: LinkAwsMarketplaceParam, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * Request to update the user\'s email address. Sends a verification code to the requested email address. Requires the user\'s access token. The verification code is valid for 24 hours.
     * @summary Request User Email Update
     * @param {string} userId User ID
     * @param {RequestEmailUpdateParam} [requestEmailUpdateParam]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SaasUserApi
     */
    requestEmailUpdate(userId: string, requestEmailUpdateParam?: RequestEmailUpdateParam, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * Request to link an external account user. Get the email address of the user to be linked from the access token and send a verification code to that email address. The verification code is valid for 24 hours.
     * @summary Request External User Account Link
     * @param {RequestExternalUserLinkParam} [requestExternalUserLinkParam]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SaasUserApi
     */
    requestExternalUserLink(requestExternalUserLinkParam?: RequestExternalUserLinkParam, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * Resend temporary password for the new registered user.
     * @summary Resend Sign Up Confirmation Email
     * @param {ResendSignUpConfirmationEmailParam} [resendSignUpConfirmationEmailParam]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SaasUserApi
     */
    resendSignUpConfirmationEmail(resendSignUpConfirmationEmailParam?: ResendSignUpConfirmationEmailParam, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * Register a new user. A temporary password will be sent to the registered email.
     * @summary Sign Up
     * @param {SignUpParam} [signUpParam]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SaasUserApi
     */
    signUp(signUpParam?: SignUpParam, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<SaasUser, any>>;
    /**
     * Register a new user linked to AWS Marketplace. A temporary password will be sent to the registered email. If the Registration Token is not valid, an error is returned.
     * @summary Sign Up with AWS Marketplace
     * @param {SignUpWithAwsMarketplaceParam} [signUpWithAwsMarketplaceParam]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SaasUserApi
     */
    signUpWithAwsMarketplace(signUpWithAwsMarketplaceParam?: SignUpWithAwsMarketplaceParam, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<SaasUser, any>>;
    /**
     * Unlink external identity providers.
     * @summary Unlink external identity providers
     * @param {string} providerName
     * @param {string} userId User ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SaasUserApi
     */
    unlinkProvider(providerName: string, userId: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * Change user\'s email.
     * @summary Change Email
     * @param {string} userId User ID
     * @param {UpdateSaasUserEmailParam} [updateSaasUserEmailParam]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SaasUserApi
     */
    updateSaasUserEmail(userId: string, updateSaasUserEmailParam?: UpdateSaasUserEmailParam, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * Change user\'s login password.
     * @summary Change Password
     * @param {string} userId User ID
     * @param {UpdateSaasUserPasswordParam} [updateSaasUserPasswordParam]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SaasUserApi
     */
    updateSaasUserPassword(userId: string, updateSaasUserPasswordParam?: UpdateSaasUserPasswordParam, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * Register an authentication application.
     * @summary Register Authentication Application
     * @param {string} userId User ID
     * @param {UpdateSoftwareTokenParam} [updateSoftwareTokenParam]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SaasUserApi
     */
    updateSoftwareToken(userId: string, updateSoftwareTokenParam?: UpdateSoftwareTokenParam, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * Update user\'s MFA settings.
     * @summary Update User\'s MFA Settings
     * @param {string} userId User ID
     * @param {MfaPreference} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SaasUserApi
     */
    updateUserMfaPreference(userId: string, body?: MfaPreference, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
}
/**
 * TenantApi - axios parameter creator
 * @export
 */
export declare const TenantApiAxiosParamCreator: (configuration?: Configuration | undefined) => {
    /**
     * Create a tenant managed by the SaaSus Platform.
     * @summary Create Tenant
     * @param {TenantProps} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createTenant: (body?: TenantProps | undefined, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Set Stripe initial information via billing
     * @summary Stripe Initial Setting
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createTenantAndPricing: (options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Delete customer and product from Stripe.
     * @summary Delete Customer and Product From Stripe
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteStripeTenantAndPricing: (options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Delete SaaSus Platform tenant.
     * @summary Delete Tenant
     * @param {string} tenantId Tenant ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteTenant: (tenantId: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Get the details of tenant managed on the SaaSus Platform.
     * @summary Get Tenant Details
     * @param {string} tenantId Tenant ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getTenant: (tenantId: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Get sign-in information via external identity provider per tenant.
     * @summary Get identity provider per tenant
     * @param {string} tenantId Tenant ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getTenantIdentityProviders: (tenantId: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Get tenants managed by SaaSus Platform.
     * @summary Get Tenants
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getTenants: (options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Delete all information related to rate plans. Delete plans linked to tenants and plan definitions. If you are using the Stripe linkage, the linkage will be removed.
     * @summary Delete all information related to rate plans
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    resetPlan: (options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Update SaaSus Platform tenant details.
     * @summary Update Tenant Details
     * @param {string} tenantId Tenant ID
     * @param {TenantProps} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateTenant: (tenantId: string, body?: TenantProps | undefined, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Update SaaSus Platform tenant billing information.
     * @summary Update Tenant Billing Information
     * @param {string} tenantId Tenant ID
     * @param {BillingInfo} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateTenantBillingInfo: (tenantId: string, body?: BillingInfo | undefined, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Update sign-in information via external identity provider per tenant.
     * @summary Update identity provider per tenant
     * @param {string} tenantId Tenant ID
     * @param {UpdateTenantIdentityProviderParam} [updateTenantIdentityProviderParam]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateTenantIdentityProvider: (tenantId: string, updateTenantIdentityProviderParam?: UpdateTenantIdentityProviderParam | undefined, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Update SaaSus Platform tenant plan information.
     * @summary Update Tenant Plan Information
     * @param {string} tenantId Tenant ID
     * @param {PlanReservation} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateTenantPlan: (tenantId: string, body?: PlanReservation | undefined, options?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * TenantApi - functional programming interface
 * @export
 */
export declare const TenantApiFp: (configuration?: Configuration | undefined) => {
    /**
     * Create a tenant managed by the SaaSus Platform.
     * @summary Create Tenant
     * @param {TenantProps} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createTenant(body?: TenantProps | undefined, options?: AxiosRequestConfig<any> | undefined): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<Tenant>>;
    /**
     * Set Stripe initial information via billing
     * @summary Stripe Initial Setting
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createTenantAndPricing(options?: AxiosRequestConfig<any> | undefined): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<void>>;
    /**
     * Delete customer and product from Stripe.
     * @summary Delete Customer and Product From Stripe
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteStripeTenantAndPricing(options?: AxiosRequestConfig<any> | undefined): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<void>>;
    /**
     * Delete SaaSus Platform tenant.
     * @summary Delete Tenant
     * @param {string} tenantId Tenant ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteTenant(tenantId: string, options?: AxiosRequestConfig<any> | undefined): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<void>>;
    /**
     * Get the details of tenant managed on the SaaSus Platform.
     * @summary Get Tenant Details
     * @param {string} tenantId Tenant ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getTenant(tenantId: string, options?: AxiosRequestConfig<any> | undefined): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<TenantDetail>>;
    /**
     * Get sign-in information via external identity provider per tenant.
     * @summary Get identity provider per tenant
     * @param {string} tenantId Tenant ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getTenantIdentityProviders(tenantId: string, options?: AxiosRequestConfig<any> | undefined): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<TenantIdentityProviders>>;
    /**
     * Get tenants managed by SaaSus Platform.
     * @summary Get Tenants
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getTenants(options?: AxiosRequestConfig<any> | undefined): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<Tenants>>;
    /**
     * Delete all information related to rate plans. Delete plans linked to tenants and plan definitions. If you are using the Stripe linkage, the linkage will be removed.
     * @summary Delete all information related to rate plans
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    resetPlan(options?: AxiosRequestConfig<any> | undefined): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<void>>;
    /**
     * Update SaaSus Platform tenant details.
     * @summary Update Tenant Details
     * @param {string} tenantId Tenant ID
     * @param {TenantProps} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateTenant(tenantId: string, body?: TenantProps | undefined, options?: AxiosRequestConfig<any> | undefined): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<void>>;
    /**
     * Update SaaSus Platform tenant billing information.
     * @summary Update Tenant Billing Information
     * @param {string} tenantId Tenant ID
     * @param {BillingInfo} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateTenantBillingInfo(tenantId: string, body?: BillingInfo | undefined, options?: AxiosRequestConfig<any> | undefined): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<void>>;
    /**
     * Update sign-in information via external identity provider per tenant.
     * @summary Update identity provider per tenant
     * @param {string} tenantId Tenant ID
     * @param {UpdateTenantIdentityProviderParam} [updateTenantIdentityProviderParam]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateTenantIdentityProvider(tenantId: string, updateTenantIdentityProviderParam?: UpdateTenantIdentityProviderParam | undefined, options?: AxiosRequestConfig<any> | undefined): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<void>>;
    /**
     * Update SaaSus Platform tenant plan information.
     * @summary Update Tenant Plan Information
     * @param {string} tenantId Tenant ID
     * @param {PlanReservation} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateTenantPlan(tenantId: string, body?: PlanReservation | undefined, options?: AxiosRequestConfig<any> | undefined): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<void>>;
};
/**
 * TenantApi - factory interface
 * @export
 */
export declare const TenantApiFactory: (configuration?: Configuration | undefined, basePath?: string | undefined, axios?: AxiosInstance | undefined) => {
    /**
     * Create a tenant managed by the SaaSus Platform.
     * @summary Create Tenant
     * @param {TenantProps} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createTenant(body?: TenantProps | undefined, options?: any): AxiosPromise<Tenant>;
    /**
     * Set Stripe initial information via billing
     * @summary Stripe Initial Setting
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createTenantAndPricing(options?: any): AxiosPromise<void>;
    /**
     * Delete customer and product from Stripe.
     * @summary Delete Customer and Product From Stripe
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteStripeTenantAndPricing(options?: any): AxiosPromise<void>;
    /**
     * Delete SaaSus Platform tenant.
     * @summary Delete Tenant
     * @param {string} tenantId Tenant ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteTenant(tenantId: string, options?: any): AxiosPromise<void>;
    /**
     * Get the details of tenant managed on the SaaSus Platform.
     * @summary Get Tenant Details
     * @param {string} tenantId Tenant ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getTenant(tenantId: string, options?: any): AxiosPromise<TenantDetail>;
    /**
     * Get sign-in information via external identity provider per tenant.
     * @summary Get identity provider per tenant
     * @param {string} tenantId Tenant ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getTenantIdentityProviders(tenantId: string, options?: any): AxiosPromise<TenantIdentityProviders>;
    /**
     * Get tenants managed by SaaSus Platform.
     * @summary Get Tenants
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getTenants(options?: any): AxiosPromise<Tenants>;
    /**
     * Delete all information related to rate plans. Delete plans linked to tenants and plan definitions. If you are using the Stripe linkage, the linkage will be removed.
     * @summary Delete all information related to rate plans
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    resetPlan(options?: any): AxiosPromise<void>;
    /**
     * Update SaaSus Platform tenant details.
     * @summary Update Tenant Details
     * @param {string} tenantId Tenant ID
     * @param {TenantProps} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateTenant(tenantId: string, body?: TenantProps | undefined, options?: any): AxiosPromise<void>;
    /**
     * Update SaaSus Platform tenant billing information.
     * @summary Update Tenant Billing Information
     * @param {string} tenantId Tenant ID
     * @param {BillingInfo} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateTenantBillingInfo(tenantId: string, body?: BillingInfo | undefined, options?: any): AxiosPromise<void>;
    /**
     * Update sign-in information via external identity provider per tenant.
     * @summary Update identity provider per tenant
     * @param {string} tenantId Tenant ID
     * @param {UpdateTenantIdentityProviderParam} [updateTenantIdentityProviderParam]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateTenantIdentityProvider(tenantId: string, updateTenantIdentityProviderParam?: UpdateTenantIdentityProviderParam | undefined, options?: any): AxiosPromise<void>;
    /**
     * Update SaaSus Platform tenant plan information.
     * @summary Update Tenant Plan Information
     * @param {string} tenantId Tenant ID
     * @param {PlanReservation} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateTenantPlan(tenantId: string, body?: PlanReservation | undefined, options?: any): AxiosPromise<void>;
};
/**
 * TenantApi - object-oriented interface
 * @export
 * @class TenantApi
 * @extends {BaseAPI}
 */
export declare class TenantApi extends BaseAPI {
    /**
     * Create a tenant managed by the SaaSus Platform.
     * @summary Create Tenant
     * @param {TenantProps} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TenantApi
     */
    createTenant(body?: TenantProps, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<Tenant, any>>;
    /**
     * Set Stripe initial information via billing
     * @summary Stripe Initial Setting
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TenantApi
     */
    createTenantAndPricing(options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * Delete customer and product from Stripe.
     * @summary Delete Customer and Product From Stripe
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TenantApi
     */
    deleteStripeTenantAndPricing(options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * Delete SaaSus Platform tenant.
     * @summary Delete Tenant
     * @param {string} tenantId Tenant ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TenantApi
     */
    deleteTenant(tenantId: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * Get the details of tenant managed on the SaaSus Platform.
     * @summary Get Tenant Details
     * @param {string} tenantId Tenant ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TenantApi
     */
    getTenant(tenantId: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<TenantDetail, any>>;
    /**
     * Get sign-in information via external identity provider per tenant.
     * @summary Get identity provider per tenant
     * @param {string} tenantId Tenant ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TenantApi
     */
    getTenantIdentityProviders(tenantId: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<TenantIdentityProviders, any>>;
    /**
     * Get tenants managed by SaaSus Platform.
     * @summary Get Tenants
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TenantApi
     */
    getTenants(options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<Tenants, any>>;
    /**
     * Delete all information related to rate plans. Delete plans linked to tenants and plan definitions. If you are using the Stripe linkage, the linkage will be removed.
     * @summary Delete all information related to rate plans
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TenantApi
     */
    resetPlan(options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * Update SaaSus Platform tenant details.
     * @summary Update Tenant Details
     * @param {string} tenantId Tenant ID
     * @param {TenantProps} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TenantApi
     */
    updateTenant(tenantId: string, body?: TenantProps, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * Update SaaSus Platform tenant billing information.
     * @summary Update Tenant Billing Information
     * @param {string} tenantId Tenant ID
     * @param {BillingInfo} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TenantApi
     */
    updateTenantBillingInfo(tenantId: string, body?: BillingInfo, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * Update sign-in information via external identity provider per tenant.
     * @summary Update identity provider per tenant
     * @param {string} tenantId Tenant ID
     * @param {UpdateTenantIdentityProviderParam} [updateTenantIdentityProviderParam]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TenantApi
     */
    updateTenantIdentityProvider(tenantId: string, updateTenantIdentityProviderParam?: UpdateTenantIdentityProviderParam, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * Update SaaSus Platform tenant plan information.
     * @summary Update Tenant Plan Information
     * @param {string} tenantId Tenant ID
     * @param {PlanReservation} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TenantApi
     */
    updateTenantPlan(tenantId: string, body?: PlanReservation, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
}
/**
 * TenantAttributeApi - axios parameter creator
 * @export
 */
export declare const TenantAttributeApiAxiosParamCreator: (configuration?: Configuration | undefined) => {
    /**
     * Register additional tenant attributes to be managed by SaaSus Platform. For example, tenant name, memo, etc., then get the attributes from SaaS using the SaaSus SDK/API.
     * @summary Create Tenant Attribute
     * @param {Attribute} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createTenantAttribute: (body?: Attribute | undefined, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Deletes tenant attributes managed by SaaSus Platform.
     * @summary Delete Tenant Attribute
     * @param {string} attributeName Attribute Name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteTenantAttribute: (attributeName: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Get definitions for additional tenant attributes managed by the SaaSus Platform. For example, tenant name, memo, etc., then get the attributes from SaaS using the SaaSus SDK/API.
     * @summary Get Tenant Attributes
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getTenantAttributes: (options?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * TenantAttributeApi - functional programming interface
 * @export
 */
export declare const TenantAttributeApiFp: (configuration?: Configuration | undefined) => {
    /**
     * Register additional tenant attributes to be managed by SaaSus Platform. For example, tenant name, memo, etc., then get the attributes from SaaS using the SaaSus SDK/API.
     * @summary Create Tenant Attribute
     * @param {Attribute} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createTenantAttribute(body?: Attribute | undefined, options?: AxiosRequestConfig<any> | undefined): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<Attribute>>;
    /**
     * Deletes tenant attributes managed by SaaSus Platform.
     * @summary Delete Tenant Attribute
     * @param {string} attributeName Attribute Name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteTenantAttribute(attributeName: string, options?: AxiosRequestConfig<any> | undefined): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<void>>;
    /**
     * Get definitions for additional tenant attributes managed by the SaaSus Platform. For example, tenant name, memo, etc., then get the attributes from SaaS using the SaaSus SDK/API.
     * @summary Get Tenant Attributes
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getTenantAttributes(options?: AxiosRequestConfig<any> | undefined): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<TenantAttributes>>;
};
/**
 * TenantAttributeApi - factory interface
 * @export
 */
export declare const TenantAttributeApiFactory: (configuration?: Configuration | undefined, basePath?: string | undefined, axios?: AxiosInstance | undefined) => {
    /**
     * Register additional tenant attributes to be managed by SaaSus Platform. For example, tenant name, memo, etc., then get the attributes from SaaS using the SaaSus SDK/API.
     * @summary Create Tenant Attribute
     * @param {Attribute} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createTenantAttribute(body?: Attribute | undefined, options?: any): AxiosPromise<Attribute>;
    /**
     * Deletes tenant attributes managed by SaaSus Platform.
     * @summary Delete Tenant Attribute
     * @param {string} attributeName Attribute Name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteTenantAttribute(attributeName: string, options?: any): AxiosPromise<void>;
    /**
     * Get definitions for additional tenant attributes managed by the SaaSus Platform. For example, tenant name, memo, etc., then get the attributes from SaaS using the SaaSus SDK/API.
     * @summary Get Tenant Attributes
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getTenantAttributes(options?: any): AxiosPromise<TenantAttributes>;
};
/**
 * TenantAttributeApi - object-oriented interface
 * @export
 * @class TenantAttributeApi
 * @extends {BaseAPI}
 */
export declare class TenantAttributeApi extends BaseAPI {
    /**
     * Register additional tenant attributes to be managed by SaaSus Platform. For example, tenant name, memo, etc., then get the attributes from SaaS using the SaaSus SDK/API.
     * @summary Create Tenant Attribute
     * @param {Attribute} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TenantAttributeApi
     */
    createTenantAttribute(body?: Attribute, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<Attribute, any>>;
    /**
     * Deletes tenant attributes managed by SaaSus Platform.
     * @summary Delete Tenant Attribute
     * @param {string} attributeName Attribute Name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TenantAttributeApi
     */
    deleteTenantAttribute(attributeName: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * Get definitions for additional tenant attributes managed by the SaaSus Platform. For example, tenant name, memo, etc., then get the attributes from SaaS using the SaaSus SDK/API.
     * @summary Get Tenant Attributes
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TenantAttributeApi
     */
    getTenantAttributes(options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<TenantAttributes, any>>;
}
/**
 * TenantUserApi - axios parameter creator
 * @export
 */
export declare const TenantUserApiAxiosParamCreator: (configuration?: Configuration | undefined) => {
    /**
     * Create a tenant user. If attributes is empty, the additional attributes will be created empty.
     * @summary Create Tenant User
     * @param {string} tenantId Tenant ID
     * @param {CreateTenantUserParam} [createTenantUserParam]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createTenantUser: (tenantId: string, createTenantUserParam?: CreateTenantUserParam | undefined, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Create roles on tenant users.
     * @summary Create Tenant User Role
     * @param {string} tenantId Tenant ID
     * @param {string} userId User ID
     * @param {number} envId Env ID
     * @param {CreateTenantUserRolesParam} [createTenantUserRolesParam]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createTenantUserRoles: (tenantId: string, userId: string, envId: number, createTenantUserRolesParam?: CreateTenantUserRolesParam | undefined, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Delete a user from the tenant.
     * @summary Delete Tenant User
     * @param {string} tenantId Tenant ID
     * @param {string} userId User ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteTenantUser: (tenantId: string, userId: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Remove a role from a tenant user.
     * @summary Remove Role From Tenant User
     * @param {string} tenantId Tenant ID
     * @param {string} userId User ID
     * @param {number} envId Env ID
     * @param {string} roleName Role name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteTenantUserRole: (tenantId: string, userId: string, envId: number, roleName: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Get information on user belonging to the tenant from the user ID. If the user belongs to multiple tenants, it will be returned as another object.
     * @summary Get User Info
     * @param {string} userId User ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllTenantUser: (userId: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Get all users belonging to the tenant. The same user belonging to multiple tenants will be returned as a different object. Id is not unique.
     * @summary Get Users
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllTenantUsers: (options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Get one tenant user by specific ID.
     * @summary Get Tenant User
     * @param {string} tenantId Tenant ID
     * @param {string} userId User ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getTenantUser: (tenantId: string, userId: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Get all the users belonging to the tenant. Id is unique.
     * @summary Get Tenant Users
     * @param {string} tenantId Tenant ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getTenantUsers: (tenantId: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Update tenant user attributes.
     * @summary Update Tenant User Attribute
     * @param {string} tenantId Tenant ID
     * @param {string} userId User ID
     * @param {UpdateTenantUserParam} [updateTenantUserParam]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateTenantUser: (tenantId: string, userId: string, updateTenantUserParam?: UpdateTenantUserParam | undefined, options?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * TenantUserApi - functional programming interface
 * @export
 */
export declare const TenantUserApiFp: (configuration?: Configuration | undefined) => {
    /**
     * Create a tenant user. If attributes is empty, the additional attributes will be created empty.
     * @summary Create Tenant User
     * @param {string} tenantId Tenant ID
     * @param {CreateTenantUserParam} [createTenantUserParam]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createTenantUser(tenantId: string, createTenantUserParam?: CreateTenantUserParam | undefined, options?: AxiosRequestConfig<any> | undefined): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<User>>;
    /**
     * Create roles on tenant users.
     * @summary Create Tenant User Role
     * @param {string} tenantId Tenant ID
     * @param {string} userId User ID
     * @param {number} envId Env ID
     * @param {CreateTenantUserRolesParam} [createTenantUserRolesParam]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createTenantUserRoles(tenantId: string, userId: string, envId: number, createTenantUserRolesParam?: CreateTenantUserRolesParam | undefined, options?: AxiosRequestConfig<any> | undefined): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<void>>;
    /**
     * Delete a user from the tenant.
     * @summary Delete Tenant User
     * @param {string} tenantId Tenant ID
     * @param {string} userId User ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteTenantUser(tenantId: string, userId: string, options?: AxiosRequestConfig<any> | undefined): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<void>>;
    /**
     * Remove a role from a tenant user.
     * @summary Remove Role From Tenant User
     * @param {string} tenantId Tenant ID
     * @param {string} userId User ID
     * @param {number} envId Env ID
     * @param {string} roleName Role name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteTenantUserRole(tenantId: string, userId: string, envId: number, roleName: string, options?: AxiosRequestConfig<any> | undefined): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<void>>;
    /**
     * Get information on user belonging to the tenant from the user ID. If the user belongs to multiple tenants, it will be returned as another object.
     * @summary Get User Info
     * @param {string} userId User ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllTenantUser(userId: string, options?: AxiosRequestConfig<any> | undefined): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<Users>>;
    /**
     * Get all users belonging to the tenant. The same user belonging to multiple tenants will be returned as a different object. Id is not unique.
     * @summary Get Users
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllTenantUsers(options?: AxiosRequestConfig<any> | undefined): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<Users>>;
    /**
     * Get one tenant user by specific ID.
     * @summary Get Tenant User
     * @param {string} tenantId Tenant ID
     * @param {string} userId User ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getTenantUser(tenantId: string, userId: string, options?: AxiosRequestConfig<any> | undefined): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<User>>;
    /**
     * Get all the users belonging to the tenant. Id is unique.
     * @summary Get Tenant Users
     * @param {string} tenantId Tenant ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getTenantUsers(tenantId: string, options?: AxiosRequestConfig<any> | undefined): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<Users>>;
    /**
     * Update tenant user attributes.
     * @summary Update Tenant User Attribute
     * @param {string} tenantId Tenant ID
     * @param {string} userId User ID
     * @param {UpdateTenantUserParam} [updateTenantUserParam]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateTenantUser(tenantId: string, userId: string, updateTenantUserParam?: UpdateTenantUserParam | undefined, options?: AxiosRequestConfig<any> | undefined): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<void>>;
};
/**
 * TenantUserApi - factory interface
 * @export
 */
export declare const TenantUserApiFactory: (configuration?: Configuration | undefined, basePath?: string | undefined, axios?: AxiosInstance | undefined) => {
    /**
     * Create a tenant user. If attributes is empty, the additional attributes will be created empty.
     * @summary Create Tenant User
     * @param {string} tenantId Tenant ID
     * @param {CreateTenantUserParam} [createTenantUserParam]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createTenantUser(tenantId: string, createTenantUserParam?: CreateTenantUserParam | undefined, options?: any): AxiosPromise<User>;
    /**
     * Create roles on tenant users.
     * @summary Create Tenant User Role
     * @param {string} tenantId Tenant ID
     * @param {string} userId User ID
     * @param {number} envId Env ID
     * @param {CreateTenantUserRolesParam} [createTenantUserRolesParam]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createTenantUserRoles(tenantId: string, userId: string, envId: number, createTenantUserRolesParam?: CreateTenantUserRolesParam | undefined, options?: any): AxiosPromise<void>;
    /**
     * Delete a user from the tenant.
     * @summary Delete Tenant User
     * @param {string} tenantId Tenant ID
     * @param {string} userId User ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteTenantUser(tenantId: string, userId: string, options?: any): AxiosPromise<void>;
    /**
     * Remove a role from a tenant user.
     * @summary Remove Role From Tenant User
     * @param {string} tenantId Tenant ID
     * @param {string} userId User ID
     * @param {number} envId Env ID
     * @param {string} roleName Role name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteTenantUserRole(tenantId: string, userId: string, envId: number, roleName: string, options?: any): AxiosPromise<void>;
    /**
     * Get information on user belonging to the tenant from the user ID. If the user belongs to multiple tenants, it will be returned as another object.
     * @summary Get User Info
     * @param {string} userId User ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllTenantUser(userId: string, options?: any): AxiosPromise<Users>;
    /**
     * Get all users belonging to the tenant. The same user belonging to multiple tenants will be returned as a different object. Id is not unique.
     * @summary Get Users
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllTenantUsers(options?: any): AxiosPromise<Users>;
    /**
     * Get one tenant user by specific ID.
     * @summary Get Tenant User
     * @param {string} tenantId Tenant ID
     * @param {string} userId User ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getTenantUser(tenantId: string, userId: string, options?: any): AxiosPromise<User>;
    /**
     * Get all the users belonging to the tenant. Id is unique.
     * @summary Get Tenant Users
     * @param {string} tenantId Tenant ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getTenantUsers(tenantId: string, options?: any): AxiosPromise<Users>;
    /**
     * Update tenant user attributes.
     * @summary Update Tenant User Attribute
     * @param {string} tenantId Tenant ID
     * @param {string} userId User ID
     * @param {UpdateTenantUserParam} [updateTenantUserParam]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateTenantUser(tenantId: string, userId: string, updateTenantUserParam?: UpdateTenantUserParam | undefined, options?: any): AxiosPromise<void>;
};
/**
 * TenantUserApi - object-oriented interface
 * @export
 * @class TenantUserApi
 * @extends {BaseAPI}
 */
export declare class TenantUserApi extends BaseAPI {
    /**
     * Create a tenant user. If attributes is empty, the additional attributes will be created empty.
     * @summary Create Tenant User
     * @param {string} tenantId Tenant ID
     * @param {CreateTenantUserParam} [createTenantUserParam]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TenantUserApi
     */
    createTenantUser(tenantId: string, createTenantUserParam?: CreateTenantUserParam, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<User, any>>;
    /**
     * Create roles on tenant users.
     * @summary Create Tenant User Role
     * @param {string} tenantId Tenant ID
     * @param {string} userId User ID
     * @param {number} envId Env ID
     * @param {CreateTenantUserRolesParam} [createTenantUserRolesParam]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TenantUserApi
     */
    createTenantUserRoles(tenantId: string, userId: string, envId: number, createTenantUserRolesParam?: CreateTenantUserRolesParam, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * Delete a user from the tenant.
     * @summary Delete Tenant User
     * @param {string} tenantId Tenant ID
     * @param {string} userId User ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TenantUserApi
     */
    deleteTenantUser(tenantId: string, userId: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * Remove a role from a tenant user.
     * @summary Remove Role From Tenant User
     * @param {string} tenantId Tenant ID
     * @param {string} userId User ID
     * @param {number} envId Env ID
     * @param {string} roleName Role name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TenantUserApi
     */
    deleteTenantUserRole(tenantId: string, userId: string, envId: number, roleName: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * Get information on user belonging to the tenant from the user ID. If the user belongs to multiple tenants, it will be returned as another object.
     * @summary Get User Info
     * @param {string} userId User ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TenantUserApi
     */
    getAllTenantUser(userId: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<Users, any>>;
    /**
     * Get all users belonging to the tenant. The same user belonging to multiple tenants will be returned as a different object. Id is not unique.
     * @summary Get Users
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TenantUserApi
     */
    getAllTenantUsers(options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<Users, any>>;
    /**
     * Get one tenant user by specific ID.
     * @summary Get Tenant User
     * @param {string} tenantId Tenant ID
     * @param {string} userId User ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TenantUserApi
     */
    getTenantUser(tenantId: string, userId: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<User, any>>;
    /**
     * Get all the users belonging to the tenant. Id is unique.
     * @summary Get Tenant Users
     * @param {string} tenantId Tenant ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TenantUserApi
     */
    getTenantUsers(tenantId: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<Users, any>>;
    /**
     * Update tenant user attributes.
     * @summary Update Tenant User Attribute
     * @param {string} tenantId Tenant ID
     * @param {string} userId User ID
     * @param {UpdateTenantUserParam} [updateTenantUserParam]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TenantUserApi
     */
    updateTenantUser(tenantId: string, userId: string, updateTenantUserParam?: UpdateTenantUserParam, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
}
/**
 * UserAttributeApi - axios parameter creator
 * @export
 */
export declare const UserAttributeApiAxiosParamCreator: (configuration?: Configuration | undefined) => {
    /**
     * Create additional user attributes to be kept on the SaaSus Platform. For example, you can define items associated with a user, such as user name, birthday, etc. If you don\'t want personal information on the SaaS Platform side, personal information can be kept on the SaaS side without user attribute definition.
     * @summary Create User Attributes
     * @param {Attribute} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createUserAttribute: (body?: Attribute | undefined, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Delete user attributes kept on the SaaSus Platform.
     * @summary Delete User Attribute
     * @param {string} attributeName Attribute Name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteUserAttribute: (attributeName: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Get additional attributes of the user saved in the SaaSus Platform. For example, you can define items associated with a user, such as user name, birthday, etc. If you don\'t want personal information on the SaaS Platform side, personal information can be kept on the SaaS side without user attribute definition.
     * @summary Get User Attributes
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUserAttributes: (options?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * UserAttributeApi - functional programming interface
 * @export
 */
export declare const UserAttributeApiFp: (configuration?: Configuration | undefined) => {
    /**
     * Create additional user attributes to be kept on the SaaSus Platform. For example, you can define items associated with a user, such as user name, birthday, etc. If you don\'t want personal information on the SaaS Platform side, personal information can be kept on the SaaS side without user attribute definition.
     * @summary Create User Attributes
     * @param {Attribute} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createUserAttribute(body?: Attribute | undefined, options?: AxiosRequestConfig<any> | undefined): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<Attribute>>;
    /**
     * Delete user attributes kept on the SaaSus Platform.
     * @summary Delete User Attribute
     * @param {string} attributeName Attribute Name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteUserAttribute(attributeName: string, options?: AxiosRequestConfig<any> | undefined): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<void>>;
    /**
     * Get additional attributes of the user saved in the SaaSus Platform. For example, you can define items associated with a user, such as user name, birthday, etc. If you don\'t want personal information on the SaaS Platform side, personal information can be kept on the SaaS side without user attribute definition.
     * @summary Get User Attributes
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUserAttributes(options?: AxiosRequestConfig<any> | undefined): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<UserAttributes>>;
};
/**
 * UserAttributeApi - factory interface
 * @export
 */
export declare const UserAttributeApiFactory: (configuration?: Configuration | undefined, basePath?: string | undefined, axios?: AxiosInstance | undefined) => {
    /**
     * Create additional user attributes to be kept on the SaaSus Platform. For example, you can define items associated with a user, such as user name, birthday, etc. If you don\'t want personal information on the SaaS Platform side, personal information can be kept on the SaaS side without user attribute definition.
     * @summary Create User Attributes
     * @param {Attribute} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createUserAttribute(body?: Attribute | undefined, options?: any): AxiosPromise<Attribute>;
    /**
     * Delete user attributes kept on the SaaSus Platform.
     * @summary Delete User Attribute
     * @param {string} attributeName Attribute Name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteUserAttribute(attributeName: string, options?: any): AxiosPromise<void>;
    /**
     * Get additional attributes of the user saved in the SaaSus Platform. For example, you can define items associated with a user, such as user name, birthday, etc. If you don\'t want personal information on the SaaS Platform side, personal information can be kept on the SaaS side without user attribute definition.
     * @summary Get User Attributes
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUserAttributes(options?: any): AxiosPromise<UserAttributes>;
};
/**
 * UserAttributeApi - object-oriented interface
 * @export
 * @class UserAttributeApi
 * @extends {BaseAPI}
 */
export declare class UserAttributeApi extends BaseAPI {
    /**
     * Create additional user attributes to be kept on the SaaSus Platform. For example, you can define items associated with a user, such as user name, birthday, etc. If you don\'t want personal information on the SaaS Platform side, personal information can be kept on the SaaS side without user attribute definition.
     * @summary Create User Attributes
     * @param {Attribute} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserAttributeApi
     */
    createUserAttribute(body?: Attribute, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<Attribute, any>>;
    /**
     * Delete user attributes kept on the SaaSus Platform.
     * @summary Delete User Attribute
     * @param {string} attributeName Attribute Name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserAttributeApi
     */
    deleteUserAttribute(attributeName: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * Get additional attributes of the user saved in the SaaSus Platform. For example, you can define items associated with a user, such as user name, birthday, etc. If you don\'t want personal information on the SaaS Platform side, personal information can be kept on the SaaS side without user attribute definition.
     * @summary Get User Attributes
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserAttributeApi
     */
    getUserAttributes(options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<UserAttributes, any>>;
}
/**
 * UserInfoApi - axios parameter creator
 * @export
 */
export declare const UserInfoApiAxiosParamCreator: (configuration?: Configuration | undefined) => {
    /**
     * User information is obtained based on the ID token of the SaaS user (registered user). The ID token is passed to the Callback URL during login from the SaaSus Platform generated login screen. User information can be obtained from calling this API with an ID token from the URL on the server side. Since the acquired tenant, role (role), price plan, etc. are included, it is possible to implement authorization based on it.
     * @summary Get User Info
     * @param {string} token ID Token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUserInfo: (token: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * UserInfoApi - functional programming interface
 * @export
 */
export declare const UserInfoApiFp: (configuration?: Configuration | undefined) => {
    /**
     * User information is obtained based on the ID token of the SaaS user (registered user). The ID token is passed to the Callback URL during login from the SaaSus Platform generated login screen. User information can be obtained from calling this API with an ID token from the URL on the server side. Since the acquired tenant, role (role), price plan, etc. are included, it is possible to implement authorization based on it.
     * @summary Get User Info
     * @param {string} token ID Token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUserInfo(token: string, options?: AxiosRequestConfig<any> | undefined): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<UserInfo>>;
};
/**
 * UserInfoApi - factory interface
 * @export
 */
export declare const UserInfoApiFactory: (configuration?: Configuration | undefined, basePath?: string | undefined, axios?: AxiosInstance | undefined) => {
    /**
     * User information is obtained based on the ID token of the SaaS user (registered user). The ID token is passed to the Callback URL during login from the SaaSus Platform generated login screen. User information can be obtained from calling this API with an ID token from the URL on the server side. Since the acquired tenant, role (role), price plan, etc. are included, it is possible to implement authorization based on it.
     * @summary Get User Info
     * @param {string} token ID Token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUserInfo(token: string, options?: any): AxiosPromise<UserInfo>;
};
/**
 * UserInfoApi - object-oriented interface
 * @export
 * @class UserInfoApi
 * @extends {BaseAPI}
 */
export declare class UserInfoApi extends BaseAPI {
    /**
     * User information is obtained based on the ID token of the SaaS user (registered user). The ID token is passed to the Callback URL during login from the SaaSus Platform generated login screen. User information can be obtained from calling this API with an ID token from the URL on the server side. Since the acquired tenant, role (role), price plan, etc. are included, it is possible to implement authorization based on it.
     * @summary Get User Info
     * @param {string} token ID Token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserInfoApi
     */
    getUserInfo(token: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<UserInfo, any>>;
}
