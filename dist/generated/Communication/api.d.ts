/**
 * SaaSus Communication API Schema
 * SaaSus Communication API Schema
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import { Configuration } from './configuration';
import { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { RequestArgs, BaseAPI } from './base';
/**
 *
 * @export
 * @interface Comment
 */
export interface Comment {
    /**
     *
     * @type {string}
     * @memberof Comment
     */
    'id': string;
    /**
     *
     * @type {number}
     * @memberof Comment
     */
    'created_at': number;
    /**
     *
     * @type {string}
     * @memberof Comment
     */
    'body': string;
}
/**
 *
 * @export
 * @interface CommentAllOf
 */
export interface CommentAllOf {
    /**
     *
     * @type {string}
     * @memberof CommentAllOf
     */
    'id': string;
    /**
     *
     * @type {number}
     * @memberof CommentAllOf
     */
    'created_at': number;
    /**
     *
     * @type {string}
     * @memberof CommentAllOf
     */
    'body': string;
}
/**
 *
 * @export
 * @interface Comments
 */
export interface Comments {
    /**
     *
     * @type {Array<Comment>}
     * @memberof Comments
     */
    'comments': Array<Comment>;
}
/**
 *
 * @export
 * @interface CreateFeedbackCommentParam
 */
export interface CreateFeedbackCommentParam {
    /**
     *
     * @type {string}
     * @memberof CreateFeedbackCommentParam
     */
    'body': string;
}
/**
 *
 * @export
 * @interface CreateFeedbackParam
 */
export interface CreateFeedbackParam {
    /**
     *
     * @type {string}
     * @memberof CreateFeedbackParam
     */
    'user_id': string;
    /**
     *
     * @type {string}
     * @memberof CreateFeedbackParam
     */
    'feedback_title': string;
    /**
     *
     * @type {string}
     * @memberof CreateFeedbackParam
     */
    'feedback_description': string;
}
/**
 *
 * @export
 * @interface CreateFeedbackParamAllOf
 */
export interface CreateFeedbackParamAllOf {
    /**
     *
     * @type {string}
     * @memberof CreateFeedbackParamAllOf
     */
    'user_id': string;
}
/**
 *
 * @export
 * @interface CreateVoteUserParam
 */
export interface CreateVoteUserParam {
    /**
     *
     * @type {string}
     * @memberof CreateVoteUserParam
     */
    'user_id': string;
}
/**
 *
 * @export
 * @interface Feedback
 */
export interface Feedback {
    /**
     *
     * @type {string}
     * @memberof Feedback
     */
    'id': string;
    /**
     *
     * @type {string}
     * @memberof Feedback
     */
    'user_id': string;
    /**
     *
     * @type {number}
     * @memberof Feedback
     */
    'created_at': number;
    /**
     *
     * @type {number}
     * @memberof Feedback
     */
    'status': number;
    /**
     *
     * @type {string}
     * @memberof Feedback
     */
    'feedback_title': string;
    /**
     *
     * @type {string}
     * @memberof Feedback
     */
    'feedback_description': string;
    /**
     *
     * @type {Array<Comment>}
     * @memberof Feedback
     */
    'comments': Array<Comment>;
    /**
     *
     * @type {number}
     * @memberof Feedback
     */
    'count': number;
    /**
     *
     * @type {Array<User>}
     * @memberof Feedback
     */
    'users': Array<User>;
}
/**
 *
 * @export
 * @interface FeedbackAllOf
 */
export interface FeedbackAllOf {
    /**
     *
     * @type {string}
     * @memberof FeedbackAllOf
     */
    'id': string;
    /**
     *
     * @type {string}
     * @memberof FeedbackAllOf
     */
    'user_id': string;
    /**
     *
     * @type {number}
     * @memberof FeedbackAllOf
     */
    'created_at': number;
    /**
     *
     * @type {number}
     * @memberof FeedbackAllOf
     */
    'status': number;
}
/**
 *
 * @export
 * @interface FeedbackSaveProps
 */
export interface FeedbackSaveProps {
    /**
     *
     * @type {string}
     * @memberof FeedbackSaveProps
     */
    'feedback_title': string;
    /**
     *
     * @type {string}
     * @memberof FeedbackSaveProps
     */
    'feedback_description': string;
}
/**
 *
 * @export
 * @interface Feedbacks
 */
export interface Feedbacks {
    /**
     *
     * @type {Array<Feedback>}
     * @memberof Feedbacks
     */
    'feedbacks': Array<Feedback>;
}
/**
 *
 * @export
 * @interface ModelError
 */
export interface ModelError {
    /**
     * permission_denied
     * @type {string}
     * @memberof ModelError
     */
    'type': string;
    /**
     * Error message
     * @type {string}
     * @memberof ModelError
     */
    'message': string;
}
/**
 *
 * @export
 * @interface UpdateFeedbackCommentParam
 */
export interface UpdateFeedbackCommentParam {
    /**
     *
     * @type {string}
     * @memberof UpdateFeedbackCommentParam
     */
    'body': string;
}
/**
 *
 * @export
 * @interface UpdateFeedbackParam
 */
export interface UpdateFeedbackParam {
    /**
     *
     * @type {string}
     * @memberof UpdateFeedbackParam
     */
    'feedback_title': string;
    /**
     *
     * @type {string}
     * @memberof UpdateFeedbackParam
     */
    'feedback_description': string;
}
/**
 *
 * @export
 * @interface UpdateFeedbackStatusParam
 */
export interface UpdateFeedbackStatusParam {
    /**
     *
     * @type {number}
     * @memberof UpdateFeedbackStatusParam
     */
    'status': number;
}
/**
 *
 * @export
 * @interface User
 */
export interface User {
    /**
     *
     * @type {string}
     * @memberof User
     */
    'user_id': string;
}
/**
 *
 * @export
 * @interface Users
 */
export interface Users {
    /**
     *
     * @type {Array<User>}
     * @memberof Users
     */
    'users': Array<User>;
}
/**
 *
 * @export
 * @interface Votes
 */
export interface Votes {
    /**
     *
     * @type {number}
     * @memberof Votes
     */
    'count': number;
    /**
     *
     * @type {Array<User>}
     * @memberof Votes
     */
    'users': Array<User>;
}
/**
 *
 * @export
 * @interface VotesAllOf
 */
export interface VotesAllOf {
    /**
     *
     * @type {number}
     * @memberof VotesAllOf
     */
    'count': number;
}
/**
 * ErrorApi - axios parameter creator
 * @export
 */
export declare const ErrorApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * This endpoint is used for testing purposes. Returns a server error with status code 500.
     * @summary Return Internal Server Error
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    returnInternalServerError: (options?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * ErrorApi - functional programming interface
 * @export
 */
export declare const ErrorApiFp: (configuration?: Configuration) => {
    /**
     * This endpoint is used for testing purposes. Returns a server error with status code 500.
     * @summary Return Internal Server Error
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    returnInternalServerError(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
};
/**
 * ErrorApi - factory interface
 * @export
 */
export declare const ErrorApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * This endpoint is used for testing purposes. Returns a server error with status code 500.
     * @summary Return Internal Server Error
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    returnInternalServerError(options?: any): AxiosPromise<void>;
};
/**
 * ErrorApi - object-oriented interface
 * @export
 * @class ErrorApi
 * @extends {BaseAPI}
 */
export declare class ErrorApi extends BaseAPI {
    /**
     * This endpoint is used for testing purposes. Returns a server error with status code 500.
     * @summary Return Internal Server Error
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ErrorApi
     */
    returnInternalServerError(options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
}
/**
 * FeedbackApi - axios parameter creator
 * @export
 */
export declare const FeedbackApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Create Feedback.
     * @summary Create Feedback
     * @param {CreateFeedbackParam} [createFeedbackParam]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createFeedback: (createFeedbackParam?: CreateFeedbackParam, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Post comment to feedback.
     * @summary Create Feedback Comment
     * @param {string} feedbackId
     * @param {CreateFeedbackCommentParam} [createFeedbackCommentParam]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createFeedbackComment: (feedbackId: string, createFeedbackCommentParam?: CreateFeedbackCommentParam, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Vote for feedback.
     * @summary Create Vote User
     * @param {string} feedbackId
     * @param {CreateVoteUserParam} [createVoteUserParam]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createVoteUser: (feedbackId: string, createVoteUserParam?: CreateVoteUserParam, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Delete Feedback.
     * @summary Delete Feedback
     * @param {string} feedbackId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteFeedback: (feedbackId: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Delete comment for feedback.
     * @summary Delete Feedback Comment
     * @param {string} feedbackId
     * @param {string} commentId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteFeedbackComment: (feedbackId: string, commentId: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Cancel vote for feedback.
     * @summary Delete Vote For Feedback
     * @param {string} feedbackId
     * @param {string} userId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteVoteForFeedback: (feedbackId: string, userId: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Retrieve feedback.
     * @summary Get Feedback
     * @param {string} feedbackId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getFeedback: (feedbackId: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Retrieve comment from feedback.
     * @summary Get Feedback Comment
     * @param {string} feedbackId
     * @param {string} commentId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getFeedbackComment: (feedbackId: string, commentId: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Get the list of feedbacks.
     * @summary Get Feedbacks
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getFeedbacks: (options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Edit feedback.
     * @summary Update Feedback
     * @param {string} feedbackId
     * @param {UpdateFeedbackParam} [updateFeedbackParam]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateFeedback: (feedbackId: string, updateFeedbackParam?: UpdateFeedbackParam, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Edit comment for feedback.
     * @summary Update Feedback Comment
     * @param {string} feedbackId
     * @param {string} commentId
     * @param {UpdateFeedbackCommentParam} [updateFeedbackCommentParam]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateFeedbackComment: (feedbackId: string, commentId: string, updateFeedbackCommentParam?: UpdateFeedbackCommentParam, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Update Feedback Status.
     * @summary Update Feedback Status
     * @param {string} feedbackId
     * @param {UpdateFeedbackStatusParam} [updateFeedbackStatusParam]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateFeedbackStatus: (feedbackId: string, updateFeedbackStatusParam?: UpdateFeedbackStatusParam, options?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * FeedbackApi - functional programming interface
 * @export
 */
export declare const FeedbackApiFp: (configuration?: Configuration) => {
    /**
     * Create Feedback.
     * @summary Create Feedback
     * @param {CreateFeedbackParam} [createFeedbackParam]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createFeedback(createFeedbackParam?: CreateFeedbackParam, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Feedback>>;
    /**
     * Post comment to feedback.
     * @summary Create Feedback Comment
     * @param {string} feedbackId
     * @param {CreateFeedbackCommentParam} [createFeedbackCommentParam]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createFeedbackComment(feedbackId: string, createFeedbackCommentParam?: CreateFeedbackCommentParam, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Comment>>;
    /**
     * Vote for feedback.
     * @summary Create Vote User
     * @param {string} feedbackId
     * @param {CreateVoteUserParam} [createVoteUserParam]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createVoteUser(feedbackId: string, createVoteUserParam?: CreateVoteUserParam, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Votes>>;
    /**
     * Delete Feedback.
     * @summary Delete Feedback
     * @param {string} feedbackId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteFeedback(feedbackId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * Delete comment for feedback.
     * @summary Delete Feedback Comment
     * @param {string} feedbackId
     * @param {string} commentId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteFeedbackComment(feedbackId: string, commentId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * Cancel vote for feedback.
     * @summary Delete Vote For Feedback
     * @param {string} feedbackId
     * @param {string} userId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteVoteForFeedback(feedbackId: string, userId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * Retrieve feedback.
     * @summary Get Feedback
     * @param {string} feedbackId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getFeedback(feedbackId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Feedback>>;
    /**
     * Retrieve comment from feedback.
     * @summary Get Feedback Comment
     * @param {string} feedbackId
     * @param {string} commentId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getFeedbackComment(feedbackId: string, commentId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Comment>>;
    /**
     * Get the list of feedbacks.
     * @summary Get Feedbacks
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getFeedbacks(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Feedbacks>>;
    /**
     * Edit feedback.
     * @summary Update Feedback
     * @param {string} feedbackId
     * @param {UpdateFeedbackParam} [updateFeedbackParam]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateFeedback(feedbackId: string, updateFeedbackParam?: UpdateFeedbackParam, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * Edit comment for feedback.
     * @summary Update Feedback Comment
     * @param {string} feedbackId
     * @param {string} commentId
     * @param {UpdateFeedbackCommentParam} [updateFeedbackCommentParam]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateFeedbackComment(feedbackId: string, commentId: string, updateFeedbackCommentParam?: UpdateFeedbackCommentParam, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * Update Feedback Status.
     * @summary Update Feedback Status
     * @param {string} feedbackId
     * @param {UpdateFeedbackStatusParam} [updateFeedbackStatusParam]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateFeedbackStatus(feedbackId: string, updateFeedbackStatusParam?: UpdateFeedbackStatusParam, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
};
/**
 * FeedbackApi - factory interface
 * @export
 */
export declare const FeedbackApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Create Feedback.
     * @summary Create Feedback
     * @param {CreateFeedbackParam} [createFeedbackParam]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createFeedback(createFeedbackParam?: CreateFeedbackParam, options?: any): AxiosPromise<Feedback>;
    /**
     * Post comment to feedback.
     * @summary Create Feedback Comment
     * @param {string} feedbackId
     * @param {CreateFeedbackCommentParam} [createFeedbackCommentParam]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createFeedbackComment(feedbackId: string, createFeedbackCommentParam?: CreateFeedbackCommentParam, options?: any): AxiosPromise<Comment>;
    /**
     * Vote for feedback.
     * @summary Create Vote User
     * @param {string} feedbackId
     * @param {CreateVoteUserParam} [createVoteUserParam]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createVoteUser(feedbackId: string, createVoteUserParam?: CreateVoteUserParam, options?: any): AxiosPromise<Votes>;
    /**
     * Delete Feedback.
     * @summary Delete Feedback
     * @param {string} feedbackId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteFeedback(feedbackId: string, options?: any): AxiosPromise<void>;
    /**
     * Delete comment for feedback.
     * @summary Delete Feedback Comment
     * @param {string} feedbackId
     * @param {string} commentId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteFeedbackComment(feedbackId: string, commentId: string, options?: any): AxiosPromise<void>;
    /**
     * Cancel vote for feedback.
     * @summary Delete Vote For Feedback
     * @param {string} feedbackId
     * @param {string} userId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteVoteForFeedback(feedbackId: string, userId: string, options?: any): AxiosPromise<void>;
    /**
     * Retrieve feedback.
     * @summary Get Feedback
     * @param {string} feedbackId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getFeedback(feedbackId: string, options?: any): AxiosPromise<Feedback>;
    /**
     * Retrieve comment from feedback.
     * @summary Get Feedback Comment
     * @param {string} feedbackId
     * @param {string} commentId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getFeedbackComment(feedbackId: string, commentId: string, options?: any): AxiosPromise<Comment>;
    /**
     * Get the list of feedbacks.
     * @summary Get Feedbacks
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getFeedbacks(options?: any): AxiosPromise<Feedbacks>;
    /**
     * Edit feedback.
     * @summary Update Feedback
     * @param {string} feedbackId
     * @param {UpdateFeedbackParam} [updateFeedbackParam]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateFeedback(feedbackId: string, updateFeedbackParam?: UpdateFeedbackParam, options?: any): AxiosPromise<void>;
    /**
     * Edit comment for feedback.
     * @summary Update Feedback Comment
     * @param {string} feedbackId
     * @param {string} commentId
     * @param {UpdateFeedbackCommentParam} [updateFeedbackCommentParam]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateFeedbackComment(feedbackId: string, commentId: string, updateFeedbackCommentParam?: UpdateFeedbackCommentParam, options?: any): AxiosPromise<void>;
    /**
     * Update Feedback Status.
     * @summary Update Feedback Status
     * @param {string} feedbackId
     * @param {UpdateFeedbackStatusParam} [updateFeedbackStatusParam]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateFeedbackStatus(feedbackId: string, updateFeedbackStatusParam?: UpdateFeedbackStatusParam, options?: any): AxiosPromise<void>;
};
/**
 * FeedbackApi - object-oriented interface
 * @export
 * @class FeedbackApi
 * @extends {BaseAPI}
 */
export declare class FeedbackApi extends BaseAPI {
    /**
     * Create Feedback.
     * @summary Create Feedback
     * @param {CreateFeedbackParam} [createFeedbackParam]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FeedbackApi
     */
    createFeedback(createFeedbackParam?: CreateFeedbackParam, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<Feedback, any>>;
    /**
     * Post comment to feedback.
     * @summary Create Feedback Comment
     * @param {string} feedbackId
     * @param {CreateFeedbackCommentParam} [createFeedbackCommentParam]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FeedbackApi
     */
    createFeedbackComment(feedbackId: string, createFeedbackCommentParam?: CreateFeedbackCommentParam, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<Comment, any>>;
    /**
     * Vote for feedback.
     * @summary Create Vote User
     * @param {string} feedbackId
     * @param {CreateVoteUserParam} [createVoteUserParam]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FeedbackApi
     */
    createVoteUser(feedbackId: string, createVoteUserParam?: CreateVoteUserParam, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<Votes, any>>;
    /**
     * Delete Feedback.
     * @summary Delete Feedback
     * @param {string} feedbackId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FeedbackApi
     */
    deleteFeedback(feedbackId: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * Delete comment for feedback.
     * @summary Delete Feedback Comment
     * @param {string} feedbackId
     * @param {string} commentId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FeedbackApi
     */
    deleteFeedbackComment(feedbackId: string, commentId: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * Cancel vote for feedback.
     * @summary Delete Vote For Feedback
     * @param {string} feedbackId
     * @param {string} userId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FeedbackApi
     */
    deleteVoteForFeedback(feedbackId: string, userId: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * Retrieve feedback.
     * @summary Get Feedback
     * @param {string} feedbackId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FeedbackApi
     */
    getFeedback(feedbackId: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<Feedback, any>>;
    /**
     * Retrieve comment from feedback.
     * @summary Get Feedback Comment
     * @param {string} feedbackId
     * @param {string} commentId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FeedbackApi
     */
    getFeedbackComment(feedbackId: string, commentId: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<Comment, any>>;
    /**
     * Get the list of feedbacks.
     * @summary Get Feedbacks
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FeedbackApi
     */
    getFeedbacks(options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<Feedbacks, any>>;
    /**
     * Edit feedback.
     * @summary Update Feedback
     * @param {string} feedbackId
     * @param {UpdateFeedbackParam} [updateFeedbackParam]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FeedbackApi
     */
    updateFeedback(feedbackId: string, updateFeedbackParam?: UpdateFeedbackParam, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * Edit comment for feedback.
     * @summary Update Feedback Comment
     * @param {string} feedbackId
     * @param {string} commentId
     * @param {UpdateFeedbackCommentParam} [updateFeedbackCommentParam]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FeedbackApi
     */
    updateFeedbackComment(feedbackId: string, commentId: string, updateFeedbackCommentParam?: UpdateFeedbackCommentParam, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * Update Feedback Status.
     * @summary Update Feedback Status
     * @param {string} feedbackId
     * @param {UpdateFeedbackStatusParam} [updateFeedbackStatusParam]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FeedbackApi
     */
    updateFeedbackStatus(feedbackId: string, updateFeedbackStatusParam?: UpdateFeedbackStatusParam, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
}
