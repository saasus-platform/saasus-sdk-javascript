/**
 * SaaSus ApiLog API Schema
 * SaaSus ApiLog API Schema
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import { Configuration } from './configuration';
import { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { RequestArgs, BaseAPI } from './base';
/**
 *
 * @export
 * @interface ApiLog
 */
export interface ApiLog {
    /**
     * トレースID
     * @type {string}
     * @memberof ApiLog
     */
    'trace_id': string;
    /**
     *
     * @type {string}
     * @memberof ApiLog
     */
    'api_log_id': string;
    /**
     * APIログ登録日時のエポック秒
     * @type {number}
     * @memberof ApiLog
     */
    'created_at': number;
    /**
     * APIログ登録日
     * @type {string}
     * @memberof ApiLog
     */
    'created_date': string;
    /**
     * APIログ削除予定エポック秒
     * @type {number}
     * @memberof ApiLog
     */
    'ttl': number;
    /**
     * リクエストメソッド
     * @type {string}
     * @memberof ApiLog
     */
    'request_method': string;
    /**
     *
     * @type {string}
     * @memberof ApiLog
     */
    'saas_id': string;
    /**
     * APIキー
     * @type {string}
     * @memberof ApiLog
     */
    'api_key': string;
    /**
     * レスポンスステータス
     * @type {string}
     * @memberof ApiLog
     */
    'response_status': string;
    /**
     * リクエストURI
     * @type {string}
     * @memberof ApiLog
     */
    'request_uri': string;
    /**
     * クライアントIPアドレス
     * @type {string}
     * @memberof ApiLog
     */
    'remote_address': string;
    /**
     * リクエストリファラー
     * @type {string}
     * @memberof ApiLog
     */
    'referer': string;
    /**
     * リクエストボディー
     * @type {string}
     * @memberof ApiLog
     */
    'request_body': string;
    /**
     * レスポンスボディー
     * @type {string}
     * @memberof ApiLog
     */
    'response_body': string;
}
/**
 *
 * @export
 * @interface ApiLogAllOf
 */
export interface ApiLogAllOf {
    /**
     * トレースID
     * @type {string}
     * @memberof ApiLogAllOf
     */
    'trace_id': string;
    /**
     *
     * @type {string}
     * @memberof ApiLogAllOf
     */
    'api_log_id': string;
    /**
     * APIログ登録日時のエポック秒
     * @type {number}
     * @memberof ApiLogAllOf
     */
    'created_at': number;
    /**
     * APIログ登録日
     * @type {string}
     * @memberof ApiLogAllOf
     */
    'created_date': string;
    /**
     * APIログ削除予定エポック秒
     * @type {number}
     * @memberof ApiLogAllOf
     */
    'ttl': number;
    /**
     * リクエストメソッド
     * @type {string}
     * @memberof ApiLogAllOf
     */
    'request_method': string;
    /**
     *
     * @type {string}
     * @memberof ApiLogAllOf
     */
    'saas_id': string;
    /**
     * APIキー
     * @type {string}
     * @memberof ApiLogAllOf
     */
    'api_key': string;
    /**
     * レスポンスステータス
     * @type {string}
     * @memberof ApiLogAllOf
     */
    'response_status': string;
    /**
     * リクエストURI
     * @type {string}
     * @memberof ApiLogAllOf
     */
    'request_uri': string;
    /**
     * クライアントIPアドレス
     * @type {string}
     * @memberof ApiLogAllOf
     */
    'remote_address': string;
    /**
     * リクエストリファラー
     * @type {string}
     * @memberof ApiLogAllOf
     */
    'referer': string;
    /**
     * リクエストボディー
     * @type {string}
     * @memberof ApiLogAllOf
     */
    'request_body': string;
    /**
     * レスポンスボディー
     * @type {string}
     * @memberof ApiLogAllOf
     */
    'response_body': string;
}
/**
 *
 * @export
 * @interface ApiLogs
 */
export interface ApiLogs {
    /**
     *
     * @type {Array<ApiLog>}
     * @memberof ApiLogs
     */
    'api_logs': Array<ApiLog>;
}
/**
 *
 * @export
 * @interface ModelError
 */
export interface ModelError {
    /**
     * permission_denied
     * @type {string}
     * @memberof ModelError
     */
    'type': string;
    /**
     * Error message
     * @type {string}
     * @memberof ModelError
     */
    'message': string;
}
/**
 * ApiLogApi - axios parameter creator
 * @export
 */
export declare const ApiLogApiAxiosParamCreator: (configuration?: Configuration | undefined) => {
    /**
     * 指定したIDのAPI実行のログ登録を取得します。
     * @summary API実行ログ取得
     * @param {string} apiLogId APIログID(API Log ID)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getLog: (apiLogId: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * 全API実行のログ登録を取得します。
     * @summary API実行ログ取得
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getLogs: (options?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * ApiLogApi - functional programming interface
 * @export
 */
export declare const ApiLogApiFp: (configuration?: Configuration | undefined) => {
    /**
     * 指定したIDのAPI実行のログ登録を取得します。
     * @summary API実行ログ取得
     * @param {string} apiLogId APIログID(API Log ID)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getLog(apiLogId: string, options?: AxiosRequestConfig<any> | undefined): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<ApiLog>>;
    /**
     * 全API実行のログ登録を取得します。
     * @summary API実行ログ取得
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getLogs(options?: AxiosRequestConfig<any> | undefined): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<ApiLogs>>;
};
/**
 * ApiLogApi - factory interface
 * @export
 */
export declare const ApiLogApiFactory: (configuration?: Configuration | undefined, basePath?: string | undefined, axios?: AxiosInstance | undefined) => {
    /**
     * 指定したIDのAPI実行のログ登録を取得します。
     * @summary API実行ログ取得
     * @param {string} apiLogId APIログID(API Log ID)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getLog(apiLogId: string, options?: any): AxiosPromise<ApiLog>;
    /**
     * 全API実行のログ登録を取得します。
     * @summary API実行ログ取得
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getLogs(options?: any): AxiosPromise<ApiLogs>;
};
/**
 * ApiLogApi - object-oriented interface
 * @export
 * @class ApiLogApi
 * @extends {BaseAPI}
 */
export declare class ApiLogApi extends BaseAPI {
    /**
     * 指定したIDのAPI実行のログ登録を取得します。
     * @summary API実行ログ取得
     * @param {string} apiLogId APIログID(API Log ID)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApiLogApi
     */
    getLog(apiLogId: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<ApiLog, any>>;
    /**
     * 全API実行のログ登録を取得します。
     * @summary API実行ログ取得
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApiLogApi
     */
    getLogs(options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<ApiLogs, any>>;
}
/**
 * ErrorApi - axios parameter creator
 * @export
 */
export declare const ErrorApiAxiosParamCreator: (configuration?: Configuration | undefined) => {
    /**
     * テスト用途で使用するエンドポイントです。ステータスコード500でサーバーエラーを返却します。  This endpoint is used for testing purposes. Returns a server error with status code 500.
     * @summary ステータスコード500でサーバーエラーを返却(Return Internal Server Error)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    returnInternalServerError: (options?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * ErrorApi - functional programming interface
 * @export
 */
export declare const ErrorApiFp: (configuration?: Configuration | undefined) => {
    /**
     * テスト用途で使用するエンドポイントです。ステータスコード500でサーバーエラーを返却します。  This endpoint is used for testing purposes. Returns a server error with status code 500.
     * @summary ステータスコード500でサーバーエラーを返却(Return Internal Server Error)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    returnInternalServerError(options?: AxiosRequestConfig<any> | undefined): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<void>>;
};
/**
 * ErrorApi - factory interface
 * @export
 */
export declare const ErrorApiFactory: (configuration?: Configuration | undefined, basePath?: string | undefined, axios?: AxiosInstance | undefined) => {
    /**
     * テスト用途で使用するエンドポイントです。ステータスコード500でサーバーエラーを返却します。  This endpoint is used for testing purposes. Returns a server error with status code 500.
     * @summary ステータスコード500でサーバーエラーを返却(Return Internal Server Error)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    returnInternalServerError(options?: any): AxiosPromise<void>;
};
/**
 * ErrorApi - object-oriented interface
 * @export
 * @class ErrorApi
 * @extends {BaseAPI}
 */
export declare class ErrorApi extends BaseAPI {
    /**
     * テスト用途で使用するエンドポイントです。ステータスコード500でサーバーエラーを返却します。  This endpoint is used for testing purposes. Returns a server error with status code 500.
     * @summary ステータスコード500でサーバーエラーを返却(Return Internal Server Error)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ErrorApi
     */
    returnInternalServerError(options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
}
