/**
 * SaaSus Eventbridge API Schema
 * SaaSus Eventbridge API Schema
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import { Configuration } from './configuration';
import { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { RequestArgs, BaseAPI } from './base';
/**
 * All AWS regions except Ningxia and Beijing in China can be selected.
 * @export
 * @enum {string}
 */
export declare const AwsRegion: {
    readonly UsEast1: "us-east-1";
    readonly UsEast2: "us-east-2";
    readonly UsWest1: "us-west-1";
    readonly UsWest2: "us-west-2";
    readonly AfSouth1: "af-south-1";
    readonly ApEast1: "ap-east-1";
    readonly ApSouth1: "ap-south-1";
    readonly ApNortheast1: "ap-northeast-1";
    readonly ApNortheast2: "ap-northeast-2";
    readonly ApNortheast3: "ap-northeast-3";
    readonly ApSoutheast1: "ap-southeast-1";
    readonly ApSoutheast2: "ap-southeast-2";
    readonly ApSoutheast3: "ap-southeast-3";
    readonly CaCentral1: "ca-central-1";
    readonly EuCentral1: "eu-central-1";
    readonly EuNorth1: "eu-north-1";
    readonly EuSouth1: "eu-south-1";
    readonly EuWest1: "eu-west-1";
    readonly EuWest2: "eu-west-2";
    readonly EuWest3: "eu-west-3";
    readonly MeSouth1: "me-south-1";
    readonly SaEast1: "sa-east-1";
};
export type AwsRegion = typeof AwsRegion[keyof typeof AwsRegion];
/**
 *
 * @export
 * @interface CreateEventBridgeEventParam
 */
export interface CreateEventBridgeEventParam {
    /**
     * event message
     * @type {Array<EventMessage>}
     * @memberof CreateEventBridgeEventParam
     */
    'event_messages': Array<EventMessage>;
}
/**
 *
 * @export
 * @interface EventBridgeSettings
 */
export interface EventBridgeSettings {
    /**
     * AWS Account ID
     * @type {string}
     * @memberof EventBridgeSettings
     */
    'aws_account_id': string;
    /**
     *
     * @type {AwsRegion}
     * @memberof EventBridgeSettings
     */
    'aws_region': AwsRegion;
}
/**
 *
 * @export
 * @interface EventMessage
 */
export interface EventMessage {
    /**
     * event type
     * @type {string}
     * @memberof EventMessage
     */
    'event_type': string;
    /**
     * detailed event type
     * @type {string}
     * @memberof EventMessage
     */
    'event_detail_type': string;
    /**
     * event message
     * @type {string}
     * @memberof EventMessage
     */
    'message': string;
}
/**
 *
 * @export
 * @interface ModelError
 */
export interface ModelError {
    /**
     * permission_denied
     * @type {string}
     * @memberof ModelError
     */
    'type': string;
    /**
     * Error message
     * @type {string}
     * @memberof ModelError
     */
    'message': string;
}
/**
 * ErrorApi - axios parameter creator
 * @export
 */
export declare const ErrorApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * This endpoint is used for testing purposes. Returns a server error with status code 500.
     * @summary Return Internal Server Error
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    returnInternalServerError: (options?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * ErrorApi - functional programming interface
 * @export
 */
export declare const ErrorApiFp: (configuration?: Configuration) => {
    /**
     * This endpoint is used for testing purposes. Returns a server error with status code 500.
     * @summary Return Internal Server Error
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    returnInternalServerError(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
};
/**
 * ErrorApi - factory interface
 * @export
 */
export declare const ErrorApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * This endpoint is used for testing purposes. Returns a server error with status code 500.
     * @summary Return Internal Server Error
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    returnInternalServerError(options?: any): AxiosPromise<void>;
};
/**
 * ErrorApi - object-oriented interface
 * @export
 * @class ErrorApi
 * @extends {BaseAPI}
 */
export declare class ErrorApi extends BaseAPI {
    /**
     * This endpoint is used for testing purposes. Returns a server error with status code 500.
     * @summary Return Internal Server Error
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ErrorApi
     */
    returnInternalServerError(options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
}
/**
 * EventBridgeApi - axios parameter creator
 * @export
 */
export declare const EventBridgeApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Send events to Amazon EventBridge.
     * @summary Send Events
     * @param {CreateEventBridgeEventParam} [createEventBridgeEventParam]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createEventBridgeEvent: (createEventBridgeEventParam?: CreateEventBridgeEventParam, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Send events to test the connection with Amazon EventBridge.
     * @summary Test EventBridge Connection
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createEventBridgeTestEvent: (options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Delete settings used to provide host state via Amazon EventBridge.
     * @summary Delete EventBridge Settings
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteEventBridgeSettings: (options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Gets the settings for providing real-time status of all monitored hosts via Amazon EventBridge.
     * @summary Get EventBridge Settings
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEventBridgeSettings: (options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Update configuration used to provide the host state via Amazon EventBridge.
     * @summary Update EventBridge Settings
     * @param {EventBridgeSettings} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    saveEventBridgeSettings: (body?: EventBridgeSettings, options?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * EventBridgeApi - functional programming interface
 * @export
 */
export declare const EventBridgeApiFp: (configuration?: Configuration) => {
    /**
     * Send events to Amazon EventBridge.
     * @summary Send Events
     * @param {CreateEventBridgeEventParam} [createEventBridgeEventParam]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createEventBridgeEvent(createEventBridgeEventParam?: CreateEventBridgeEventParam, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * Send events to test the connection with Amazon EventBridge.
     * @summary Test EventBridge Connection
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createEventBridgeTestEvent(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * Delete settings used to provide host state via Amazon EventBridge.
     * @summary Delete EventBridge Settings
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteEventBridgeSettings(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * Gets the settings for providing real-time status of all monitored hosts via Amazon EventBridge.
     * @summary Get EventBridge Settings
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEventBridgeSettings(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EventBridgeSettings>>;
    /**
     * Update configuration used to provide the host state via Amazon EventBridge.
     * @summary Update EventBridge Settings
     * @param {EventBridgeSettings} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    saveEventBridgeSettings(body?: EventBridgeSettings, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
};
/**
 * EventBridgeApi - factory interface
 * @export
 */
export declare const EventBridgeApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Send events to Amazon EventBridge.
     * @summary Send Events
     * @param {CreateEventBridgeEventParam} [createEventBridgeEventParam]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createEventBridgeEvent(createEventBridgeEventParam?: CreateEventBridgeEventParam, options?: any): AxiosPromise<void>;
    /**
     * Send events to test the connection with Amazon EventBridge.
     * @summary Test EventBridge Connection
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createEventBridgeTestEvent(options?: any): AxiosPromise<void>;
    /**
     * Delete settings used to provide host state via Amazon EventBridge.
     * @summary Delete EventBridge Settings
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteEventBridgeSettings(options?: any): AxiosPromise<void>;
    /**
     * Gets the settings for providing real-time status of all monitored hosts via Amazon EventBridge.
     * @summary Get EventBridge Settings
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEventBridgeSettings(options?: any): AxiosPromise<EventBridgeSettings>;
    /**
     * Update configuration used to provide the host state via Amazon EventBridge.
     * @summary Update EventBridge Settings
     * @param {EventBridgeSettings} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    saveEventBridgeSettings(body?: EventBridgeSettings, options?: any): AxiosPromise<void>;
};
/**
 * EventBridgeApi - object-oriented interface
 * @export
 * @class EventBridgeApi
 * @extends {BaseAPI}
 */
export declare class EventBridgeApi extends BaseAPI {
    /**
     * Send events to Amazon EventBridge.
     * @summary Send Events
     * @param {CreateEventBridgeEventParam} [createEventBridgeEventParam]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventBridgeApi
     */
    createEventBridgeEvent(createEventBridgeEventParam?: CreateEventBridgeEventParam, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * Send events to test the connection with Amazon EventBridge.
     * @summary Test EventBridge Connection
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventBridgeApi
     */
    createEventBridgeTestEvent(options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * Delete settings used to provide host state via Amazon EventBridge.
     * @summary Delete EventBridge Settings
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventBridgeApi
     */
    deleteEventBridgeSettings(options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * Gets the settings for providing real-time status of all monitored hosts via Amazon EventBridge.
     * @summary Get EventBridge Settings
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventBridgeApi
     */
    getEventBridgeSettings(options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<EventBridgeSettings, any>>;
    /**
     * Update configuration used to provide the host state via Amazon EventBridge.
     * @summary Update EventBridge Settings
     * @param {EventBridgeSettings} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventBridgeApi
     */
    saveEventBridgeSettings(body?: EventBridgeSettings, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
}
