/* tslint:disable */
/* eslint-disable */
/**
 * SaaSus Eventbridge API Schema
 * SaaSus Eventbridge API Schema
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * 中国の寧夏、北京を除く全てのAWSリージョンが選択可能です。  All AWS regions except Ningxia and Beijing in China can be selected. 
 * @export
 * @enum {string}
 */

export const AwsRegion = {
    UsEast1: 'us-east-1',
    UsEast2: 'us-east-2',
    UsWest1: 'us-west-1',
    UsWest2: 'us-west-2',
    AfSouth1: 'af-south-1',
    ApEast1: 'ap-east-1',
    ApSouth1: 'ap-south-1',
    ApNortheast1: 'ap-northeast-1',
    ApNortheast2: 'ap-northeast-2',
    ApNortheast3: 'ap-northeast-3',
    ApSoutheast1: 'ap-southeast-1',
    ApSoutheast2: 'ap-southeast-2',
    ApSoutheast3: 'ap-southeast-3',
    CaCentral1: 'ca-central-1',
    EuCentral1: 'eu-central-1',
    EuNorth1: 'eu-north-1',
    EuSouth1: 'eu-south-1',
    EuWest1: 'eu-west-1',
    EuWest2: 'eu-west-2',
    EuWest3: 'eu-west-3',
    MeSouth1: 'me-south-1',
    SaEast1: 'sa-east-1'
} as const;

export type AwsRegion = typeof AwsRegion[keyof typeof AwsRegion];


/**
 * 
 * @export
 * @interface CreateEventBridgeEventParam
 */
export interface CreateEventBridgeEventParam {
    /**
     * イベントメッセージ(event message)
     * @type {Array<EventMessage>}
     * @memberof CreateEventBridgeEventParam
     */
    'event_messages': Array<EventMessage>;
}
/**
 * 
 * @export
 * @interface EventBridgeSettings
 */
export interface EventBridgeSettings {
    /**
     * AWSアカウントID(AWS Account ID)
     * @type {string}
     * @memberof EventBridgeSettings
     */
    'aws_account_id': string;
    /**
     * 
     * @type {AwsRegion}
     * @memberof EventBridgeSettings
     */
    'aws_region': AwsRegion;
}
/**
 * 
 * @export
 * @interface EventMessage
 */
export interface EventMessage {
    /**
     * イベントタイプ(event type)
     * @type {string}
     * @memberof EventMessage
     */
    'event_type': string;
    /**
     * 詳細イベントタイプ(detailed event type)
     * @type {string}
     * @memberof EventMessage
     */
    'event_detail_type': string;
    /**
     * イベントメッセージ(event message)
     * @type {string}
     * @memberof EventMessage
     */
    'message': string;
}
/**
 * 
 * @export
 * @interface ModelError
 */
export interface ModelError {
    /**
     * permission_denied
     * @type {string}
     * @memberof ModelError
     */
    'type': string;
    /**
     * Error message
     * @type {string}
     * @memberof ModelError
     */
    'message': string;
}

/**
 * EventBridgeApi - axios parameter creator
 * @export
 */
export const EventBridgeApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Amazon EventBridge へイベントを送信します。  Send events to Amazon EventBridge. 
         * @summary イベント連携の送信(Send Events)
         * @param {CreateEventBridgeEventParam} [createEventBridgeEventParam] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createEventBridgeEvent: async (createEventBridgeEventParam?: CreateEventBridgeEventParam, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/eventbridge/event`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createEventBridgeEventParam, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Amazon EventBridge との連携をテストする為のイベントを送信します。  Send events to test the connection with Amazon EventBridge. 
         * @summary イベント連携のテスト送信(Test EventBridge Connection)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createEventBridgeTestEvent: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/eventbridge/test-event`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ホストの状態を Amazon EventBridge 経由で提供するための設定を解除します。  Delete settings used to provide host state via Amazon EventBridge. 
         * @summary イベント連携設定を削除(Delete EventBridge Settings)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteEventBridgeSettings: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/eventbridge/info`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 監視対象となっている全ホストの状態をリアルタイムにAmazon EventBridge 経由で提供するための設定を取得します。  Gets the settings for providing real-time status of all monitored hosts via Amazon EventBridge. 
         * @summary イベント連携設定を取得(Get EventBridge Settings)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEventBridgeSettings: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/eventbridge/info`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ホストの状態を Amazon EventBridge 経由で提供するための設定を更新します。  Update configuration used to provide the host state via Amazon EventBridge. 
         * @summary イベント連携設定を更新(Update EventBridge Settings)
         * @param {EventBridgeSettings} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        saveEventBridgeSettings: async (body?: EventBridgeSettings, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/eventbridge/info`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * EventBridgeApi - functional programming interface
 * @export
 */
export const EventBridgeApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = EventBridgeApiAxiosParamCreator(configuration)
    return {
        /**
         * Amazon EventBridge へイベントを送信します。  Send events to Amazon EventBridge. 
         * @summary イベント連携の送信(Send Events)
         * @param {CreateEventBridgeEventParam} [createEventBridgeEventParam] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createEventBridgeEvent(createEventBridgeEventParam?: CreateEventBridgeEventParam, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createEventBridgeEvent(createEventBridgeEventParam, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Amazon EventBridge との連携をテストする為のイベントを送信します。  Send events to test the connection with Amazon EventBridge. 
         * @summary イベント連携のテスト送信(Test EventBridge Connection)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createEventBridgeTestEvent(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createEventBridgeTestEvent(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * ホストの状態を Amazon EventBridge 経由で提供するための設定を解除します。  Delete settings used to provide host state via Amazon EventBridge. 
         * @summary イベント連携設定を削除(Delete EventBridge Settings)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteEventBridgeSettings(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteEventBridgeSettings(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 監視対象となっている全ホストの状態をリアルタイムにAmazon EventBridge 経由で提供するための設定を取得します。  Gets the settings for providing real-time status of all monitored hosts via Amazon EventBridge. 
         * @summary イベント連携設定を取得(Get EventBridge Settings)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getEventBridgeSettings(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EventBridgeSettings>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getEventBridgeSettings(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * ホストの状態を Amazon EventBridge 経由で提供するための設定を更新します。  Update configuration used to provide the host state via Amazon EventBridge. 
         * @summary イベント連携設定を更新(Update EventBridge Settings)
         * @param {EventBridgeSettings} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async saveEventBridgeSettings(body?: EventBridgeSettings, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.saveEventBridgeSettings(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * EventBridgeApi - factory interface
 * @export
 */
export const EventBridgeApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = EventBridgeApiFp(configuration)
    return {
        /**
         * Amazon EventBridge へイベントを送信します。  Send events to Amazon EventBridge. 
         * @summary イベント連携の送信(Send Events)
         * @param {CreateEventBridgeEventParam} [createEventBridgeEventParam] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createEventBridgeEvent(createEventBridgeEventParam?: CreateEventBridgeEventParam, options?: any): AxiosPromise<void> {
            return localVarFp.createEventBridgeEvent(createEventBridgeEventParam, options).then((request) => request(axios, basePath));
        },
        /**
         * Amazon EventBridge との連携をテストする為のイベントを送信します。  Send events to test the connection with Amazon EventBridge. 
         * @summary イベント連携のテスト送信(Test EventBridge Connection)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createEventBridgeTestEvent(options?: any): AxiosPromise<void> {
            return localVarFp.createEventBridgeTestEvent(options).then((request) => request(axios, basePath));
        },
        /**
         * ホストの状態を Amazon EventBridge 経由で提供するための設定を解除します。  Delete settings used to provide host state via Amazon EventBridge. 
         * @summary イベント連携設定を削除(Delete EventBridge Settings)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteEventBridgeSettings(options?: any): AxiosPromise<void> {
            return localVarFp.deleteEventBridgeSettings(options).then((request) => request(axios, basePath));
        },
        /**
         * 監視対象となっている全ホストの状態をリアルタイムにAmazon EventBridge 経由で提供するための設定を取得します。  Gets the settings for providing real-time status of all monitored hosts via Amazon EventBridge. 
         * @summary イベント連携設定を取得(Get EventBridge Settings)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEventBridgeSettings(options?: any): AxiosPromise<EventBridgeSettings> {
            return localVarFp.getEventBridgeSettings(options).then((request) => request(axios, basePath));
        },
        /**
         * ホストの状態を Amazon EventBridge 経由で提供するための設定を更新します。  Update configuration used to provide the host state via Amazon EventBridge. 
         * @summary イベント連携設定を更新(Update EventBridge Settings)
         * @param {EventBridgeSettings} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        saveEventBridgeSettings(body?: EventBridgeSettings, options?: any): AxiosPromise<void> {
            return localVarFp.saveEventBridgeSettings(body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * EventBridgeApi - object-oriented interface
 * @export
 * @class EventBridgeApi
 * @extends {BaseAPI}
 */
export class EventBridgeApi extends BaseAPI {
    /**
     * Amazon EventBridge へイベントを送信します。  Send events to Amazon EventBridge. 
     * @summary イベント連携の送信(Send Events)
     * @param {CreateEventBridgeEventParam} [createEventBridgeEventParam] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventBridgeApi
     */
    public createEventBridgeEvent(createEventBridgeEventParam?: CreateEventBridgeEventParam, options?: AxiosRequestConfig) {
        return EventBridgeApiFp(this.configuration).createEventBridgeEvent(createEventBridgeEventParam, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Amazon EventBridge との連携をテストする為のイベントを送信します。  Send events to test the connection with Amazon EventBridge. 
     * @summary イベント連携のテスト送信(Test EventBridge Connection)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventBridgeApi
     */
    public createEventBridgeTestEvent(options?: AxiosRequestConfig) {
        return EventBridgeApiFp(this.configuration).createEventBridgeTestEvent(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ホストの状態を Amazon EventBridge 経由で提供するための設定を解除します。  Delete settings used to provide host state via Amazon EventBridge. 
     * @summary イベント連携設定を削除(Delete EventBridge Settings)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventBridgeApi
     */
    public deleteEventBridgeSettings(options?: AxiosRequestConfig) {
        return EventBridgeApiFp(this.configuration).deleteEventBridgeSettings(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 監視対象となっている全ホストの状態をリアルタイムにAmazon EventBridge 経由で提供するための設定を取得します。  Gets the settings for providing real-time status of all monitored hosts via Amazon EventBridge. 
     * @summary イベント連携設定を取得(Get EventBridge Settings)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventBridgeApi
     */
    public getEventBridgeSettings(options?: AxiosRequestConfig) {
        return EventBridgeApiFp(this.configuration).getEventBridgeSettings(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ホストの状態を Amazon EventBridge 経由で提供するための設定を更新します。  Update configuration used to provide the host state via Amazon EventBridge. 
     * @summary イベント連携設定を更新(Update EventBridge Settings)
     * @param {EventBridgeSettings} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventBridgeApi
     */
    public saveEventBridgeSettings(body?: EventBridgeSettings, options?: AxiosRequestConfig) {
        return EventBridgeApiFp(this.configuration).saveEventBridgeSettings(body, options).then((request) => request(this.axios, this.basePath));
    }
}


