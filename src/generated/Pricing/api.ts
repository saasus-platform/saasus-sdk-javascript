/* tslint:disable */
/* eslint-disable */
/**
 * SaaSus Pricing API Schema
 * SaaSus Pricing API Schema
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface MeteringUnitDateCount
 */
export interface MeteringUnitDateCount {
    /**
     * 計測ユニット名
     * @type {string}
     * @memberof MeteringUnitDateCount
     */
    'metering_unit_name': string;
    /**
     * 日
     * @type {string}
     * @memberof MeteringUnitDateCount
     */
    'date': string;
    /**
     * 件数
     * @type {number}
     * @memberof MeteringUnitDateCount
     */
    'count': number;
}
/**
 * 
 * @export
 * @interface MeteringUnitDateCounts
 */
export interface MeteringUnitDateCounts {
    /**
     * 
     * @type {Array<MeteringUnitDateCount>}
     * @memberof MeteringUnitDateCounts
     */
    'counts': Array<MeteringUnitDateCount>;
}
/**
 * 
 * @export
 * @interface MeteringUnitMonthCount
 */
export interface MeteringUnitMonthCount {
    /**
     * 計測ユニット名
     * @type {string}
     * @memberof MeteringUnitMonthCount
     */
    'metering_unit_name': string;
    /**
     * 月
     * @type {string}
     * @memberof MeteringUnitMonthCount
     */
    'month': string;
    /**
     * 件数
     * @type {number}
     * @memberof MeteringUnitMonthCount
     */
    'count': number;
}
/**
 * 
 * @export
 * @interface MeteringUnitMonthCounts
 */
export interface MeteringUnitMonthCounts {
    /**
     * 
     * @type {Array<MeteringUnitMonthCount>}
     * @memberof MeteringUnitMonthCounts
     */
    'counts': Array<MeteringUnitMonthCount>;
}
/**
 * 
 * @export
 * @interface ModelError
 */
export interface ModelError {
    /**
     * permission_denied
     * @type {string}
     * @memberof ModelError
     */
    'type': string;
    /**
     * Error message
     * @type {string}
     * @memberof ModelError
     */
    'message': string;
}
/**
 * 
 * @export
 * @interface PricingFixedUnit
 */
export interface PricingFixedUnit {
    /**
     * 
     * @type {string}
     * @memberof PricingFixedUnit
     */
    'id': string;
    /**
     * 
     * @type {boolean}
     * @memberof PricingFixedUnit
     */
    'used': boolean;
    /**
     * 金額
     * @type {number}
     * @memberof PricingFixedUnit
     */
    'unit_amount': number;
    /**
     * 
     * @type {RecurringInterval}
     * @memberof PricingFixedUnit
     */
    'recurring_interval': RecurringInterval;
    /**
     * 
     * @type {string}
     * @memberof PricingFixedUnit
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof PricingFixedUnit
     */
    'display_name': string;
    /**
     * 
     * @type {string}
     * @memberof PricingFixedUnit
     */
    'description': string;
    /**
     * 
     * @type {UnitType}
     * @memberof PricingFixedUnit
     */
    'type': UnitType;
    /**
     * 
     * @type {string}
     * @memberof PricingFixedUnit
     */
    'currency': string;
}
/**
 * 
 * @export
 * @interface PricingFixedUnitAllOf
 */
export interface PricingFixedUnitAllOf {
    /**
     * 
     * @type {string}
     * @memberof PricingFixedUnitAllOf
     */
    'id': string;
    /**
     * 
     * @type {boolean}
     * @memberof PricingFixedUnitAllOf
     */
    'used': boolean;
}
/**
 * 
 * @export
 * @interface PricingFixedUnitForSave
 */
export interface PricingFixedUnitForSave {
    /**
     * 金額
     * @type {number}
     * @memberof PricingFixedUnitForSave
     */
    'unit_amount': number;
    /**
     * 
     * @type {RecurringInterval}
     * @memberof PricingFixedUnitForSave
     */
    'recurring_interval': RecurringInterval;
    /**
     * 
     * @type {string}
     * @memberof PricingFixedUnitForSave
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof PricingFixedUnitForSave
     */
    'display_name': string;
    /**
     * 
     * @type {string}
     * @memberof PricingFixedUnitForSave
     */
    'description': string;
    /**
     * 
     * @type {UnitType}
     * @memberof PricingFixedUnitForSave
     */
    'type': UnitType;
    /**
     * 
     * @type {string}
     * @memberof PricingFixedUnitForSave
     */
    'currency': string;
}
/**
 * 
 * @export
 * @interface PricingFixedUnitForSaveAllOf
 */
export interface PricingFixedUnitForSaveAllOf {
    /**
     * 金額
     * @type {number}
     * @memberof PricingFixedUnitForSaveAllOf
     */
    'unit_amount': number;
    /**
     * 
     * @type {RecurringInterval}
     * @memberof PricingFixedUnitForSaveAllOf
     */
    'recurring_interval': RecurringInterval;
}
/**
 * 
 * @export
 * @interface PricingMenu
 */
export interface PricingMenu {
    /**
     * 
     * @type {string}
     * @memberof PricingMenu
     */
    'id': string;
    /**
     * メニュー名
     * @type {string}
     * @memberof PricingMenu
     */
    'name': string;
    /**
     * メニュー表示名
     * @type {string}
     * @memberof PricingMenu
     */
    'display_name': string;
    /**
     * メニュー説明
     * @type {string}
     * @memberof PricingMenu
     */
    'description': string;
    /**
     * メニューの使用済み設定
     * @type {boolean}
     * @memberof PricingMenu
     */
    'used': boolean;
    /**
     * 
     * @type {Array<PricingUnit>}
     * @memberof PricingMenu
     */
    'units': Array<PricingUnit>;
}
/**
 * 
 * @export
 * @interface PricingMenuAllOf
 */
export interface PricingMenuAllOf {
    /**
     * 
     * @type {string}
     * @memberof PricingMenuAllOf
     */
    'id': string;
}
/**
 * 
 * @export
 * @interface PricingMenuProps
 */
export interface PricingMenuProps {
    /**
     * メニュー名
     * @type {string}
     * @memberof PricingMenuProps
     */
    'name': string;
    /**
     * メニュー表示名
     * @type {string}
     * @memberof PricingMenuProps
     */
    'display_name': string;
    /**
     * メニュー説明
     * @type {string}
     * @memberof PricingMenuProps
     */
    'description': string;
    /**
     * メニューの使用済み設定
     * @type {boolean}
     * @memberof PricingMenuProps
     */
    'used': boolean;
    /**
     * 
     * @type {Array<PricingUnit>}
     * @memberof PricingMenuProps
     */
    'units': Array<PricingUnit>;
}
/**
 * 
 * @export
 * @interface PricingMenuPropsAllOf
 */
export interface PricingMenuPropsAllOf {
    /**
     * メニュー名
     * @type {string}
     * @memberof PricingMenuPropsAllOf
     */
    'name': string;
    /**
     * メニュー表示名
     * @type {string}
     * @memberof PricingMenuPropsAllOf
     */
    'display_name': string;
    /**
     * メニュー説明
     * @type {string}
     * @memberof PricingMenuPropsAllOf
     */
    'description': string;
    /**
     * メニューの使用済み設定
     * @type {boolean}
     * @memberof PricingMenuPropsAllOf
     */
    'used': boolean;
}
/**
 * 
 * @export
 * @interface PricingMenus
 */
export interface PricingMenus {
    /**
     * 
     * @type {Array<PricingMenu>}
     * @memberof PricingMenus
     */
    'pricing_menus': Array<PricingMenu>;
}
/**
 * 
 * @export
 * @interface PricingPlan
 */
export interface PricingPlan {
    /**
     * 
     * @type {string}
     * @memberof PricingPlan
     */
    'id': string;
    /**
     * 料金プラン名
     * @type {string}
     * @memberof PricingPlan
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof PricingPlan
     */
    'display_name': string;
    /**
     * 料金プラン説明
     * @type {string}
     * @memberof PricingPlan
     */
    'description': string;
    /**
     * 料金プランの使用済み設定
     * @type {boolean}
     * @memberof PricingPlan
     */
    'used': boolean;
    /**
     * 
     * @type {Array<PricingMenu>}
     * @memberof PricingPlan
     */
    'pricing_menus': Array<PricingMenu>;
}
/**
 * 
 * @export
 * @interface PricingPlanProps
 */
export interface PricingPlanProps {
    /**
     * 料金プラン名
     * @type {string}
     * @memberof PricingPlanProps
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof PricingPlanProps
     */
    'display_name': string;
    /**
     * 料金プラン説明
     * @type {string}
     * @memberof PricingPlanProps
     */
    'description': string;
    /**
     * 料金プランの使用済み設定
     * @type {boolean}
     * @memberof PricingPlanProps
     */
    'used': boolean;
    /**
     * 
     * @type {Array<PricingMenu>}
     * @memberof PricingPlanProps
     */
    'pricing_menus': Array<PricingMenu>;
}
/**
 * 
 * @export
 * @interface PricingPlanPropsAllOf
 */
export interface PricingPlanPropsAllOf {
    /**
     * 料金プラン名
     * @type {string}
     * @memberof PricingPlanPropsAllOf
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof PricingPlanPropsAllOf
     */
    'display_name': string;
    /**
     * 料金プラン説明
     * @type {string}
     * @memberof PricingPlanPropsAllOf
     */
    'description': string;
    /**
     * 料金プランの使用済み設定
     * @type {boolean}
     * @memberof PricingPlanPropsAllOf
     */
    'used': boolean;
}
/**
 * 
 * @export
 * @interface PricingPlans
 */
export interface PricingPlans {
    /**
     * 
     * @type {Array<PricingPlan>}
     * @memberof PricingPlans
     */
    'pricing_plans': Array<PricingPlan>;
}
/**
 * 
 * @export
 * @interface PricingTier
 */
export interface PricingTier {
    /**
     * 上限
     * @type {number}
     * @memberof PricingTier
     */
    'up_to': number;
    /**
     * 単位金額
     * @type {number}
     * @memberof PricingTier
     */
    'unit_amount': number;
    /**
     * 固定金額
     * @type {number}
     * @memberof PricingTier
     */
    'flat_amount': number;
    /**
     * inf /確認/
     * @type {boolean}
     * @memberof PricingTier
     */
    'inf': boolean;
}
/**
 * 
 * @export
 * @interface PricingTieredUnit
 */
export interface PricingTieredUnit {
    /**
     * 
     * @type {string}
     * @memberof PricingTieredUnit
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof PricingTieredUnit
     */
    'metering_unit_id': string;
    /**
     * 
     * @type {RecurringInterval}
     * @memberof PricingTieredUnit
     */
    'recurring_interval': RecurringInterval;
    /**
     * 
     * @type {boolean}
     * @memberof PricingTieredUnit
     */
    'used': boolean;
    /**
     * 上限値
     * @type {number}
     * @memberof PricingTieredUnit
     */
    'upper_count': number;
    /**
     * 
     * @type {string}
     * @memberof PricingTieredUnit
     */
    'metering_unit_name': string;
    /**
     * 
     * @type {string}
     * @memberof PricingTieredUnit
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof PricingTieredUnit
     */
    'display_name': string;
    /**
     * 
     * @type {string}
     * @memberof PricingTieredUnit
     */
    'description': string;
    /**
     * 
     * @type {UnitType}
     * @memberof PricingTieredUnit
     */
    'type': UnitType;
    /**
     * 
     * @type {string}
     * @memberof PricingTieredUnit
     */
    'currency': string;
    /**
     * 
     * @type {Array<PricingTier>}
     * @memberof PricingTieredUnit
     */
    'tiers': Array<PricingTier>;
}
/**
 * 
 * @export
 * @interface PricingTieredUnitForSave
 */
export interface PricingTieredUnitForSave {
    /**
     * 上限値
     * @type {number}
     * @memberof PricingTieredUnitForSave
     */
    'upper_count': number;
    /**
     * 
     * @type {string}
     * @memberof PricingTieredUnitForSave
     */
    'metering_unit_name': string;
    /**
     * 
     * @type {string}
     * @memberof PricingTieredUnitForSave
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof PricingTieredUnitForSave
     */
    'display_name': string;
    /**
     * 
     * @type {string}
     * @memberof PricingTieredUnitForSave
     */
    'description': string;
    /**
     * 
     * @type {UnitType}
     * @memberof PricingTieredUnitForSave
     */
    'type': UnitType;
    /**
     * 
     * @type {string}
     * @memberof PricingTieredUnitForSave
     */
    'currency': string;
    /**
     * 
     * @type {Array<PricingTier>}
     * @memberof PricingTieredUnitForSave
     */
    'tiers': Array<PricingTier>;
}
/**
 * 
 * @export
 * @interface PricingTieredUsageUnit
 */
export interface PricingTieredUsageUnit {
    /**
     * 
     * @type {string}
     * @memberof PricingTieredUsageUnit
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof PricingTieredUsageUnit
     */
    'metering_unit_id': string;
    /**
     * 
     * @type {RecurringInterval}
     * @memberof PricingTieredUsageUnit
     */
    'recurring_interval': RecurringInterval;
    /**
     * 
     * @type {boolean}
     * @memberof PricingTieredUsageUnit
     */
    'used': boolean;
    /**
     * 上限値
     * @type {number}
     * @memberof PricingTieredUsageUnit
     */
    'upper_count': number;
    /**
     * 
     * @type {string}
     * @memberof PricingTieredUsageUnit
     */
    'metering_unit_name': string;
    /**
     * 
     * @type {string}
     * @memberof PricingTieredUsageUnit
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof PricingTieredUsageUnit
     */
    'display_name': string;
    /**
     * 
     * @type {string}
     * @memberof PricingTieredUsageUnit
     */
    'description': string;
    /**
     * 
     * @type {UnitType}
     * @memberof PricingTieredUsageUnit
     */
    'type': UnitType;
    /**
     * 
     * @type {string}
     * @memberof PricingTieredUsageUnit
     */
    'currency': string;
    /**
     * 
     * @type {Array<PricingTier>}
     * @memberof PricingTieredUsageUnit
     */
    'tiers': Array<PricingTier>;
}
/**
 * 
 * @export
 * @interface PricingTieredUsageUnitAllOf
 */
export interface PricingTieredUsageUnitAllOf {
    /**
     * 
     * @type {string}
     * @memberof PricingTieredUsageUnitAllOf
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof PricingTieredUsageUnitAllOf
     */
    'metering_unit_id': string;
    /**
     * 
     * @type {RecurringInterval}
     * @memberof PricingTieredUsageUnitAllOf
     */
    'recurring_interval': RecurringInterval;
    /**
     * 
     * @type {boolean}
     * @memberof PricingTieredUsageUnitAllOf
     */
    'used': boolean;
}
/**
 * 
 * @export
 * @interface PricingTieredUsageUnitForSave
 */
export interface PricingTieredUsageUnitForSave {
    /**
     * 上限値
     * @type {number}
     * @memberof PricingTieredUsageUnitForSave
     */
    'upper_count': number;
    /**
     * 
     * @type {string}
     * @memberof PricingTieredUsageUnitForSave
     */
    'metering_unit_name': string;
    /**
     * 
     * @type {string}
     * @memberof PricingTieredUsageUnitForSave
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof PricingTieredUsageUnitForSave
     */
    'display_name': string;
    /**
     * 
     * @type {string}
     * @memberof PricingTieredUsageUnitForSave
     */
    'description': string;
    /**
     * 
     * @type {UnitType}
     * @memberof PricingTieredUsageUnitForSave
     */
    'type': UnitType;
    /**
     * 
     * @type {string}
     * @memberof PricingTieredUsageUnitForSave
     */
    'currency': string;
    /**
     * 
     * @type {Array<PricingTier>}
     * @memberof PricingTieredUsageUnitForSave
     */
    'tiers': Array<PricingTier>;
}
/**
 * 
 * @export
 * @interface PricingTieredUsageUnitForSaveAllOf
 */
export interface PricingTieredUsageUnitForSaveAllOf {
    /**
     * 上限値
     * @type {number}
     * @memberof PricingTieredUsageUnitForSaveAllOf
     */
    'upper_count': number;
    /**
     * 
     * @type {string}
     * @memberof PricingTieredUsageUnitForSaveAllOf
     */
    'metering_unit_name': string;
}
/**
 * 
 * @export
 * @interface PricingTiers
 */
export interface PricingTiers {
    /**
     * 
     * @type {Array<PricingTier>}
     * @memberof PricingTiers
     */
    'tiers': Array<PricingTier>;
}
/**
 * @type PricingUnit
 * @export
 */
export type PricingUnit = PricingFixedUnit | PricingTieredUnit | PricingTieredUsageUnit | PricingUsageUnit;

/**
 * 
 * @export
 * @interface PricingUnitBaseProps
 */
export interface PricingUnitBaseProps {
    /**
     * 
     * @type {string}
     * @memberof PricingUnitBaseProps
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof PricingUnitBaseProps
     */
    'display_name': string;
    /**
     * 
     * @type {string}
     * @memberof PricingUnitBaseProps
     */
    'description': string;
    /**
     * 
     * @type {UnitType}
     * @memberof PricingUnitBaseProps
     */
    'type': UnitType;
    /**
     * 
     * @type {string}
     * @memberof PricingUnitBaseProps
     */
    'currency': string;
}
/**
 * @type PricingUnitForSave
 * @export
 */
export type PricingUnitForSave = PricingFixedUnitForSave | PricingTieredUnitForSave | PricingTieredUsageUnitForSave | PricingUsageUnitForSave;

/**
 * 
 * @export
 * @interface PricingUnits
 */
export interface PricingUnits {
    /**
     * 
     * @type {Array<PricingUnit>}
     * @memberof PricingUnits
     */
    'units': Array<PricingUnit>;
}
/**
 * 
 * @export
 * @interface PricingUsageUnit
 */
export interface PricingUsageUnit {
    /**
     * 
     * @type {string}
     * @memberof PricingUsageUnit
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof PricingUsageUnit
     */
    'metering_unit_id': string;
    /**
     * 
     * @type {RecurringInterval}
     * @memberof PricingUsageUnit
     */
    'recurring_interval': RecurringInterval;
    /**
     * 
     * @type {boolean}
     * @memberof PricingUsageUnit
     */
    'used': boolean;
    /**
     * 上限値
     * @type {number}
     * @memberof PricingUsageUnit
     */
    'upper_count': number;
    /**
     * 使用量あたりの金額
     * @type {number}
     * @memberof PricingUsageUnit
     */
    'unit_amount': number;
    /**
     * 
     * @type {string}
     * @memberof PricingUsageUnit
     */
    'metering_unit_name': string;
    /**
     * 
     * @type {string}
     * @memberof PricingUsageUnit
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof PricingUsageUnit
     */
    'display_name': string;
    /**
     * 
     * @type {string}
     * @memberof PricingUsageUnit
     */
    'description': string;
    /**
     * 
     * @type {UnitType}
     * @memberof PricingUsageUnit
     */
    'type': UnitType;
    /**
     * 
     * @type {string}
     * @memberof PricingUsageUnit
     */
    'currency': string;
}
/**
 * 
 * @export
 * @interface PricingUsageUnitForSave
 */
export interface PricingUsageUnitForSave {
    /**
     * 上限値
     * @type {number}
     * @memberof PricingUsageUnitForSave
     */
    'upper_count': number;
    /**
     * 使用量あたりの金額
     * @type {number}
     * @memberof PricingUsageUnitForSave
     */
    'unit_amount': number;
    /**
     * 
     * @type {string}
     * @memberof PricingUsageUnitForSave
     */
    'metering_unit_name': string;
    /**
     * 
     * @type {string}
     * @memberof PricingUsageUnitForSave
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof PricingUsageUnitForSave
     */
    'display_name': string;
    /**
     * 
     * @type {string}
     * @memberof PricingUsageUnitForSave
     */
    'description': string;
    /**
     * 
     * @type {UnitType}
     * @memberof PricingUsageUnitForSave
     */
    'type': UnitType;
    /**
     * 
     * @type {string}
     * @memberof PricingUsageUnitForSave
     */
    'currency': string;
}
/**
 * 
 * @export
 * @interface PricingUsageUnitForSaveAllOf
 */
export interface PricingUsageUnitForSaveAllOf {
    /**
     * 上限値
     * @type {number}
     * @memberof PricingUsageUnitForSaveAllOf
     */
    'upper_count': number;
    /**
     * 使用量あたりの金額
     * @type {number}
     * @memberof PricingUsageUnitForSaveAllOf
     */
    'unit_amount': number;
    /**
     * 
     * @type {string}
     * @memberof PricingUsageUnitForSaveAllOf
     */
    'metering_unit_name': string;
}
/**
 * 繰り返し期間 month: 月単位 year: 年単位 
 * @export
 * @enum {string}
 */

export const RecurringInterval = {
    Month: 'month',
    Year: 'year'
} as const;

export type RecurringInterval = typeof RecurringInterval[keyof typeof RecurringInterval];


/**
 * 
 * @export
 * @interface SavePricingMenuParam
 */
export interface SavePricingMenuParam {
    /**
     * メニュー名
     * @type {string}
     * @memberof SavePricingMenuParam
     */
    'name': string;
    /**
     * メニュー表示名
     * @type {string}
     * @memberof SavePricingMenuParam
     */
    'display_name': string;
    /**
     * メニュー説明
     * @type {string}
     * @memberof SavePricingMenuParam
     */
    'description': string;
    /**
     * 追加するユニットID
     * @type {Array<string>}
     * @memberof SavePricingMenuParam
     */
    'unit_ids': Array<string>;
}
/**
 * 
 * @export
 * @interface SavePricingPlanParam
 */
export interface SavePricingPlanParam {
    /**
     * 料金プラン名
     * @type {string}
     * @memberof SavePricingPlanParam
     */
    'name': string;
    /**
     * 料金プラン表示名
     * @type {string}
     * @memberof SavePricingPlanParam
     */
    'display_name': string;
    /**
     * 料金プラン説明
     * @type {string}
     * @memberof SavePricingPlanParam
     */
    'description': string;
    /**
     * メニューID（料金プランに追加するメニューIDを設定）
     * @type {Array<string>}
     * @memberof SavePricingPlanParam
     */
    'menu_ids': Array<string>;
}
/**
 * 計測単位の種別 fixed: 固定ユニット usage: 使用量ユニット tiered: 段階ユニット tiered_usage: 段階的使用量ユニット 
 * @export
 * @enum {string}
 */

export const UnitType = {
    Fixed: 'fixed',
    Usage: 'usage',
    Tiered: 'tiered',
    TieredUsage: 'tiered_usage'
} as const;

export type UnitType = typeof UnitType[keyof typeof UnitType];


/**
 * 更新方法 add: 加算 sub: 減算 direct: 上書き
 * @export
 * @enum {string}
 */

export const UpdateMeteringUnitDateCountMethod = {
    Add: 'add',
    Sub: 'sub',
    Direct: 'direct'
} as const;

export type UpdateMeteringUnitDateCountMethod = typeof UpdateMeteringUnitDateCountMethod[keyof typeof UpdateMeteringUnitDateCountMethod];


/**
 * 
 * @export
 * @interface UpdateMeteringUnitDateCountParam
 */
export interface UpdateMeteringUnitDateCountParam {
    /**
     * 
     * @type {UpdateMeteringUnitDateCountMethod}
     * @memberof UpdateMeteringUnitDateCountParam
     */
    'method': UpdateMeteringUnitDateCountMethod;
    /**
     * 件数
     * @type {number}
     * @memberof UpdateMeteringUnitDateCountParam
     */
    'count': number;
}
/**
 * 
 * @export
 * @interface UpdateMeteringUnitDateCountTodayParam
 */
export interface UpdateMeteringUnitDateCountTodayParam {
    /**
     * 
     * @type {UpdateMeteringUnitDateCountMethod}
     * @memberof UpdateMeteringUnitDateCountTodayParam
     */
    'method': UpdateMeteringUnitDateCountMethod;
    /**
     * 件数
     * @type {number}
     * @memberof UpdateMeteringUnitDateCountTodayParam
     */
    'count': number;
}
/**
 * 
 * @export
 * @interface UpdatePricingPlansUsedParam
 */
export interface UpdatePricingPlansUsedParam {
    /**
     * 
     * @type {Array<string>}
     * @memberof UpdatePricingPlansUsedParam
     */
    'plan_ids': Array<string>;
}

/**
 * MeteringApi - axios parameter creator
 * @export
 */
export const MeteringApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 指定した日付のメータリングユニットカウントを削除します。
         * @summary 指定した日付のメータリングユニットカウントを削除
         * @param {string} tenantId テナントID
         * @param {string} meteringUnitName 計測ユニット名
         * @param {string} date 日
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteMeteringUnitDateCount: async (tenantId: string, meteringUnitName: string, date: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tenantId' is not null or undefined
            assertParamExists('deleteMeteringUnitDateCount', 'tenantId', tenantId)
            // verify required parameter 'meteringUnitName' is not null or undefined
            assertParamExists('deleteMeteringUnitDateCount', 'meteringUnitName', meteringUnitName)
            // verify required parameter 'date' is not null or undefined
            assertParamExists('deleteMeteringUnitDateCount', 'date', date)
            const localVarPath = `/metering/tenants/{tenant_id}/units/{metering_unit_name}/date/{date}`
                .replace(`{${"tenant_id"}}`, encodeURIComponent(String(tenantId)))
                .replace(`{${"metering_unit_name"}}`, encodeURIComponent(String(meteringUnitName)))
                .replace(`{${"date"}}`, encodeURIComponent(String(date)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 当日のメータリングユニットカウントを削除します。
         * @summary 当日のメータリングユニットカウントを削除
         * @param {string} tenantId テナントID
         * @param {string} meteringUnitName 計測ユニット名
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteMeteringUnitDateCountToday: async (tenantId: string, meteringUnitName: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tenantId' is not null or undefined
            assertParamExists('deleteMeteringUnitDateCountToday', 'tenantId', tenantId)
            // verify required parameter 'meteringUnitName' is not null or undefined
            assertParamExists('deleteMeteringUnitDateCountToday', 'meteringUnitName', meteringUnitName)
            const localVarPath = `/metering/tenants/{tenant_id}/units/{metering_unit_name}/today`
                .replace(`{${"tenant_id"}}`, encodeURIComponent(String(tenantId)))
                .replace(`{${"metering_unit_name"}}`, encodeURIComponent(String(meteringUnitName)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 指定した日付のメータリングユニットカウントを取得します。
         * @summary 指定した日付のメータリングユニットカウントを取得
         * @param {string} tenantId テナントID
         * @param {string} meteringUnitName 計測ユニット名
         * @param {string} date 日
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMeteringUnitDateCountByTenantIdAndUnitNameAndDate: async (tenantId: string, meteringUnitName: string, date: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tenantId' is not null or undefined
            assertParamExists('getMeteringUnitDateCountByTenantIdAndUnitNameAndDate', 'tenantId', tenantId)
            // verify required parameter 'meteringUnitName' is not null or undefined
            assertParamExists('getMeteringUnitDateCountByTenantIdAndUnitNameAndDate', 'meteringUnitName', meteringUnitName)
            // verify required parameter 'date' is not null or undefined
            assertParamExists('getMeteringUnitDateCountByTenantIdAndUnitNameAndDate', 'date', date)
            const localVarPath = `/metering/tenants/{tenant_id}/units/{metering_unit_name}/date/{date}`
                .replace(`{${"tenant_id"}}`, encodeURIComponent(String(tenantId)))
                .replace(`{${"metering_unit_name"}}`, encodeURIComponent(String(meteringUnitName)))
                .replace(`{${"date"}}`, encodeURIComponent(String(date)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 当日のメータリングユニットカウントを取得します。
         * @summary 当日のメータリングユニットカウントを取得
         * @param {string} tenantId テナントID
         * @param {string} meteringUnitName 計測ユニット名
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMeteringUnitDateCountByTenantIdAndUnitNameToday: async (tenantId: string, meteringUnitName: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tenantId' is not null or undefined
            assertParamExists('getMeteringUnitDateCountByTenantIdAndUnitNameToday', 'tenantId', tenantId)
            // verify required parameter 'meteringUnitName' is not null or undefined
            assertParamExists('getMeteringUnitDateCountByTenantIdAndUnitNameToday', 'meteringUnitName', meteringUnitName)
            const localVarPath = `/metering/tenants/{tenant_id}/units/{metering_unit_name}/today`
                .replace(`{${"tenant_id"}}`, encodeURIComponent(String(tenantId)))
                .replace(`{${"metering_unit_name"}}`, encodeURIComponent(String(meteringUnitName)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 指定した日の全メータリングユニットカウントを取得します。
         * @summary 指定日の全メータリングユニットカウントを取得
         * @param {string} tenantId テナントID
         * @param {string} date 日
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMeteringUnitDateCountsByTenantIdAndDate: async (tenantId: string, date: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tenantId' is not null or undefined
            assertParamExists('getMeteringUnitDateCountsByTenantIdAndDate', 'tenantId', tenantId)
            // verify required parameter 'date' is not null or undefined
            assertParamExists('getMeteringUnitDateCountsByTenantIdAndDate', 'date', date)
            const localVarPath = `/metering/tenants/{tenant_id}/units/date/{date}`
                .replace(`{${"tenant_id"}}`, encodeURIComponent(String(tenantId)))
                .replace(`{${"date"}}`, encodeURIComponent(String(date)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 指定した月のメータリングユニットカウントを取得します。
         * @summary 指定月のメータリングユニットカウントを取得
         * @param {string} tenantId テナントID
         * @param {string} meteringUnitName 計測ユニット名
         * @param {string} month 月
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMeteringUnitMonthCountByTenantIdAndUnitNameAndMonth: async (tenantId: string, meteringUnitName: string, month: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tenantId' is not null or undefined
            assertParamExists('getMeteringUnitMonthCountByTenantIdAndUnitNameAndMonth', 'tenantId', tenantId)
            // verify required parameter 'meteringUnitName' is not null or undefined
            assertParamExists('getMeteringUnitMonthCountByTenantIdAndUnitNameAndMonth', 'meteringUnitName', meteringUnitName)
            // verify required parameter 'month' is not null or undefined
            assertParamExists('getMeteringUnitMonthCountByTenantIdAndUnitNameAndMonth', 'month', month)
            const localVarPath = `/metering/tenants/{tenant_id}/units/{metering_unit_name}/month/{month}`
                .replace(`{${"tenant_id"}}`, encodeURIComponent(String(tenantId)))
                .replace(`{${"metering_unit_name"}}`, encodeURIComponent(String(meteringUnitName)))
                .replace(`{${"month"}}`, encodeURIComponent(String(month)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 当月のメータリングユニットカウントを取得します。
         * @summary 当月のメータリングユニットカウントを取得
         * @param {string} tenantId テナントID
         * @param {string} meteringUnitName 計測ユニット名
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMeteringUnitMonthCountByTenantIdAndUnitNameThisMonth: async (tenantId: string, meteringUnitName: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tenantId' is not null or undefined
            assertParamExists('getMeteringUnitMonthCountByTenantIdAndUnitNameThisMonth', 'tenantId', tenantId)
            // verify required parameter 'meteringUnitName' is not null or undefined
            assertParamExists('getMeteringUnitMonthCountByTenantIdAndUnitNameThisMonth', 'meteringUnitName', meteringUnitName)
            const localVarPath = `/metering/tenants/{tenant_id}/units/{metering_unit_name}/thismonth`
                .replace(`{${"tenant_id"}}`, encodeURIComponent(String(tenantId)))
                .replace(`{${"metering_unit_name"}}`, encodeURIComponent(String(meteringUnitName)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 指定した月の全メータリングユニットカウントを取得します。
         * @summary 指定月の全メータリングユニットカウントを取得
         * @param {string} tenantId テナントID
         * @param {string} month 月
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMeteringUnitMonthCountsByTenantIdAndMonth: async (tenantId: string, month: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tenantId' is not null or undefined
            assertParamExists('getMeteringUnitMonthCountsByTenantIdAndMonth', 'tenantId', tenantId)
            // verify required parameter 'month' is not null or undefined
            assertParamExists('getMeteringUnitMonthCountsByTenantIdAndMonth', 'month', month)
            const localVarPath = `/metering/tenants/{tenant_id}/units/month/{month}`
                .replace(`{${"tenant_id"}}`, encodeURIComponent(String(tenantId)))
                .replace(`{${"month"}}`, encodeURIComponent(String(month)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 指定した日付のメータリングユニットカウントを更新します。
         * @summary 指定した日付のメータリングユニットカウントを更新
         * @param {string} tenantId テナントID
         * @param {string} meteringUnitName 計測ユニット名
         * @param {string} date 日
         * @param {UpdateMeteringUnitDateCountParam} [updateMeteringUnitDateCountParam] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateMeteringUnitDateCount: async (tenantId: string, meteringUnitName: string, date: string, updateMeteringUnitDateCountParam?: UpdateMeteringUnitDateCountParam, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tenantId' is not null or undefined
            assertParamExists('updateMeteringUnitDateCount', 'tenantId', tenantId)
            // verify required parameter 'meteringUnitName' is not null or undefined
            assertParamExists('updateMeteringUnitDateCount', 'meteringUnitName', meteringUnitName)
            // verify required parameter 'date' is not null or undefined
            assertParamExists('updateMeteringUnitDateCount', 'date', date)
            const localVarPath = `/metering/tenants/{tenant_id}/units/{metering_unit_name}/date/{date}`
                .replace(`{${"tenant_id"}}`, encodeURIComponent(String(tenantId)))
                .replace(`{${"metering_unit_name"}}`, encodeURIComponent(String(meteringUnitName)))
                .replace(`{${"date"}}`, encodeURIComponent(String(date)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateMeteringUnitDateCountParam, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 当日のメータリングユニットカウントを更新します。
         * @summary 当日のメータリングユニットカウントを更新
         * @param {string} tenantId テナントID
         * @param {string} meteringUnitName 計測ユニット名
         * @param {UpdateMeteringUnitDateCountTodayParam} [updateMeteringUnitDateCountTodayParam] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateMeteringUnitDateCountToday: async (tenantId: string, meteringUnitName: string, updateMeteringUnitDateCountTodayParam?: UpdateMeteringUnitDateCountTodayParam, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tenantId' is not null or undefined
            assertParamExists('updateMeteringUnitDateCountToday', 'tenantId', tenantId)
            // verify required parameter 'meteringUnitName' is not null or undefined
            assertParamExists('updateMeteringUnitDateCountToday', 'meteringUnitName', meteringUnitName)
            const localVarPath = `/metering/tenants/{tenant_id}/units/{metering_unit_name}/today`
                .replace(`{${"tenant_id"}}`, encodeURIComponent(String(tenantId)))
                .replace(`{${"metering_unit_name"}}`, encodeURIComponent(String(meteringUnitName)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateMeteringUnitDateCountTodayParam, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * MeteringApi - functional programming interface
 * @export
 */
export const MeteringApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = MeteringApiAxiosParamCreator(configuration)
    return {
        /**
         * 指定した日付のメータリングユニットカウントを削除します。
         * @summary 指定した日付のメータリングユニットカウントを削除
         * @param {string} tenantId テナントID
         * @param {string} meteringUnitName 計測ユニット名
         * @param {string} date 日
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteMeteringUnitDateCount(tenantId: string, meteringUnitName: string, date: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteMeteringUnitDateCount(tenantId, meteringUnitName, date, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 当日のメータリングユニットカウントを削除します。
         * @summary 当日のメータリングユニットカウントを削除
         * @param {string} tenantId テナントID
         * @param {string} meteringUnitName 計測ユニット名
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteMeteringUnitDateCountToday(tenantId: string, meteringUnitName: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteMeteringUnitDateCountToday(tenantId, meteringUnitName, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 指定した日付のメータリングユニットカウントを取得します。
         * @summary 指定した日付のメータリングユニットカウントを取得
         * @param {string} tenantId テナントID
         * @param {string} meteringUnitName 計測ユニット名
         * @param {string} date 日
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getMeteringUnitDateCountByTenantIdAndUnitNameAndDate(tenantId: string, meteringUnitName: string, date: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MeteringUnitDateCount>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getMeteringUnitDateCountByTenantIdAndUnitNameAndDate(tenantId, meteringUnitName, date, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 当日のメータリングユニットカウントを取得します。
         * @summary 当日のメータリングユニットカウントを取得
         * @param {string} tenantId テナントID
         * @param {string} meteringUnitName 計測ユニット名
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getMeteringUnitDateCountByTenantIdAndUnitNameToday(tenantId: string, meteringUnitName: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MeteringUnitDateCount>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getMeteringUnitDateCountByTenantIdAndUnitNameToday(tenantId, meteringUnitName, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 指定した日の全メータリングユニットカウントを取得します。
         * @summary 指定日の全メータリングユニットカウントを取得
         * @param {string} tenantId テナントID
         * @param {string} date 日
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getMeteringUnitDateCountsByTenantIdAndDate(tenantId: string, date: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MeteringUnitDateCounts>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getMeteringUnitDateCountsByTenantIdAndDate(tenantId, date, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 指定した月のメータリングユニットカウントを取得します。
         * @summary 指定月のメータリングユニットカウントを取得
         * @param {string} tenantId テナントID
         * @param {string} meteringUnitName 計測ユニット名
         * @param {string} month 月
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getMeteringUnitMonthCountByTenantIdAndUnitNameAndMonth(tenantId: string, meteringUnitName: string, month: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MeteringUnitMonthCount>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getMeteringUnitMonthCountByTenantIdAndUnitNameAndMonth(tenantId, meteringUnitName, month, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 当月のメータリングユニットカウントを取得します。
         * @summary 当月のメータリングユニットカウントを取得
         * @param {string} tenantId テナントID
         * @param {string} meteringUnitName 計測ユニット名
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getMeteringUnitMonthCountByTenantIdAndUnitNameThisMonth(tenantId: string, meteringUnitName: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MeteringUnitMonthCount>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getMeteringUnitMonthCountByTenantIdAndUnitNameThisMonth(tenantId, meteringUnitName, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 指定した月の全メータリングユニットカウントを取得します。
         * @summary 指定月の全メータリングユニットカウントを取得
         * @param {string} tenantId テナントID
         * @param {string} month 月
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getMeteringUnitMonthCountsByTenantIdAndMonth(tenantId: string, month: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MeteringUnitMonthCounts>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getMeteringUnitMonthCountsByTenantIdAndMonth(tenantId, month, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 指定した日付のメータリングユニットカウントを更新します。
         * @summary 指定した日付のメータリングユニットカウントを更新
         * @param {string} tenantId テナントID
         * @param {string} meteringUnitName 計測ユニット名
         * @param {string} date 日
         * @param {UpdateMeteringUnitDateCountParam} [updateMeteringUnitDateCountParam] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateMeteringUnitDateCount(tenantId: string, meteringUnitName: string, date: string, updateMeteringUnitDateCountParam?: UpdateMeteringUnitDateCountParam, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MeteringUnitDateCount>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateMeteringUnitDateCount(tenantId, meteringUnitName, date, updateMeteringUnitDateCountParam, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 当日のメータリングユニットカウントを更新します。
         * @summary 当日のメータリングユニットカウントを更新
         * @param {string} tenantId テナントID
         * @param {string} meteringUnitName 計測ユニット名
         * @param {UpdateMeteringUnitDateCountTodayParam} [updateMeteringUnitDateCountTodayParam] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateMeteringUnitDateCountToday(tenantId: string, meteringUnitName: string, updateMeteringUnitDateCountTodayParam?: UpdateMeteringUnitDateCountTodayParam, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MeteringUnitDateCount>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateMeteringUnitDateCountToday(tenantId, meteringUnitName, updateMeteringUnitDateCountTodayParam, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * MeteringApi - factory interface
 * @export
 */
export const MeteringApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = MeteringApiFp(configuration)
    return {
        /**
         * 指定した日付のメータリングユニットカウントを削除します。
         * @summary 指定した日付のメータリングユニットカウントを削除
         * @param {string} tenantId テナントID
         * @param {string} meteringUnitName 計測ユニット名
         * @param {string} date 日
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteMeteringUnitDateCount(tenantId: string, meteringUnitName: string, date: string, options?: any): AxiosPromise<void> {
            return localVarFp.deleteMeteringUnitDateCount(tenantId, meteringUnitName, date, options).then((request) => request(axios, basePath));
        },
        /**
         * 当日のメータリングユニットカウントを削除します。
         * @summary 当日のメータリングユニットカウントを削除
         * @param {string} tenantId テナントID
         * @param {string} meteringUnitName 計測ユニット名
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteMeteringUnitDateCountToday(tenantId: string, meteringUnitName: string, options?: any): AxiosPromise<void> {
            return localVarFp.deleteMeteringUnitDateCountToday(tenantId, meteringUnitName, options).then((request) => request(axios, basePath));
        },
        /**
         * 指定した日付のメータリングユニットカウントを取得します。
         * @summary 指定した日付のメータリングユニットカウントを取得
         * @param {string} tenantId テナントID
         * @param {string} meteringUnitName 計測ユニット名
         * @param {string} date 日
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMeteringUnitDateCountByTenantIdAndUnitNameAndDate(tenantId: string, meteringUnitName: string, date: string, options?: any): AxiosPromise<MeteringUnitDateCount> {
            return localVarFp.getMeteringUnitDateCountByTenantIdAndUnitNameAndDate(tenantId, meteringUnitName, date, options).then((request) => request(axios, basePath));
        },
        /**
         * 当日のメータリングユニットカウントを取得します。
         * @summary 当日のメータリングユニットカウントを取得
         * @param {string} tenantId テナントID
         * @param {string} meteringUnitName 計測ユニット名
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMeteringUnitDateCountByTenantIdAndUnitNameToday(tenantId: string, meteringUnitName: string, options?: any): AxiosPromise<MeteringUnitDateCount> {
            return localVarFp.getMeteringUnitDateCountByTenantIdAndUnitNameToday(tenantId, meteringUnitName, options).then((request) => request(axios, basePath));
        },
        /**
         * 指定した日の全メータリングユニットカウントを取得します。
         * @summary 指定日の全メータリングユニットカウントを取得
         * @param {string} tenantId テナントID
         * @param {string} date 日
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMeteringUnitDateCountsByTenantIdAndDate(tenantId: string, date: string, options?: any): AxiosPromise<MeteringUnitDateCounts> {
            return localVarFp.getMeteringUnitDateCountsByTenantIdAndDate(tenantId, date, options).then((request) => request(axios, basePath));
        },
        /**
         * 指定した月のメータリングユニットカウントを取得します。
         * @summary 指定月のメータリングユニットカウントを取得
         * @param {string} tenantId テナントID
         * @param {string} meteringUnitName 計測ユニット名
         * @param {string} month 月
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMeteringUnitMonthCountByTenantIdAndUnitNameAndMonth(tenantId: string, meteringUnitName: string, month: string, options?: any): AxiosPromise<MeteringUnitMonthCount> {
            return localVarFp.getMeteringUnitMonthCountByTenantIdAndUnitNameAndMonth(tenantId, meteringUnitName, month, options).then((request) => request(axios, basePath));
        },
        /**
         * 当月のメータリングユニットカウントを取得します。
         * @summary 当月のメータリングユニットカウントを取得
         * @param {string} tenantId テナントID
         * @param {string} meteringUnitName 計測ユニット名
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMeteringUnitMonthCountByTenantIdAndUnitNameThisMonth(tenantId: string, meteringUnitName: string, options?: any): AxiosPromise<MeteringUnitMonthCount> {
            return localVarFp.getMeteringUnitMonthCountByTenantIdAndUnitNameThisMonth(tenantId, meteringUnitName, options).then((request) => request(axios, basePath));
        },
        /**
         * 指定した月の全メータリングユニットカウントを取得します。
         * @summary 指定月の全メータリングユニットカウントを取得
         * @param {string} tenantId テナントID
         * @param {string} month 月
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMeteringUnitMonthCountsByTenantIdAndMonth(tenantId: string, month: string, options?: any): AxiosPromise<MeteringUnitMonthCounts> {
            return localVarFp.getMeteringUnitMonthCountsByTenantIdAndMonth(tenantId, month, options).then((request) => request(axios, basePath));
        },
        /**
         * 指定した日付のメータリングユニットカウントを更新します。
         * @summary 指定した日付のメータリングユニットカウントを更新
         * @param {string} tenantId テナントID
         * @param {string} meteringUnitName 計測ユニット名
         * @param {string} date 日
         * @param {UpdateMeteringUnitDateCountParam} [updateMeteringUnitDateCountParam] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateMeteringUnitDateCount(tenantId: string, meteringUnitName: string, date: string, updateMeteringUnitDateCountParam?: UpdateMeteringUnitDateCountParam, options?: any): AxiosPromise<MeteringUnitDateCount> {
            return localVarFp.updateMeteringUnitDateCount(tenantId, meteringUnitName, date, updateMeteringUnitDateCountParam, options).then((request) => request(axios, basePath));
        },
        /**
         * 当日のメータリングユニットカウントを更新します。
         * @summary 当日のメータリングユニットカウントを更新
         * @param {string} tenantId テナントID
         * @param {string} meteringUnitName 計測ユニット名
         * @param {UpdateMeteringUnitDateCountTodayParam} [updateMeteringUnitDateCountTodayParam] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateMeteringUnitDateCountToday(tenantId: string, meteringUnitName: string, updateMeteringUnitDateCountTodayParam?: UpdateMeteringUnitDateCountTodayParam, options?: any): AxiosPromise<MeteringUnitDateCount> {
            return localVarFp.updateMeteringUnitDateCountToday(tenantId, meteringUnitName, updateMeteringUnitDateCountTodayParam, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * MeteringApi - object-oriented interface
 * @export
 * @class MeteringApi
 * @extends {BaseAPI}
 */
export class MeteringApi extends BaseAPI {
    /**
     * 指定した日付のメータリングユニットカウントを削除します。
     * @summary 指定した日付のメータリングユニットカウントを削除
     * @param {string} tenantId テナントID
     * @param {string} meteringUnitName 計測ユニット名
     * @param {string} date 日
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MeteringApi
     */
    public deleteMeteringUnitDateCount(tenantId: string, meteringUnitName: string, date: string, options?: AxiosRequestConfig) {
        return MeteringApiFp(this.configuration).deleteMeteringUnitDateCount(tenantId, meteringUnitName, date, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 当日のメータリングユニットカウントを削除します。
     * @summary 当日のメータリングユニットカウントを削除
     * @param {string} tenantId テナントID
     * @param {string} meteringUnitName 計測ユニット名
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MeteringApi
     */
    public deleteMeteringUnitDateCountToday(tenantId: string, meteringUnitName: string, options?: AxiosRequestConfig) {
        return MeteringApiFp(this.configuration).deleteMeteringUnitDateCountToday(tenantId, meteringUnitName, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 指定した日付のメータリングユニットカウントを取得します。
     * @summary 指定した日付のメータリングユニットカウントを取得
     * @param {string} tenantId テナントID
     * @param {string} meteringUnitName 計測ユニット名
     * @param {string} date 日
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MeteringApi
     */
    public getMeteringUnitDateCountByTenantIdAndUnitNameAndDate(tenantId: string, meteringUnitName: string, date: string, options?: AxiosRequestConfig) {
        return MeteringApiFp(this.configuration).getMeteringUnitDateCountByTenantIdAndUnitNameAndDate(tenantId, meteringUnitName, date, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 当日のメータリングユニットカウントを取得します。
     * @summary 当日のメータリングユニットカウントを取得
     * @param {string} tenantId テナントID
     * @param {string} meteringUnitName 計測ユニット名
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MeteringApi
     */
    public getMeteringUnitDateCountByTenantIdAndUnitNameToday(tenantId: string, meteringUnitName: string, options?: AxiosRequestConfig) {
        return MeteringApiFp(this.configuration).getMeteringUnitDateCountByTenantIdAndUnitNameToday(tenantId, meteringUnitName, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 指定した日の全メータリングユニットカウントを取得します。
     * @summary 指定日の全メータリングユニットカウントを取得
     * @param {string} tenantId テナントID
     * @param {string} date 日
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MeteringApi
     */
    public getMeteringUnitDateCountsByTenantIdAndDate(tenantId: string, date: string, options?: AxiosRequestConfig) {
        return MeteringApiFp(this.configuration).getMeteringUnitDateCountsByTenantIdAndDate(tenantId, date, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 指定した月のメータリングユニットカウントを取得します。
     * @summary 指定月のメータリングユニットカウントを取得
     * @param {string} tenantId テナントID
     * @param {string} meteringUnitName 計測ユニット名
     * @param {string} month 月
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MeteringApi
     */
    public getMeteringUnitMonthCountByTenantIdAndUnitNameAndMonth(tenantId: string, meteringUnitName: string, month: string, options?: AxiosRequestConfig) {
        return MeteringApiFp(this.configuration).getMeteringUnitMonthCountByTenantIdAndUnitNameAndMonth(tenantId, meteringUnitName, month, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 当月のメータリングユニットカウントを取得します。
     * @summary 当月のメータリングユニットカウントを取得
     * @param {string} tenantId テナントID
     * @param {string} meteringUnitName 計測ユニット名
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MeteringApi
     */
    public getMeteringUnitMonthCountByTenantIdAndUnitNameThisMonth(tenantId: string, meteringUnitName: string, options?: AxiosRequestConfig) {
        return MeteringApiFp(this.configuration).getMeteringUnitMonthCountByTenantIdAndUnitNameThisMonth(tenantId, meteringUnitName, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 指定した月の全メータリングユニットカウントを取得します。
     * @summary 指定月の全メータリングユニットカウントを取得
     * @param {string} tenantId テナントID
     * @param {string} month 月
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MeteringApi
     */
    public getMeteringUnitMonthCountsByTenantIdAndMonth(tenantId: string, month: string, options?: AxiosRequestConfig) {
        return MeteringApiFp(this.configuration).getMeteringUnitMonthCountsByTenantIdAndMonth(tenantId, month, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 指定した日付のメータリングユニットカウントを更新します。
     * @summary 指定した日付のメータリングユニットカウントを更新
     * @param {string} tenantId テナントID
     * @param {string} meteringUnitName 計測ユニット名
     * @param {string} date 日
     * @param {UpdateMeteringUnitDateCountParam} [updateMeteringUnitDateCountParam] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MeteringApi
     */
    public updateMeteringUnitDateCount(tenantId: string, meteringUnitName: string, date: string, updateMeteringUnitDateCountParam?: UpdateMeteringUnitDateCountParam, options?: AxiosRequestConfig) {
        return MeteringApiFp(this.configuration).updateMeteringUnitDateCount(tenantId, meteringUnitName, date, updateMeteringUnitDateCountParam, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 当日のメータリングユニットカウントを更新します。
     * @summary 当日のメータリングユニットカウントを更新
     * @param {string} tenantId テナントID
     * @param {string} meteringUnitName 計測ユニット名
     * @param {UpdateMeteringUnitDateCountTodayParam} [updateMeteringUnitDateCountTodayParam] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MeteringApi
     */
    public updateMeteringUnitDateCountToday(tenantId: string, meteringUnitName: string, updateMeteringUnitDateCountTodayParam?: UpdateMeteringUnitDateCountTodayParam, options?: AxiosRequestConfig) {
        return MeteringApiFp(this.configuration).updateMeteringUnitDateCountToday(tenantId, meteringUnitName, updateMeteringUnitDateCountTodayParam, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * PricingMenusApi - axios parameter creator
 * @export
 */
export const PricingMenusApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * プライシング機能メニューを作成します
         * @summary プライシング機能メニューを作成
         * @param {SavePricingMenuParam} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createPricingMenu: async (body?: SavePricingMenuParam, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/menus`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * プライシング機能メニューを削除します。
         * @summary プライシング機能メニューを削除
         * @param {string} menuId メニューID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deletePricingMenu: async (menuId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'menuId' is not null or undefined
            assertParamExists('deletePricingMenu', 'menuId', menuId)
            const localVarPath = `/menus/{menu_id}`
                .replace(`{${"menu_id"}}`, encodeURIComponent(String(menuId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * プライシング機能メニューを取得します。
         * @summary プライシング機能メニューを取得
         * @param {string} menuId メニューID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPricingMenu: async (menuId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'menuId' is not null or undefined
            assertParamExists('getPricingMenu', 'menuId', menuId)
            const localVarPath = `/menus/{menu_id}`
                .replace(`{${"menu_id"}}`, encodeURIComponent(String(menuId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 機能メニュー一覧を取得します。 計測単位を複数まとめて、１つの機能として定義します。 ここで定義した機能メニューを複数合わせ１つの料金プランとします。 
         * @summary プライシング機能メニュー一覧を取得
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPricingMenus: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/menus`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * プライシング機能メニューを更新します。
         * @summary プライシング機能メニューを更新
         * @param {string} menuId メニューID
         * @param {SavePricingMenuParam} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updatePricingMenu: async (menuId: string, body?: SavePricingMenuParam, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'menuId' is not null or undefined
            assertParamExists('updatePricingMenu', 'menuId', menuId)
            const localVarPath = `/menus/{menu_id}`
                .replace(`{${"menu_id"}}`, encodeURIComponent(String(menuId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PricingMenusApi - functional programming interface
 * @export
 */
export const PricingMenusApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = PricingMenusApiAxiosParamCreator(configuration)
    return {
        /**
         * プライシング機能メニューを作成します
         * @summary プライシング機能メニューを作成
         * @param {SavePricingMenuParam} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createPricingMenu(body?: SavePricingMenuParam, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PricingMenu>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createPricingMenu(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * プライシング機能メニューを削除します。
         * @summary プライシング機能メニューを削除
         * @param {string} menuId メニューID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deletePricingMenu(menuId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deletePricingMenu(menuId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * プライシング機能メニューを取得します。
         * @summary プライシング機能メニューを取得
         * @param {string} menuId メニューID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPricingMenu(menuId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PricingMenu>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPricingMenu(menuId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 機能メニュー一覧を取得します。 計測単位を複数まとめて、１つの機能として定義します。 ここで定義した機能メニューを複数合わせ１つの料金プランとします。 
         * @summary プライシング機能メニュー一覧を取得
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPricingMenus(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PricingMenus>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPricingMenus(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * プライシング機能メニューを更新します。
         * @summary プライシング機能メニューを更新
         * @param {string} menuId メニューID
         * @param {SavePricingMenuParam} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updatePricingMenu(menuId: string, body?: SavePricingMenuParam, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updatePricingMenu(menuId, body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * PricingMenusApi - factory interface
 * @export
 */
export const PricingMenusApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = PricingMenusApiFp(configuration)
    return {
        /**
         * プライシング機能メニューを作成します
         * @summary プライシング機能メニューを作成
         * @param {SavePricingMenuParam} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createPricingMenu(body?: SavePricingMenuParam, options?: any): AxiosPromise<PricingMenu> {
            return localVarFp.createPricingMenu(body, options).then((request) => request(axios, basePath));
        },
        /**
         * プライシング機能メニューを削除します。
         * @summary プライシング機能メニューを削除
         * @param {string} menuId メニューID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deletePricingMenu(menuId: string, options?: any): AxiosPromise<void> {
            return localVarFp.deletePricingMenu(menuId, options).then((request) => request(axios, basePath));
        },
        /**
         * プライシング機能メニューを取得します。
         * @summary プライシング機能メニューを取得
         * @param {string} menuId メニューID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPricingMenu(menuId: string, options?: any): AxiosPromise<PricingMenu> {
            return localVarFp.getPricingMenu(menuId, options).then((request) => request(axios, basePath));
        },
        /**
         * 機能メニュー一覧を取得します。 計測単位を複数まとめて、１つの機能として定義します。 ここで定義した機能メニューを複数合わせ１つの料金プランとします。 
         * @summary プライシング機能メニュー一覧を取得
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPricingMenus(options?: any): AxiosPromise<PricingMenus> {
            return localVarFp.getPricingMenus(options).then((request) => request(axios, basePath));
        },
        /**
         * プライシング機能メニューを更新します。
         * @summary プライシング機能メニューを更新
         * @param {string} menuId メニューID
         * @param {SavePricingMenuParam} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updatePricingMenu(menuId: string, body?: SavePricingMenuParam, options?: any): AxiosPromise<void> {
            return localVarFp.updatePricingMenu(menuId, body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * PricingMenusApi - object-oriented interface
 * @export
 * @class PricingMenusApi
 * @extends {BaseAPI}
 */
export class PricingMenusApi extends BaseAPI {
    /**
     * プライシング機能メニューを作成します
     * @summary プライシング機能メニューを作成
     * @param {SavePricingMenuParam} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PricingMenusApi
     */
    public createPricingMenu(body?: SavePricingMenuParam, options?: AxiosRequestConfig) {
        return PricingMenusApiFp(this.configuration).createPricingMenu(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * プライシング機能メニューを削除します。
     * @summary プライシング機能メニューを削除
     * @param {string} menuId メニューID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PricingMenusApi
     */
    public deletePricingMenu(menuId: string, options?: AxiosRequestConfig) {
        return PricingMenusApiFp(this.configuration).deletePricingMenu(menuId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * プライシング機能メニューを取得します。
     * @summary プライシング機能メニューを取得
     * @param {string} menuId メニューID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PricingMenusApi
     */
    public getPricingMenu(menuId: string, options?: AxiosRequestConfig) {
        return PricingMenusApiFp(this.configuration).getPricingMenu(menuId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 機能メニュー一覧を取得します。 計測単位を複数まとめて、１つの機能として定義します。 ここで定義した機能メニューを複数合わせ１つの料金プランとします。 
     * @summary プライシング機能メニュー一覧を取得
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PricingMenusApi
     */
    public getPricingMenus(options?: AxiosRequestConfig) {
        return PricingMenusApiFp(this.configuration).getPricingMenus(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * プライシング機能メニューを更新します。
     * @summary プライシング機能メニューを更新
     * @param {string} menuId メニューID
     * @param {SavePricingMenuParam} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PricingMenusApi
     */
    public updatePricingMenu(menuId: string, body?: SavePricingMenuParam, options?: AxiosRequestConfig) {
        return PricingMenusApiFp(this.configuration).updatePricingMenu(menuId, body, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * PricingPlansApi - axios parameter creator
 * @export
 */
export const PricingPlansApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 料金プランを作成します。
         * @summary 料金プランを作成
         * @param {SavePricingPlanParam} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createPricingPlan: async (body?: SavePricingPlanParam, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/plans`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 料金プランを削除します。
         * @summary 料金プランを削除
         * @param {string} planId 料金プランID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deletePricingPlan: async (planId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'planId' is not null or undefined
            assertParamExists('deletePricingPlan', 'planId', planId)
            const localVarPath = `/plans/{plan_id}`
                .replace(`{${"plan_id"}}`, encodeURIComponent(String(planId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 料金プランを取得します。
         * @summary 料金プランを取得
         * @param {string} planId 料金プランID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPricingPlan: async (planId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'planId' is not null or undefined
            assertParamExists('getPricingPlan', 'planId', planId)
            const localVarPath = `/plans/{plan_id}`
                .replace(`{${"plan_id"}}`, encodeURIComponent(String(planId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 料金プラン一覧を取得します。 機能メニューを複数まとめて、１つの料金プランとして定義します。 ここで定義した料金プランを各テナントは選ぶことができます。 もし特定テナント特有の料金（プライベートプライシング）がある場合は、そのテナント専用の料金プランを作成して結びつけます。 
         * @summary 料金プラン一覧を取得
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPricingPlans: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/plans`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * stripeへ情報を連携します。
         * @summary stripe連携
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        linkPlanToStripe: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/stripe/init`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 料金プランを更新します。
         * @summary 料金プランを更新
         * @param {string} planId 料金プランID
         * @param {SavePricingPlanParam} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updatePricingPlan: async (planId: string, body?: SavePricingPlanParam, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'planId' is not null or undefined
            assertParamExists('updatePricingPlan', 'planId', planId)
            const localVarPath = `/plans/{plan_id}`
                .replace(`{${"plan_id"}}`, encodeURIComponent(String(planId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 料金プランと配下のメニュー・ユニットを使用済みに更新します。
         * @summary 使用済みフラグ更新
         * @param {UpdatePricingPlansUsedParam} [updatePricingPlansUsedParam] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updatePricingPlansUsed: async (updatePricingPlansUsedParam?: UpdatePricingPlansUsedParam, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/plans/used`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updatePricingPlansUsedParam, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PricingPlansApi - functional programming interface
 * @export
 */
export const PricingPlansApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = PricingPlansApiAxiosParamCreator(configuration)
    return {
        /**
         * 料金プランを作成します。
         * @summary 料金プランを作成
         * @param {SavePricingPlanParam} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createPricingPlan(body?: SavePricingPlanParam, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PricingPlan>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createPricingPlan(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 料金プランを削除します。
         * @summary 料金プランを削除
         * @param {string} planId 料金プランID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deletePricingPlan(planId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deletePricingPlan(planId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 料金プランを取得します。
         * @summary 料金プランを取得
         * @param {string} planId 料金プランID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPricingPlan(planId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PricingPlan>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPricingPlan(planId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 料金プラン一覧を取得します。 機能メニューを複数まとめて、１つの料金プランとして定義します。 ここで定義した料金プランを各テナントは選ぶことができます。 もし特定テナント特有の料金（プライベートプライシング）がある場合は、そのテナント専用の料金プランを作成して結びつけます。 
         * @summary 料金プラン一覧を取得
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPricingPlans(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PricingPlans>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPricingPlans(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * stripeへ情報を連携します。
         * @summary stripe連携
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async linkPlanToStripe(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.linkPlanToStripe(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 料金プランを更新します。
         * @summary 料金プランを更新
         * @param {string} planId 料金プランID
         * @param {SavePricingPlanParam} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updatePricingPlan(planId: string, body?: SavePricingPlanParam, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updatePricingPlan(planId, body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 料金プランと配下のメニュー・ユニットを使用済みに更新します。
         * @summary 使用済みフラグ更新
         * @param {UpdatePricingPlansUsedParam} [updatePricingPlansUsedParam] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updatePricingPlansUsed(updatePricingPlansUsedParam?: UpdatePricingPlansUsedParam, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updatePricingPlansUsed(updatePricingPlansUsedParam, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * PricingPlansApi - factory interface
 * @export
 */
export const PricingPlansApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = PricingPlansApiFp(configuration)
    return {
        /**
         * 料金プランを作成します。
         * @summary 料金プランを作成
         * @param {SavePricingPlanParam} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createPricingPlan(body?: SavePricingPlanParam, options?: any): AxiosPromise<PricingPlan> {
            return localVarFp.createPricingPlan(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 料金プランを削除します。
         * @summary 料金プランを削除
         * @param {string} planId 料金プランID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deletePricingPlan(planId: string, options?: any): AxiosPromise<void> {
            return localVarFp.deletePricingPlan(planId, options).then((request) => request(axios, basePath));
        },
        /**
         * 料金プランを取得します。
         * @summary 料金プランを取得
         * @param {string} planId 料金プランID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPricingPlan(planId: string, options?: any): AxiosPromise<PricingPlan> {
            return localVarFp.getPricingPlan(planId, options).then((request) => request(axios, basePath));
        },
        /**
         * 料金プラン一覧を取得します。 機能メニューを複数まとめて、１つの料金プランとして定義します。 ここで定義した料金プランを各テナントは選ぶことができます。 もし特定テナント特有の料金（プライベートプライシング）がある場合は、そのテナント専用の料金プランを作成して結びつけます。 
         * @summary 料金プラン一覧を取得
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPricingPlans(options?: any): AxiosPromise<PricingPlans> {
            return localVarFp.getPricingPlans(options).then((request) => request(axios, basePath));
        },
        /**
         * stripeへ情報を連携します。
         * @summary stripe連携
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        linkPlanToStripe(options?: any): AxiosPromise<void> {
            return localVarFp.linkPlanToStripe(options).then((request) => request(axios, basePath));
        },
        /**
         * 料金プランを更新します。
         * @summary 料金プランを更新
         * @param {string} planId 料金プランID
         * @param {SavePricingPlanParam} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updatePricingPlan(planId: string, body?: SavePricingPlanParam, options?: any): AxiosPromise<void> {
            return localVarFp.updatePricingPlan(planId, body, options).then((request) => request(axios, basePath));
        },
        /**
         * 料金プランと配下のメニュー・ユニットを使用済みに更新します。
         * @summary 使用済みフラグ更新
         * @param {UpdatePricingPlansUsedParam} [updatePricingPlansUsedParam] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updatePricingPlansUsed(updatePricingPlansUsedParam?: UpdatePricingPlansUsedParam, options?: any): AxiosPromise<void> {
            return localVarFp.updatePricingPlansUsed(updatePricingPlansUsedParam, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * PricingPlansApi - object-oriented interface
 * @export
 * @class PricingPlansApi
 * @extends {BaseAPI}
 */
export class PricingPlansApi extends BaseAPI {
    /**
     * 料金プランを作成します。
     * @summary 料金プランを作成
     * @param {SavePricingPlanParam} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PricingPlansApi
     */
    public createPricingPlan(body?: SavePricingPlanParam, options?: AxiosRequestConfig) {
        return PricingPlansApiFp(this.configuration).createPricingPlan(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 料金プランを削除します。
     * @summary 料金プランを削除
     * @param {string} planId 料金プランID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PricingPlansApi
     */
    public deletePricingPlan(planId: string, options?: AxiosRequestConfig) {
        return PricingPlansApiFp(this.configuration).deletePricingPlan(planId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 料金プランを取得します。
     * @summary 料金プランを取得
     * @param {string} planId 料金プランID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PricingPlansApi
     */
    public getPricingPlan(planId: string, options?: AxiosRequestConfig) {
        return PricingPlansApiFp(this.configuration).getPricingPlan(planId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 料金プラン一覧を取得します。 機能メニューを複数まとめて、１つの料金プランとして定義します。 ここで定義した料金プランを各テナントは選ぶことができます。 もし特定テナント特有の料金（プライベートプライシング）がある場合は、そのテナント専用の料金プランを作成して結びつけます。 
     * @summary 料金プラン一覧を取得
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PricingPlansApi
     */
    public getPricingPlans(options?: AxiosRequestConfig) {
        return PricingPlansApiFp(this.configuration).getPricingPlans(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * stripeへ情報を連携します。
     * @summary stripe連携
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PricingPlansApi
     */
    public linkPlanToStripe(options?: AxiosRequestConfig) {
        return PricingPlansApiFp(this.configuration).linkPlanToStripe(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 料金プランを更新します。
     * @summary 料金プランを更新
     * @param {string} planId 料金プランID
     * @param {SavePricingPlanParam} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PricingPlansApi
     */
    public updatePricingPlan(planId: string, body?: SavePricingPlanParam, options?: AxiosRequestConfig) {
        return PricingPlansApiFp(this.configuration).updatePricingPlan(planId, body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 料金プランと配下のメニュー・ユニットを使用済みに更新します。
     * @summary 使用済みフラグ更新
     * @param {UpdatePricingPlansUsedParam} [updatePricingPlansUsedParam] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PricingPlansApi
     */
    public updatePricingPlansUsed(updatePricingPlansUsedParam?: UpdatePricingPlansUsedParam, options?: AxiosRequestConfig) {
        return PricingPlansApiFp(this.configuration).updatePricingPlansUsed(updatePricingPlansUsedParam, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * PricingUnitsApi - axios parameter creator
 * @export
 */
export const PricingUnitsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * プライシングユニットを作成します。
         * @summary プライシングユニットを作成
         * @param {PricingUnitForSave} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createPricingUnit: async (body?: PricingUnitForSave, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/units`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * プライシングユニットを削除します。
         * @summary プライシングユニットを削除
         * @param {string} pricingUnitId ユニットID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deletePricingUnit: async (pricingUnitId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'pricingUnitId' is not null or undefined
            assertParamExists('deletePricingUnit', 'pricingUnitId', pricingUnitId)
            const localVarPath = `/units/{pricing_unit_id}`
                .replace(`{${"pricing_unit_id"}}`, encodeURIComponent(String(pricingUnitId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * プライシングユニットを取得します。
         * @summary プライシングユニットを取得
         * @param {string} pricingUnitId ユニットID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPricingUnit: async (pricingUnitId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'pricingUnitId' is not null or undefined
            assertParamExists('getPricingUnit', 'pricingUnitId', pricingUnitId)
            const localVarPath = `/units/{pricing_unit_id}`
                .replace(`{${"pricing_unit_id"}}`, encodeURIComponent(String(pricingUnitId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 料金のベースとなる最小の計測単位を取得します。 「固定ユニット」(type=fixed)は基本料金などの月額固定料金の単位、 「使用量ユニット」(type=usage)はユーザ数課金などの１単位あたりごとに料金が発生する単位、 「段階ユニット」(type=tiered)は携帯電話の段階的パケット料金のように利用量の段階ごとに一定の料金の単位、 「段階的使用量ユニット」(type=tiered_usage)はボリュームディスカウントのように利用量に応じて１単位あたりの料金が変化していく単位、となります。 
         * @summary プライシングユニットの一覧を取得
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPricingUnits: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/units`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * プライシングユニット情報を更新します。
         * @summary プライシングユニットを更新
         * @param {string} pricingUnitId ユニットID
         * @param {PricingUnitForSave} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updatePricingUnit: async (pricingUnitId: string, body?: PricingUnitForSave, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'pricingUnitId' is not null or undefined
            assertParamExists('updatePricingUnit', 'pricingUnitId', pricingUnitId)
            const localVarPath = `/units/{pricing_unit_id}`
                .replace(`{${"pricing_unit_id"}}`, encodeURIComponent(String(pricingUnitId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PricingUnitsApi - functional programming interface
 * @export
 */
export const PricingUnitsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = PricingUnitsApiAxiosParamCreator(configuration)
    return {
        /**
         * プライシングユニットを作成します。
         * @summary プライシングユニットを作成
         * @param {PricingUnitForSave} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createPricingUnit(body?: PricingUnitForSave, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PricingUnit>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createPricingUnit(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * プライシングユニットを削除します。
         * @summary プライシングユニットを削除
         * @param {string} pricingUnitId ユニットID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deletePricingUnit(pricingUnitId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deletePricingUnit(pricingUnitId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * プライシングユニットを取得します。
         * @summary プライシングユニットを取得
         * @param {string} pricingUnitId ユニットID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPricingUnit(pricingUnitId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PricingUnit>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPricingUnit(pricingUnitId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 料金のベースとなる最小の計測単位を取得します。 「固定ユニット」(type=fixed)は基本料金などの月額固定料金の単位、 「使用量ユニット」(type=usage)はユーザ数課金などの１単位あたりごとに料金が発生する単位、 「段階ユニット」(type=tiered)は携帯電話の段階的パケット料金のように利用量の段階ごとに一定の料金の単位、 「段階的使用量ユニット」(type=tiered_usage)はボリュームディスカウントのように利用量に応じて１単位あたりの料金が変化していく単位、となります。 
         * @summary プライシングユニットの一覧を取得
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPricingUnits(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PricingUnits>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPricingUnits(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * プライシングユニット情報を更新します。
         * @summary プライシングユニットを更新
         * @param {string} pricingUnitId ユニットID
         * @param {PricingUnitForSave} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updatePricingUnit(pricingUnitId: string, body?: PricingUnitForSave, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updatePricingUnit(pricingUnitId, body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * PricingUnitsApi - factory interface
 * @export
 */
export const PricingUnitsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = PricingUnitsApiFp(configuration)
    return {
        /**
         * プライシングユニットを作成します。
         * @summary プライシングユニットを作成
         * @param {PricingUnitForSave} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createPricingUnit(body?: PricingUnitForSave, options?: any): AxiosPromise<PricingUnit> {
            return localVarFp.createPricingUnit(body, options).then((request) => request(axios, basePath));
        },
        /**
         * プライシングユニットを削除します。
         * @summary プライシングユニットを削除
         * @param {string} pricingUnitId ユニットID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deletePricingUnit(pricingUnitId: string, options?: any): AxiosPromise<void> {
            return localVarFp.deletePricingUnit(pricingUnitId, options).then((request) => request(axios, basePath));
        },
        /**
         * プライシングユニットを取得します。
         * @summary プライシングユニットを取得
         * @param {string} pricingUnitId ユニットID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPricingUnit(pricingUnitId: string, options?: any): AxiosPromise<PricingUnit> {
            return localVarFp.getPricingUnit(pricingUnitId, options).then((request) => request(axios, basePath));
        },
        /**
         * 料金のベースとなる最小の計測単位を取得します。 「固定ユニット」(type=fixed)は基本料金などの月額固定料金の単位、 「使用量ユニット」(type=usage)はユーザ数課金などの１単位あたりごとに料金が発生する単位、 「段階ユニット」(type=tiered)は携帯電話の段階的パケット料金のように利用量の段階ごとに一定の料金の単位、 「段階的使用量ユニット」(type=tiered_usage)はボリュームディスカウントのように利用量に応じて１単位あたりの料金が変化していく単位、となります。 
         * @summary プライシングユニットの一覧を取得
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPricingUnits(options?: any): AxiosPromise<PricingUnits> {
            return localVarFp.getPricingUnits(options).then((request) => request(axios, basePath));
        },
        /**
         * プライシングユニット情報を更新します。
         * @summary プライシングユニットを更新
         * @param {string} pricingUnitId ユニットID
         * @param {PricingUnitForSave} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updatePricingUnit(pricingUnitId: string, body?: PricingUnitForSave, options?: any): AxiosPromise<void> {
            return localVarFp.updatePricingUnit(pricingUnitId, body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * PricingUnitsApi - object-oriented interface
 * @export
 * @class PricingUnitsApi
 * @extends {BaseAPI}
 */
export class PricingUnitsApi extends BaseAPI {
    /**
     * プライシングユニットを作成します。
     * @summary プライシングユニットを作成
     * @param {PricingUnitForSave} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PricingUnitsApi
     */
    public createPricingUnit(body?: PricingUnitForSave, options?: AxiosRequestConfig) {
        return PricingUnitsApiFp(this.configuration).createPricingUnit(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * プライシングユニットを削除します。
     * @summary プライシングユニットを削除
     * @param {string} pricingUnitId ユニットID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PricingUnitsApi
     */
    public deletePricingUnit(pricingUnitId: string, options?: AxiosRequestConfig) {
        return PricingUnitsApiFp(this.configuration).deletePricingUnit(pricingUnitId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * プライシングユニットを取得します。
     * @summary プライシングユニットを取得
     * @param {string} pricingUnitId ユニットID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PricingUnitsApi
     */
    public getPricingUnit(pricingUnitId: string, options?: AxiosRequestConfig) {
        return PricingUnitsApiFp(this.configuration).getPricingUnit(pricingUnitId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 料金のベースとなる最小の計測単位を取得します。 「固定ユニット」(type=fixed)は基本料金などの月額固定料金の単位、 「使用量ユニット」(type=usage)はユーザ数課金などの１単位あたりごとに料金が発生する単位、 「段階ユニット」(type=tiered)は携帯電話の段階的パケット料金のように利用量の段階ごとに一定の料金の単位、 「段階的使用量ユニット」(type=tiered_usage)はボリュームディスカウントのように利用量に応じて１単位あたりの料金が変化していく単位、となります。 
     * @summary プライシングユニットの一覧を取得
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PricingUnitsApi
     */
    public getPricingUnits(options?: AxiosRequestConfig) {
        return PricingUnitsApiFp(this.configuration).getPricingUnits(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * プライシングユニット情報を更新します。
     * @summary プライシングユニットを更新
     * @param {string} pricingUnitId ユニットID
     * @param {PricingUnitForSave} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PricingUnitsApi
     */
    public updatePricingUnit(pricingUnitId: string, body?: PricingUnitForSave, options?: AxiosRequestConfig) {
        return PricingUnitsApiFp(this.configuration).updatePricingUnit(pricingUnitId, body, options).then((request) => request(this.axios, this.basePath));
    }
}


