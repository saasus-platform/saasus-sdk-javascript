/* tslint:disable */
/* eslint-disable */
/**
 * SaaSus AWS Marketplace API Schema
 * SaaSus AWS Marketplace API Schema
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface CatalogEntityVisibility
 */
export interface CatalogEntityVisibility {
    /**
     * 
     * @type {VisibilityStatus}
     * @memberof CatalogEntityVisibility
     */
    'visibility': VisibilityStatus;
}
/**
 * 
 * @export
 * @interface CloudFormationLaunchStackLink
 */
export interface CloudFormationLaunchStackLink {
    /**
     * 
     * @type {string}
     * @memberof CloudFormationLaunchStackLink
     */
    'link': string;
}
/**
 * 
 * @export
 * @interface CreateCustomerParam
 */
export interface CreateCustomerParam {
    /**
     * 
     * @type {string}
     * @memberof CreateCustomerParam
     */
    'tenant_id': string;
    /**
     * 
     * @type {string}
     * @memberof CreateCustomerParam
     */
    'registration_token': string;
}
/**
 * 
 * @export
 * @interface Customer
 */
export interface Customer {
    /**
     * 
     * @type {string}
     * @memberof Customer
     */
    'customer_identifier': string;
    /**
     * 
     * @type {string}
     * @memberof Customer
     */
    'customer_aws_account_id': string;
    /**
     * 
     * @type {string}
     * @memberof Customer
     */
    'tenant_id': string;
}
/**
 * 
 * @export
 * @interface Customers
 */
export interface Customers {
    /**
     * 
     * @type {Array<Customer>}
     * @memberof Customers
     */
    'customers': Array<Customer>;
}
/**
 * 
 * @export
 * @interface GetListingStatusResult
 */
export interface GetListingStatusResult {
    /**
     * 
     * @type {ListingStatus}
     * @memberof GetListingStatusResult
     */
    'listing_status': ListingStatus;
}
/**
 * 
 * @export
 * @enum {string}
 */

export const ListingStatus = {
    NoListing: 'no_listing',
    FirstStepWorking: 'first_step_working',
    FirstStepCompleted: 'first_step_completed',
    SecondStepWorking: 'second_step_working',
    SecondStepPlanCreated: 'second_step_plan_created',
    SecondStepCompleted: 'second_step_completed',
    ThirdStepWorking: 'third_step_working',
    ThirdStepCompleted: 'third_step_completed',
    Limited: 'limited',
    Restricted: 'restricted',
    Public: 'public'
} as const;

export type ListingStatus = typeof ListingStatus[keyof typeof ListingStatus];


/**
 * 
 * @export
 * @interface ModelError
 */
export interface ModelError {
    /**
     * 
     * @type {string}
     * @memberof ModelError
     */
    'type': string;
    /**
     * 
     * @type {string}
     * @memberof ModelError
     */
    'message': string;
}
/**
 * 
 * @export
 * @interface Plan
 */
export interface Plan {
    /**
     * 
     * @type {string}
     * @memberof Plan
     */
    'plan_id': string;
    /**
     * 
     * @type {string}
     * @memberof Plan
     */
    'plan_name': string;
}
/**
 * 
 * @export
 * @interface Plans
 */
export interface Plans {
    /**
     * 
     * @type {Array<Plan>}
     * @memberof Plans
     */
    'plans': Array<Plan>;
}
/**
 * 
 * @export
 * @interface SavePlanParam
 */
export interface SavePlanParam {
    /**
     * 
     * @type {string}
     * @memberof SavePlanParam
     */
    'plan_id': string;
    /**
     * 
     * @type {string}
     * @memberof SavePlanParam
     */
    'plan_name': string;
}
/**
 * 
 * @export
 * @interface Settings
 */
export interface Settings {
    /**
     * 
     * @type {string}
     * @memberof Settings
     */
    'product_code': string;
    /**
     * 
     * @type {string}
     * @memberof Settings
     */
    'role_arn': string;
    /**
     * 
     * @type {string}
     * @memberof Settings
     */
    'role_external_id': string;
    /**
     * 
     * @type {string}
     * @memberof Settings
     */
    'sns_topic_arn': string;
    /**
     * 
     * @type {string}
     * @memberof Settings
     */
    'cas_bucket_name': string;
    /**
     * 
     * @type {string}
     * @memberof Settings
     */
    'cas_sns_topic_arn': string;
    /**
     * 
     * @type {string}
     * @memberof Settings
     */
    'seller_sns_topic_arn': string;
    /**
     * 
     * @type {string}
     * @memberof Settings
     */
    'redirect_sign_up_page_function_url': string;
    /**
     * 
     * @type {string}
     * @memberof Settings
     */
    'sqs_arn': string;
}
/**
 * 
 * @export
 * @interface UpdateListingStatusParam
 */
export interface UpdateListingStatusParam {
    /**
     * 
     * @type {ListingStatus}
     * @memberof UpdateListingStatusParam
     */
    'listing_status': ListingStatus;
}
/**
 * 
 * @export
 * @interface UpdateSettingsParam
 */
export interface UpdateSettingsParam {
    /**
     * 
     * @type {string}
     * @memberof UpdateSettingsParam
     */
    'product_code'?: string;
    /**
     * 
     * @type {string}
     * @memberof UpdateSettingsParam
     */
    'role_arn'?: string;
    /**
     * 
     * @type {string}
     * @memberof UpdateSettingsParam
     */
    'role_external_id'?: string;
    /**
     * 
     * @type {string}
     * @memberof UpdateSettingsParam
     */
    'sns_topic_arn'?: string;
    /**
     * 
     * @type {string}
     * @memberof UpdateSettingsParam
     */
    'cas_bucket_name'?: string;
    /**
     * 
     * @type {string}
     * @memberof UpdateSettingsParam
     */
    'cas_sns_topic_arn'?: string;
    /**
     * 
     * @type {string}
     * @memberof UpdateSettingsParam
     */
    'seller_sns_topic_arn'?: string;
    /**
     * 
     * @type {string}
     * @memberof UpdateSettingsParam
     */
    'sqs_arn'?: string;
}
/**
 * 
 * @export
 * @interface VerifyRegistrationTokenParam
 */
export interface VerifyRegistrationTokenParam {
    /**
     * 
     * @type {string}
     * @memberof VerifyRegistrationTokenParam
     */
    'registration_token': string;
}
/**
 * 
 * @export
 * @enum {string}
 */

export const VisibilityStatus = {
    Public: 'Public',
    Limited: 'Limited',
    Restricted: 'Restricted'
} as const;

export type VisibilityStatus = typeof VisibilityStatus[keyof typeof VisibilityStatus];



/**
 * AwsMarketplaceApi - axios parameter creator
 * @export
 */
export const AwsMarketplaceApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Create customer information to be linked to AWS Marketplace. 
         * @summary Create customer information to be linked to AWS Marketplace
         * @param {CreateCustomerParam} [createCustomerParam] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createCustomer: async (createCustomerParam?: CreateCustomerParam, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/customers`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createCustomerParam, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve the product\'s publication status from AWS Marketplace. 
         * @summary Obtain product publication status from AWS Marketplace
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCatalogEntityVisibility: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/catalog-entity/visibility`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get the CloudFormation Quick Create link. 
         * @summary Get the link to create the AWS CloudFormation stack
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCloudFormationLaunchStackLink: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/cloudformation-launch-stack-link`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get customer information to be linked to AWS Marketplace. 
         * @summary Get customer information to be linked to AWS Marketplace
         * @param {string} customerIdentifier Customer ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCustomer: async (customerIdentifier: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'customerIdentifier' is not null or undefined
            assertParamExists('getCustomer', 'customerIdentifier', customerIdentifier)
            const localVarPath = `/customers/{customer_identifier}`
                .replace(`{${"customer_identifier"}}`, encodeURIComponent(String(customerIdentifier)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a list of customer information to be linked to AWS Marketplace. 
         * @summary Get a list of customer information to be linked to AWS Marketplace
         * @param {Array<string>} [tenantIds] 指定したテナントIDの顧客を取得する(Get customers with the specified tenant ID)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCustomers: async (tenantIds?: Array<string>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/customers`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (tenantIds) {
                localVarQueryParameter['tenant_ids'] = tenantIds;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get AWS Marketplace Listing Status. 
         * @summary Get AWS Marketplace Listing Status
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getListingStatus: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/listing-status`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Obtain plan information to link to AWS Marketplace. 
         * @summary Obtain plan information to link to AWS Marketplace
         * @param {string} planName AWS Marketplace linked plan name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPlanByPlanName: async (planName: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'planName' is not null or undefined
            assertParamExists('getPlanByPlanName', 'planName', planName)
            const localVarPath = `/plans/{plan_name}`
                .replace(`{${"plan_name"}}`, encodeURIComponent(String(planName)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Obtain plan information to link to AWS Marketplace. 
         * @summary Obtain plan information to link to AWS Marketplace
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPlans: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/plans`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get AWS Marketplace Settings. 
         * @summary Get AWS Marketplace Settings
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSettings: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/settings`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Save plan information to be linked to AWSMarketplace. 
         * @summary Save plan information to be linked to AWSMarketplace
         * @param {SavePlanParam} [savePlanParam] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        savePlan: async (savePlanParam?: SavePlanParam, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/plans`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(savePlanParam, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Sync AWS Marketplace customer information to SaaSus. 
         * @summary Sync AWS Marketplace customer information to SaaSus
         * @param {string} customerIdentifier Customer ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        syncCustomer: async (customerIdentifier: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'customerIdentifier' is not null or undefined
            assertParamExists('syncCustomer', 'customerIdentifier', customerIdentifier)
            const localVarPath = `/customers/{customer_identifier}/sync`
                .replace(`{${"customer_identifier"}}`, encodeURIComponent(String(customerIdentifier)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update AWS Marketplace Listing Status. 
         * @summary Update AWS Marketplace Listing Status
         * @param {UpdateListingStatusParam} [updateListingStatusParam] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateListingStatus: async (updateListingStatusParam?: UpdateListingStatusParam, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/listing-status`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateListingStatusParam, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update AWS Marketplace Settings. 
         * @summary Update AWS Marketplace Settings
         * @param {UpdateSettingsParam} [updateSettingsParam] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateSettings: async (updateSettingsParam?: UpdateSettingsParam, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/settings`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateSettingsParam, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Verify Registration Token. 
         * @summary Verify Registration Token
         * @param {VerifyRegistrationTokenParam} [verifyRegistrationTokenParam] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        verifyRegistrationToken: async (verifyRegistrationTokenParam?: VerifyRegistrationTokenParam, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/registration-token/verify`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(verifyRegistrationTokenParam, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AwsMarketplaceApi - functional programming interface
 * @export
 */
export const AwsMarketplaceApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AwsMarketplaceApiAxiosParamCreator(configuration)
    return {
        /**
         * Create customer information to be linked to AWS Marketplace. 
         * @summary Create customer information to be linked to AWS Marketplace
         * @param {CreateCustomerParam} [createCustomerParam] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createCustomer(createCustomerParam?: CreateCustomerParam, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Customer>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createCustomer(createCustomerParam, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieve the product\'s publication status from AWS Marketplace. 
         * @summary Obtain product publication status from AWS Marketplace
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCatalogEntityVisibility(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CatalogEntityVisibility>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCatalogEntityVisibility(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get the CloudFormation Quick Create link. 
         * @summary Get the link to create the AWS CloudFormation stack
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCloudFormationLaunchStackLink(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CloudFormationLaunchStackLink>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCloudFormationLaunchStackLink(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get customer information to be linked to AWS Marketplace. 
         * @summary Get customer information to be linked to AWS Marketplace
         * @param {string} customerIdentifier Customer ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCustomer(customerIdentifier: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Customer>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCustomer(customerIdentifier, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get a list of customer information to be linked to AWS Marketplace. 
         * @summary Get a list of customer information to be linked to AWS Marketplace
         * @param {Array<string>} [tenantIds] 指定したテナントIDの顧客を取得する(Get customers with the specified tenant ID)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCustomers(tenantIds?: Array<string>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Customers>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCustomers(tenantIds, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get AWS Marketplace Listing Status. 
         * @summary Get AWS Marketplace Listing Status
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getListingStatus(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetListingStatusResult>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getListingStatus(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Obtain plan information to link to AWS Marketplace. 
         * @summary Obtain plan information to link to AWS Marketplace
         * @param {string} planName AWS Marketplace linked plan name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPlanByPlanName(planName: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Plan>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPlanByPlanName(planName, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Obtain plan information to link to AWS Marketplace. 
         * @summary Obtain plan information to link to AWS Marketplace
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPlans(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Plans>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPlans(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get AWS Marketplace Settings. 
         * @summary Get AWS Marketplace Settings
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSettings(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Settings>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSettings(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Save plan information to be linked to AWSMarketplace. 
         * @summary Save plan information to be linked to AWSMarketplace
         * @param {SavePlanParam} [savePlanParam] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async savePlan(savePlanParam?: SavePlanParam, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.savePlan(savePlanParam, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Sync AWS Marketplace customer information to SaaSus. 
         * @summary Sync AWS Marketplace customer information to SaaSus
         * @param {string} customerIdentifier Customer ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async syncCustomer(customerIdentifier: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.syncCustomer(customerIdentifier, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Update AWS Marketplace Listing Status. 
         * @summary Update AWS Marketplace Listing Status
         * @param {UpdateListingStatusParam} [updateListingStatusParam] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateListingStatus(updateListingStatusParam?: UpdateListingStatusParam, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateListingStatus(updateListingStatusParam, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Update AWS Marketplace Settings. 
         * @summary Update AWS Marketplace Settings
         * @param {UpdateSettingsParam} [updateSettingsParam] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateSettings(updateSettingsParam?: UpdateSettingsParam, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateSettings(updateSettingsParam, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Verify Registration Token. 
         * @summary Verify Registration Token
         * @param {VerifyRegistrationTokenParam} [verifyRegistrationTokenParam] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async verifyRegistrationToken(verifyRegistrationTokenParam?: VerifyRegistrationTokenParam, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.verifyRegistrationToken(verifyRegistrationTokenParam, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * AwsMarketplaceApi - factory interface
 * @export
 */
export const AwsMarketplaceApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AwsMarketplaceApiFp(configuration)
    return {
        /**
         * Create customer information to be linked to AWS Marketplace. 
         * @summary Create customer information to be linked to AWS Marketplace
         * @param {CreateCustomerParam} [createCustomerParam] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createCustomer(createCustomerParam?: CreateCustomerParam, options?: any): AxiosPromise<Customer> {
            return localVarFp.createCustomer(createCustomerParam, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve the product\'s publication status from AWS Marketplace. 
         * @summary Obtain product publication status from AWS Marketplace
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCatalogEntityVisibility(options?: any): AxiosPromise<CatalogEntityVisibility> {
            return localVarFp.getCatalogEntityVisibility(options).then((request) => request(axios, basePath));
        },
        /**
         * Get the CloudFormation Quick Create link. 
         * @summary Get the link to create the AWS CloudFormation stack
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCloudFormationLaunchStackLink(options?: any): AxiosPromise<CloudFormationLaunchStackLink> {
            return localVarFp.getCloudFormationLaunchStackLink(options).then((request) => request(axios, basePath));
        },
        /**
         * Get customer information to be linked to AWS Marketplace. 
         * @summary Get customer information to be linked to AWS Marketplace
         * @param {string} customerIdentifier Customer ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCustomer(customerIdentifier: string, options?: any): AxiosPromise<Customer> {
            return localVarFp.getCustomer(customerIdentifier, options).then((request) => request(axios, basePath));
        },
        /**
         * Get a list of customer information to be linked to AWS Marketplace. 
         * @summary Get a list of customer information to be linked to AWS Marketplace
         * @param {Array<string>} [tenantIds] 指定したテナントIDの顧客を取得する(Get customers with the specified tenant ID)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCustomers(tenantIds?: Array<string>, options?: any): AxiosPromise<Customers> {
            return localVarFp.getCustomers(tenantIds, options).then((request) => request(axios, basePath));
        },
        /**
         * Get AWS Marketplace Listing Status. 
         * @summary Get AWS Marketplace Listing Status
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getListingStatus(options?: any): AxiosPromise<GetListingStatusResult> {
            return localVarFp.getListingStatus(options).then((request) => request(axios, basePath));
        },
        /**
         * Obtain plan information to link to AWS Marketplace. 
         * @summary Obtain plan information to link to AWS Marketplace
         * @param {string} planName AWS Marketplace linked plan name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPlanByPlanName(planName: string, options?: any): AxiosPromise<Plan> {
            return localVarFp.getPlanByPlanName(planName, options).then((request) => request(axios, basePath));
        },
        /**
         * Obtain plan information to link to AWS Marketplace. 
         * @summary Obtain plan information to link to AWS Marketplace
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPlans(options?: any): AxiosPromise<Plans> {
            return localVarFp.getPlans(options).then((request) => request(axios, basePath));
        },
        /**
         * Get AWS Marketplace Settings. 
         * @summary Get AWS Marketplace Settings
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSettings(options?: any): AxiosPromise<Settings> {
            return localVarFp.getSettings(options).then((request) => request(axios, basePath));
        },
        /**
         * Save plan information to be linked to AWSMarketplace. 
         * @summary Save plan information to be linked to AWSMarketplace
         * @param {SavePlanParam} [savePlanParam] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        savePlan(savePlanParam?: SavePlanParam, options?: any): AxiosPromise<void> {
            return localVarFp.savePlan(savePlanParam, options).then((request) => request(axios, basePath));
        },
        /**
         * Sync AWS Marketplace customer information to SaaSus. 
         * @summary Sync AWS Marketplace customer information to SaaSus
         * @param {string} customerIdentifier Customer ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        syncCustomer(customerIdentifier: string, options?: any): AxiosPromise<void> {
            return localVarFp.syncCustomer(customerIdentifier, options).then((request) => request(axios, basePath));
        },
        /**
         * Update AWS Marketplace Listing Status. 
         * @summary Update AWS Marketplace Listing Status
         * @param {UpdateListingStatusParam} [updateListingStatusParam] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateListingStatus(updateListingStatusParam?: UpdateListingStatusParam, options?: any): AxiosPromise<void> {
            return localVarFp.updateListingStatus(updateListingStatusParam, options).then((request) => request(axios, basePath));
        },
        /**
         * Update AWS Marketplace Settings. 
         * @summary Update AWS Marketplace Settings
         * @param {UpdateSettingsParam} [updateSettingsParam] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateSettings(updateSettingsParam?: UpdateSettingsParam, options?: any): AxiosPromise<void> {
            return localVarFp.updateSettings(updateSettingsParam, options).then((request) => request(axios, basePath));
        },
        /**
         * Verify Registration Token. 
         * @summary Verify Registration Token
         * @param {VerifyRegistrationTokenParam} [verifyRegistrationTokenParam] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        verifyRegistrationToken(verifyRegistrationTokenParam?: VerifyRegistrationTokenParam, options?: any): AxiosPromise<void> {
            return localVarFp.verifyRegistrationToken(verifyRegistrationTokenParam, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AwsMarketplaceApi - object-oriented interface
 * @export
 * @class AwsMarketplaceApi
 * @extends {BaseAPI}
 */
export class AwsMarketplaceApi extends BaseAPI {
    /**
     * Create customer information to be linked to AWS Marketplace. 
     * @summary Create customer information to be linked to AWS Marketplace
     * @param {CreateCustomerParam} [createCustomerParam] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AwsMarketplaceApi
     */
    public createCustomer(createCustomerParam?: CreateCustomerParam, options?: AxiosRequestConfig) {
        return AwsMarketplaceApiFp(this.configuration).createCustomer(createCustomerParam, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieve the product\'s publication status from AWS Marketplace. 
     * @summary Obtain product publication status from AWS Marketplace
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AwsMarketplaceApi
     */
    public getCatalogEntityVisibility(options?: AxiosRequestConfig) {
        return AwsMarketplaceApiFp(this.configuration).getCatalogEntityVisibility(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get the CloudFormation Quick Create link. 
     * @summary Get the link to create the AWS CloudFormation stack
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AwsMarketplaceApi
     */
    public getCloudFormationLaunchStackLink(options?: AxiosRequestConfig) {
        return AwsMarketplaceApiFp(this.configuration).getCloudFormationLaunchStackLink(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get customer information to be linked to AWS Marketplace. 
     * @summary Get customer information to be linked to AWS Marketplace
     * @param {string} customerIdentifier Customer ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AwsMarketplaceApi
     */
    public getCustomer(customerIdentifier: string, options?: AxiosRequestConfig) {
        return AwsMarketplaceApiFp(this.configuration).getCustomer(customerIdentifier, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get a list of customer information to be linked to AWS Marketplace. 
     * @summary Get a list of customer information to be linked to AWS Marketplace
     * @param {Array<string>} [tenantIds] 指定したテナントIDの顧客を取得する(Get customers with the specified tenant ID)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AwsMarketplaceApi
     */
    public getCustomers(tenantIds?: Array<string>, options?: AxiosRequestConfig) {
        return AwsMarketplaceApiFp(this.configuration).getCustomers(tenantIds, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get AWS Marketplace Listing Status. 
     * @summary Get AWS Marketplace Listing Status
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AwsMarketplaceApi
     */
    public getListingStatus(options?: AxiosRequestConfig) {
        return AwsMarketplaceApiFp(this.configuration).getListingStatus(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Obtain plan information to link to AWS Marketplace. 
     * @summary Obtain plan information to link to AWS Marketplace
     * @param {string} planName AWS Marketplace linked plan name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AwsMarketplaceApi
     */
    public getPlanByPlanName(planName: string, options?: AxiosRequestConfig) {
        return AwsMarketplaceApiFp(this.configuration).getPlanByPlanName(planName, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Obtain plan information to link to AWS Marketplace. 
     * @summary Obtain plan information to link to AWS Marketplace
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AwsMarketplaceApi
     */
    public getPlans(options?: AxiosRequestConfig) {
        return AwsMarketplaceApiFp(this.configuration).getPlans(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get AWS Marketplace Settings. 
     * @summary Get AWS Marketplace Settings
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AwsMarketplaceApi
     */
    public getSettings(options?: AxiosRequestConfig) {
        return AwsMarketplaceApiFp(this.configuration).getSettings(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Save plan information to be linked to AWSMarketplace. 
     * @summary Save plan information to be linked to AWSMarketplace
     * @param {SavePlanParam} [savePlanParam] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AwsMarketplaceApi
     */
    public savePlan(savePlanParam?: SavePlanParam, options?: AxiosRequestConfig) {
        return AwsMarketplaceApiFp(this.configuration).savePlan(savePlanParam, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Sync AWS Marketplace customer information to SaaSus. 
     * @summary Sync AWS Marketplace customer information to SaaSus
     * @param {string} customerIdentifier Customer ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AwsMarketplaceApi
     */
    public syncCustomer(customerIdentifier: string, options?: AxiosRequestConfig) {
        return AwsMarketplaceApiFp(this.configuration).syncCustomer(customerIdentifier, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update AWS Marketplace Listing Status. 
     * @summary Update AWS Marketplace Listing Status
     * @param {UpdateListingStatusParam} [updateListingStatusParam] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AwsMarketplaceApi
     */
    public updateListingStatus(updateListingStatusParam?: UpdateListingStatusParam, options?: AxiosRequestConfig) {
        return AwsMarketplaceApiFp(this.configuration).updateListingStatus(updateListingStatusParam, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update AWS Marketplace Settings. 
     * @summary Update AWS Marketplace Settings
     * @param {UpdateSettingsParam} [updateSettingsParam] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AwsMarketplaceApi
     */
    public updateSettings(updateSettingsParam?: UpdateSettingsParam, options?: AxiosRequestConfig) {
        return AwsMarketplaceApiFp(this.configuration).updateSettings(updateSettingsParam, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Verify Registration Token. 
     * @summary Verify Registration Token
     * @param {VerifyRegistrationTokenParam} [verifyRegistrationTokenParam] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AwsMarketplaceApi
     */
    public verifyRegistrationToken(verifyRegistrationTokenParam?: VerifyRegistrationTokenParam, options?: AxiosRequestConfig) {
        return AwsMarketplaceApiFp(this.configuration).verifyRegistrationToken(verifyRegistrationTokenParam, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * ErrorApi - axios parameter creator
 * @export
 */
export const ErrorApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * This endpoint is used for testing purposes. Returns a server error with status code 500. 
         * @summary Return Internal Server Error
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        returnInternalServerError: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/errors/internal-server-error`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ErrorApi - functional programming interface
 * @export
 */
export const ErrorApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ErrorApiAxiosParamCreator(configuration)
    return {
        /**
         * This endpoint is used for testing purposes. Returns a server error with status code 500. 
         * @summary Return Internal Server Error
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async returnInternalServerError(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.returnInternalServerError(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ErrorApi - factory interface
 * @export
 */
export const ErrorApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ErrorApiFp(configuration)
    return {
        /**
         * This endpoint is used for testing purposes. Returns a server error with status code 500. 
         * @summary Return Internal Server Error
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        returnInternalServerError(options?: any): AxiosPromise<void> {
            return localVarFp.returnInternalServerError(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ErrorApi - object-oriented interface
 * @export
 * @class ErrorApi
 * @extends {BaseAPI}
 */
export class ErrorApi extends BaseAPI {
    /**
     * This endpoint is used for testing purposes. Returns a server error with status code 500. 
     * @summary Return Internal Server Error
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ErrorApi
     */
    public returnInternalServerError(options?: AxiosRequestConfig) {
        return ErrorApiFp(this.configuration).returnInternalServerError(options).then((request) => request(this.axios, this.basePath));
    }
}


