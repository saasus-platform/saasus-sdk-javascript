/* tslint:disable */
/* eslint-disable */
/**
 * SaaSus Billing API Schema
 * SaaSus Billing API Schema
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface ModelError
 */
export interface ModelError {
    /**
     * permission_denied
     * @type {string}
     * @memberof ModelError
     */
    'type': string;
    /**
     * Error message
     * @type {string}
     * @memberof ModelError
     */
    'message': string;
}
/**
 * 
 * @export
 * @interface StripeInfo
 */
export interface StripeInfo {
    /**
     * 
     * @type {boolean}
     * @memberof StripeInfo
     */
    'is_registered': boolean;
}
/**
 * 
 * @export
 * @interface UpdateStripeInfoParam
 */
export interface UpdateStripeInfoParam {
    /**
     * secret key
     * @type {string}
     * @memberof UpdateStripeInfoParam
     */
    'secret_key': string;
}

/**
 * ErrorApi - axios parameter creator
 * @export
 */
export const ErrorApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * This endpoint is used for testing purposes. Returns a server error with status code 500. 
         * @summary Return Internal Server Error
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        returnInternalServerError: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/errors/internal-server-error`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ErrorApi - functional programming interface
 * @export
 */
export const ErrorApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ErrorApiAxiosParamCreator(configuration)
    return {
        /**
         * This endpoint is used for testing purposes. Returns a server error with status code 500. 
         * @summary Return Internal Server Error
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async returnInternalServerError(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.returnInternalServerError(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ErrorApi - factory interface
 * @export
 */
export const ErrorApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ErrorApiFp(configuration)
    return {
        /**
         * This endpoint is used for testing purposes. Returns a server error with status code 500. 
         * @summary Return Internal Server Error
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        returnInternalServerError(options?: any): AxiosPromise<void> {
            return localVarFp.returnInternalServerError(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ErrorApi - object-oriented interface
 * @export
 * @class ErrorApi
 * @extends {BaseAPI}
 */
export class ErrorApi extends BaseAPI {
    /**
     * This endpoint is used for testing purposes. Returns a server error with status code 500. 
     * @summary Return Internal Server Error
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ErrorApi
     */
    public returnInternalServerError(options?: AxiosRequestConfig) {
        return ErrorApiFp(this.configuration).returnInternalServerError(options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * StripeApi - axios parameter creator
 * @export
 */
export const StripeApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Delete connection with external billing SaaS 
         * @summary Delete Stripe Connection
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteStripeInfo: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/stripe/info`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get information on connnections with external billing SaaS. Currently possible to integrate with Stripe. Without integration, you will need to implement billing using the SaaSus SDK/API. 
         * @summary Get Stripe Connection information
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getStripeInfo: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/stripe/info`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Updates information on connection with external billing SaaS. Currently possible to connect to Stripe. 
         * @summary Update Stripe Connection Info
         * @param {UpdateStripeInfoParam} [updateStripeInfoParam] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateStripeInfo: async (updateStripeInfoParam?: UpdateStripeInfoParam, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/stripe/info`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateStripeInfoParam, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * StripeApi - functional programming interface
 * @export
 */
export const StripeApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = StripeApiAxiosParamCreator(configuration)
    return {
        /**
         * Delete connection with external billing SaaS 
         * @summary Delete Stripe Connection
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteStripeInfo(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteStripeInfo(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get information on connnections with external billing SaaS. Currently possible to integrate with Stripe. Without integration, you will need to implement billing using the SaaSus SDK/API. 
         * @summary Get Stripe Connection information
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getStripeInfo(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<StripeInfo>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getStripeInfo(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Updates information on connection with external billing SaaS. Currently possible to connect to Stripe. 
         * @summary Update Stripe Connection Info
         * @param {UpdateStripeInfoParam} [updateStripeInfoParam] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateStripeInfo(updateStripeInfoParam?: UpdateStripeInfoParam, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateStripeInfo(updateStripeInfoParam, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * StripeApi - factory interface
 * @export
 */
export const StripeApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = StripeApiFp(configuration)
    return {
        /**
         * Delete connection with external billing SaaS 
         * @summary Delete Stripe Connection
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteStripeInfo(options?: any): AxiosPromise<void> {
            return localVarFp.deleteStripeInfo(options).then((request) => request(axios, basePath));
        },
        /**
         * Get information on connnections with external billing SaaS. Currently possible to integrate with Stripe. Without integration, you will need to implement billing using the SaaSus SDK/API. 
         * @summary Get Stripe Connection information
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getStripeInfo(options?: any): AxiosPromise<StripeInfo> {
            return localVarFp.getStripeInfo(options).then((request) => request(axios, basePath));
        },
        /**
         * Updates information on connection with external billing SaaS. Currently possible to connect to Stripe. 
         * @summary Update Stripe Connection Info
         * @param {UpdateStripeInfoParam} [updateStripeInfoParam] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateStripeInfo(updateStripeInfoParam?: UpdateStripeInfoParam, options?: any): AxiosPromise<void> {
            return localVarFp.updateStripeInfo(updateStripeInfoParam, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * StripeApi - object-oriented interface
 * @export
 * @class StripeApi
 * @extends {BaseAPI}
 */
export class StripeApi extends BaseAPI {
    /**
     * Delete connection with external billing SaaS 
     * @summary Delete Stripe Connection
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StripeApi
     */
    public deleteStripeInfo(options?: AxiosRequestConfig) {
        return StripeApiFp(this.configuration).deleteStripeInfo(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get information on connnections with external billing SaaS. Currently possible to integrate with Stripe. Without integration, you will need to implement billing using the SaaSus SDK/API. 
     * @summary Get Stripe Connection information
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StripeApi
     */
    public getStripeInfo(options?: AxiosRequestConfig) {
        return StripeApiFp(this.configuration).getStripeInfo(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Updates information on connection with external billing SaaS. Currently possible to connect to Stripe. 
     * @summary Update Stripe Connection Info
     * @param {UpdateStripeInfoParam} [updateStripeInfoParam] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StripeApi
     */
    public updateStripeInfo(updateStripeInfoParam?: UpdateStripeInfoParam, options?: AxiosRequestConfig) {
        return StripeApiFp(this.configuration).updateStripeInfo(updateStripeInfoParam, options).then((request) => request(this.axios, this.basePath));
    }
}


