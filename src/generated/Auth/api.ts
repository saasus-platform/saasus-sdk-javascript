/* tslint:disable */
/* eslint-disable */
/**
 * SaaSus Auth API Schema
 * スキーマ
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * アカウント認証設定(account authentication settings) ※ 未提供の機能のため、変更・保存はできません(This function is not yet provided, so it cannot be changed or saved.) 
 * @export
 * @interface AccountVerification
 */
export interface AccountVerification {
    /**
     * code: 検証コード(verification code) link: 検証リンク(verification link) ※ 未提供の機能のため、変更・保存はできません(This function is not yet provided, so it cannot be changed or saved.) 
     * @type {string}
     * @memberof AccountVerification
     */
    'verification_method': AccountVerificationVerificationMethodEnum;
    /**
     * email: Eメール(e-mail) sms: SMS smsOrEmail: SMS不可の場合にEメール(email if SMS is not possible) 
     * @type {string}
     * @memberof AccountVerification
     */
    'sending_to': AccountVerificationSendingToEnum;
}

export const AccountVerificationVerificationMethodEnum = {
    Code: 'code',
    Link: 'link'
} as const;

export type AccountVerificationVerificationMethodEnum = typeof AccountVerificationVerificationMethodEnum[keyof typeof AccountVerificationVerificationMethodEnum];
export const AccountVerificationSendingToEnum = {
    Email: 'email',
    Sms: 'sms',
    SmsOrEmail: 'smsOrEmail'
} as const;

export type AccountVerificationSendingToEnum = typeof AccountVerificationSendingToEnum[keyof typeof AccountVerificationSendingToEnum];

/**
 * 
 * @export
 * @interface ApiKeys
 */
export interface ApiKeys {
    /**
     * APIキー(API Key)
     * @type {Array<string>}
     * @memberof ApiKeys
     */
    'api_keys': Array<string>;
}
/**
 * 
 * @export
 * @interface Attribute
 */
export interface Attribute {
    /**
     * 属性名(attribute name)
     * @type {string}
     * @memberof Attribute
     */
    'attribute_name': string;
    /**
     * 表示名(display name)
     * @type {string}
     * @memberof Attribute
     */
    'display_name': string;
    /**
     * 
     * @type {AttributeType}
     * @memberof Attribute
     */
    'attribute_type': AttributeType;
}
/**
 * 型（dateはYYYY-MM-DDの形式で使用する事ができます。） (Type (date can be set to YYYY-MM-DD format.)) 
 * @export
 * @enum {string}
 */

export const AttributeType = {
    String: 'string',
    Number: 'number',
    Bool: 'bool',
    Date: 'date'
} as const;

export type AttributeType = typeof AttributeType[keyof typeof AttributeType];


/**
 * 
 * @export
 * @interface AuthInfo
 */
export interface AuthInfo {
    /**
     * 認証後遷移先(Redirect After Authentication)
     * @type {string}
     * @memberof AuthInfo
     */
    'callback_url': string;
}
/**
 * 
 * @export
 * @interface AuthorizationTempCode
 */
export interface AuthorizationTempCode {
    /**
     * 
     * @type {string}
     * @memberof AuthorizationTempCode
     */
    'code': string;
}
/**
 * 
 * @export
 * @interface BasicInfo
 */
export interface BasicInfo {
    /**
     * ドメイン名(Domain Name)
     * @type {string}
     * @memberof BasicInfo
     */
    'domain_name': string;
    /**
     * DNSレコードの検証結果(DNS Record Verification Results)
     * @type {boolean}
     * @memberof BasicInfo
     */
    'is_dns_validated': boolean;
    /**
     * 
     * @type {DnsRecord}
     * @memberof BasicInfo
     */
    'certificate_dns_record': DnsRecord;
    /**
     * 
     * @type {DnsRecord}
     * @memberof BasicInfo
     */
    'cloud_front_dns_record': DnsRecord;
    /**
     * DKIM DNS レコード(DKIM DNS Records)
     * @type {Array<DnsRecord>}
     * @memberof BasicInfo
     */
    'dkim_dns_records': Array<DnsRecord>;
    /**
     * デフォルトドメイン名(Default Domain Name)
     * @type {string}
     * @memberof BasicInfo
     */
    'default_domain_name': string;
    /**
     * 認証メールの送信元メールアドレス(Sender Email for Authentication Email)
     * @type {string}
     * @memberof BasicInfo
     */
    'from_email_address': string;
    /**
     * 認証メールの返信元メールアドレス(Reply-from email address of authentication email)
     * @type {string}
     * @memberof BasicInfo
     */
    'reply_email_address': string;
    /**
     * SESのサンドボックス解除及びCognitoのSES設定結果(SES sandbox release and Cognito SES configuration results)
     * @type {boolean}
     * @memberof BasicInfo
     */
    'is_ses_sandbox_granted': boolean;
}
/**
 * 
 * @export
 * @interface BillingAddress
 */
export interface BillingAddress {
    /**
     * 住所の通りの名前や番地を含めた部分  Street address, apartment or suite number. 
     * @type {string}
     * @memberof BillingAddress
     */
    'street': string;
    /**
     * 住所の市区町村  City, district, suburb, town, or village. 
     * @type {string}
     * @memberof BillingAddress
     */
    'city': string;
    /**
     * 住所の都道府県または州  State name or abbreviation. 
     * @type {string}
     * @memberof BillingAddress
     */
    'state': string;
    /**
     * 住所の国を ISO 3166-1 alpha-2 コードで指定します。  Country of the address using ISO 3166-1 alpha-2 code. 
     * @type {string}
     * @memberof BillingAddress
     */
    'country': string;
    /**
     * 建物名・部屋番号などの住所に関する追加情報  Additional information about the address, such as a building name, floor, or department name. 
     * @type {string}
     * @memberof BillingAddress
     */
    'additional_address_info'?: string;
    /**
     * 郵便番号  ZIP or postal code. 
     * @type {string}
     * @memberof BillingAddress
     */
    'postal_code': string;
}
/**
 * 
 * @export
 * @interface BillingInfo
 */
export interface BillingInfo {
    /**
     * 請求用のテナント名  Tenant name for billing 
     * @type {string}
     * @memberof BillingInfo
     */
    'name': string;
    /**
     * 
     * @type {BillingAddress}
     * @memberof BillingInfo
     */
    'address': BillingAddress;
    /**
     * 
     * @type {InvoiceLanguage}
     * @memberof BillingInfo
     */
    'invoice_language': InvoiceLanguage;
}
/**
 * 
 * @export
 * @interface ClientSecret
 */
export interface ClientSecret {
    /**
     * クライアントシークレット(client secret)
     * @type {string}
     * @memberof ClientSecret
     */
    'client_secret': string;
}
/**
 * 
 * @export
 * @interface ConfirmEmailUpdateParam
 */
export interface ConfirmEmailUpdateParam {
    /**
     * 
     * @type {string}
     * @memberof ConfirmEmailUpdateParam
     */
    'code': string;
    /**
     * 
     * @type {string}
     * @memberof ConfirmEmailUpdateParam
     */
    'access_token': string;
}
/**
 * 
 * @export
 * @interface ConfirmExternalUserLinkParam
 */
export interface ConfirmExternalUserLinkParam {
    /**
     * 
     * @type {string}
     * @memberof ConfirmExternalUserLinkParam
     */
    'access_token': string;
    /**
     * 
     * @type {string}
     * @memberof ConfirmExternalUserLinkParam
     */
    'code': string;
}
/**
 * 
 * @export
 * @interface ConfirmSignUpWithAwsMarketplaceParam
 */
export interface ConfirmSignUpWithAwsMarketplaceParam {
    /**
     * テナント名(tenant name)
     * @type {string}
     * @memberof ConfirmSignUpWithAwsMarketplaceParam
     */
    'tenant_name'?: string;
    /**
     * アクセストークン(access token)
     * @type {string}
     * @memberof ConfirmSignUpWithAwsMarketplaceParam
     */
    'access_token': string;
    /**
     * Registration Token
     * @type {string}
     * @memberof ConfirmSignUpWithAwsMarketplaceParam
     */
    'registration_token': string;
}
/**
 * 
 * @export
 * @interface CreateSaasUserParam
 */
export interface CreateSaasUserParam {
    /**
     * メールアドレス(E-mail)
     * @type {string}
     * @memberof CreateSaasUserParam
     */
    'email': string;
    /**
     * パスワード(Password)
     * @type {string}
     * @memberof CreateSaasUserParam
     */
    'password': string;
}
/**
 * 
 * @export
 * @interface CreateSecretCodeParam
 */
export interface CreateSecretCodeParam {
    /**
     * アクセストークン(access token)
     * @type {string}
     * @memberof CreateSecretCodeParam
     */
    'access_token': string;
}
/**
 * 
 * @export
 * @interface CreateTenantInvitationParam
 */
export interface CreateTenantInvitationParam {
    /**
     * 招待するユーザーのメールアドレス(email address of the user to be invited)
     * @type {string}
     * @memberof CreateTenantInvitationParam
     */
    'email': string;
    /**
     * 招待を作成するユーザーのアクセストークン(access token of the user who creates an invitation)
     * @type {string}
     * @memberof CreateTenantInvitationParam
     */
    'access_token': string;
    /**
     * 
     * @type {Array<InvitedUserEnvironmentInformationInner>}
     * @memberof CreateTenantInvitationParam
     */
    'envs': Array<InvitedUserEnvironmentInformationInner>;
}
/**
 * 
 * @export
 * @interface CreateTenantUserParam
 */
export interface CreateTenantUserParam {
    /**
     * メールアドレス(e-mail)
     * @type {string}
     * @memberof CreateTenantUserParam
     */
    'email': string;
    /**
     * 属性情報（SaaS 開発コンソールでユーザー属性定義を行い設定された情報を取得します）  Attribute information (Get information set by defining user attributes in the SaaS development console) 
     * @type {{ [key: string]: any; }}
     * @memberof CreateTenantUserParam
     */
    'attributes': { [key: string]: any; };
}
/**
 * 
 * @export
 * @interface CreateTenantUserRolesParam
 */
export interface CreateTenantUserRolesParam {
    /**
     * 役割(ロール)情報(Role Info)
     * @type {Array<string>}
     * @memberof CreateTenantUserRolesParam
     */
    'role_names': Array<string>;
}
/**
 * 
 * @export
 * @interface Credentials
 */
export interface Credentials {
    /**
     * IDトークン(ID token)
     * @type {string}
     * @memberof Credentials
     */
    'id_token': string;
    /**
     * アクセストークン(access token)
     * @type {string}
     * @memberof Credentials
     */
    'access_token': string;
    /**
     * リフレッシュトークン(refresh token)
     * @type {string}
     * @memberof Credentials
     */
    'refresh_token'?: string;
}
/**
 * 
 * @export
 * @interface CustomizePageProps
 */
export interface CustomizePageProps {
    /**
     * 画面のHTMLを編集できます ※ 未提供の機能のため、変更・保存はできません  Edit page HTML ※ This function is not yet provided, so it cannot be changed or saved. 
     * @type {string}
     * @memberof CustomizePageProps
     */
    'html_contents': string;
    /**
     * 利用規約の同意チェックボックスを表示するが設定されているか(display the terms of use agreement check box)
     * @type {boolean}
     * @memberof CustomizePageProps
     */
    'is_terms_of_service': boolean;
    /**
     * プライバシーポリシーチェックボックスを表示するが設定されているか(show the privacy policy checkbox)
     * @type {boolean}
     * @memberof CustomizePageProps
     */
    'is_privacy_policy': boolean;
}
/**
 * 
 * @export
 * @interface CustomizePageSettings
 */
export interface CustomizePageSettings {
    /**
     * サービスアイコン(service icon)
     * @type {string}
     * @memberof CustomizePageSettings
     */
    'icon': string;
    /**
     * ファビコン(favicon)
     * @type {string}
     * @memberof CustomizePageSettings
     */
    'favicon': string;
    /**
     * サービス名(service name)
     * @type {string}
     * @memberof CustomizePageSettings
     */
    'title': string;
    /**
     * 利用規約URL(terms of service URL)
     * @type {string}
     * @memberof CustomizePageSettings
     */
    'terms_of_service_url': string;
    /**
     * プライバシーポリシーURL(privacy policy URL)
     * @type {string}
     * @memberof CustomizePageSettings
     */
    'privacy_policy_url': string;
    /**
     * Google Tag Manager コンテナ ID(Google Tag Manager container ID)
     * @type {string}
     * @memberof CustomizePageSettings
     */
    'google_tag_manager_container_id': string;
}
/**
 * 
 * @export
 * @interface CustomizePageSettingsAllOf
 */
export interface CustomizePageSettingsAllOf {
    /**
     * サービスアイコン(service icon)
     * @type {string}
     * @memberof CustomizePageSettingsAllOf
     */
    'icon': string;
    /**
     * ファビコン(favicon)
     * @type {string}
     * @memberof CustomizePageSettingsAllOf
     */
    'favicon': string;
}
/**
 * 
 * @export
 * @interface CustomizePageSettingsProps
 */
export interface CustomizePageSettingsProps {
    /**
     * サービス名(service name)
     * @type {string}
     * @memberof CustomizePageSettingsProps
     */
    'title': string;
    /**
     * 利用規約URL(terms of service URL)
     * @type {string}
     * @memberof CustomizePageSettingsProps
     */
    'terms_of_service_url': string;
    /**
     * プライバシーポリシーURL(privacy policy URL)
     * @type {string}
     * @memberof CustomizePageSettingsProps
     */
    'privacy_policy_url': string;
    /**
     * Google Tag Manager コンテナ ID(Google Tag Manager container ID)
     * @type {string}
     * @memberof CustomizePageSettingsProps
     */
    'google_tag_manager_container_id': string;
}
/**
 * 
 * @export
 * @interface CustomizePages
 */
export interface CustomizePages {
    /**
     * 
     * @type {CustomizePageProps}
     * @memberof CustomizePages
     */
    'sign_up_page': CustomizePageProps;
    /**
     * 
     * @type {CustomizePageProps}
     * @memberof CustomizePages
     */
    'sign_in_page': CustomizePageProps;
    /**
     * 
     * @type {CustomizePageProps}
     * @memberof CustomizePages
     */
    'password_reset_page': CustomizePageProps;
}
/**
 * 信頼済みデバイスの記憶の設定(settings for remembering trusted devices) 
 * @export
 * @interface DeviceConfiguration
 */
export interface DeviceConfiguration {
    /**
     * always: 常に記憶する(always remember) userOptIn: ユーザーオプトイン(user opt-in) no: (don\'t save) 
     * @type {string}
     * @memberof DeviceConfiguration
     */
    'device_remembering': DeviceConfigurationDeviceRememberingEnum;
}

export const DeviceConfigurationDeviceRememberingEnum = {
    Always: 'always',
    UserOptIn: 'userOptIn',
    No: 'no'
} as const;

export type DeviceConfigurationDeviceRememberingEnum = typeof DeviceConfigurationDeviceRememberingEnum[keyof typeof DeviceConfigurationDeviceRememberingEnum];

/**
 * 
 * @export
 * @interface DnsRecord
 */
export interface DnsRecord {
    /**
     * CNAMEリソースレコード(CNAME Resource Record)
     * @type {string}
     * @memberof DnsRecord
     */
    'type': DnsRecordTypeEnum;
    /**
     * レコード名(Record Name)
     * @type {string}
     * @memberof DnsRecord
     */
    'name': string;
    /**
     * 値(Value)
     * @type {string}
     * @memberof DnsRecord
     */
    'value': string;
}

export const DnsRecordTypeEnum = {
    Cname: 'CNAME'
} as const;

export type DnsRecordTypeEnum = typeof DnsRecordTypeEnum[keyof typeof DnsRecordTypeEnum];

/**
 * 環境情報(env info)
 * @export
 * @interface Env
 */
export interface Env {
    /**
     * 
     * @type {number}
     * @memberof Env
     */
    'id': number;
    /**
     * 環境名(env name)
     * @type {string}
     * @memberof Env
     */
    'name': string;
    /**
     * 環境表示名(env display name)
     * @type {string}
     * @memberof Env
     */
    'display_name'?: string;
}
/**
 * env一覧(env list)
 * @export
 * @interface Envs
 */
export interface Envs {
    /**
     * 
     * @type {Array<Env>}
     * @memberof Envs
     */
    'envs': Array<Env>;
}
/**
 * 外部IDプロバイダを利用したサインインの設定をするために必要な情報です。(This information is required to set up sign-in using an external identity provider.) 変更はできません。(It cannot be changed.) 
 * @export
 * @interface IdentityProviderConfiguration
 */
export interface IdentityProviderConfiguration {
    /**
     * ドメイン(domain)
     * @type {string}
     * @memberof IdentityProviderConfiguration
     */
    'domain': string;
    /**
     * リダイレクトURL(redirect URL)
     * @type {string}
     * @memberof IdentityProviderConfiguration
     */
    'redirect_url': string;
    /**
     * 識別子(entity ID)
     * @type {string}
     * @memberof IdentityProviderConfiguration
     */
    'entity_id': string;
    /**
     * 応答URL(reply URL)
     * @type {string}
     * @memberof IdentityProviderConfiguration
     */
    'reply_url': string;
}
/**
 * 
 * @export
 * @interface IdentityProviderProps
 */
export interface IdentityProviderProps {
    /**
     * 
     * @type {string}
     * @memberof IdentityProviderProps
     */
    'application_id': string;
    /**
     * 
     * @type {string}
     * @memberof IdentityProviderProps
     */
    'application_secret': string;
    /**
     * 
     * @type {string}
     * @memberof IdentityProviderProps
     */
    'approval_scope': string;
    /**
     * 
     * @type {boolean}
     * @memberof IdentityProviderProps
     */
    'is_button_hidden'?: boolean;
}
/**
 * 
 * @export
 * @interface IdentityProviderSaml
 */
export interface IdentityProviderSaml {
    /**
     * 
     * @type {string}
     * @memberof IdentityProviderSaml
     */
    'metadata_url': string;
    /**
     * 
     * @type {string}
     * @memberof IdentityProviderSaml
     */
    'email_attribute': string;
}
/**
 * 
 * @export
 * @interface IdentityProviders
 */
export interface IdentityProviders {
    /**
     * 
     * @type {IdentityProviderProps}
     * @memberof IdentityProviders
     */
    'google': IdentityProviderProps;
}
/**
 * 
 * @export
 * @interface Invitation
 */
export interface Invitation {
    /**
     * 
     * @type {string}
     * @memberof Invitation
     */
    'id': string;
    /**
     * 招待されたユーザーのメールアドレス(email address of the invited user)
     * @type {string}
     * @memberof Invitation
     */
    'email': string;
    /**
     * 招待URL(invitation URL)
     * @type {string}
     * @memberof Invitation
     */
    'invitation_url': string;
    /**
     * 
     * @type {Array<UserAvailableEnv>}
     * @memberof Invitation
     */
    'envs': Array<UserAvailableEnv>;
    /**
     * 招待の有効期限(expiration date of the invitation)
     * @type {number}
     * @memberof Invitation
     */
    'expired_at': number;
    /**
     * 
     * @type {InvitationStatus}
     * @memberof Invitation
     */
    'status': InvitationStatus;
}
/**
 * 
 * @export
 * @enum {string}
 */

export const InvitationStatus = {
    Pending: 'pending',
    Accepted: 'accepted',
    Expired: 'expired'
} as const;

export type InvitationStatus = typeof InvitationStatus[keyof typeof InvitationStatus];


/**
 * 招待の有効性(invitation validity)
 * @export
 * @interface InvitationValidity
 */
export interface InvitationValidity {
    /**
     * 招待が有効か否か(Whether the validation is valid or not)
     * @type {boolean}
     * @memberof InvitationValidity
     */
    'is_valid': boolean;
}
/**
 * 
 * @export
 * @interface Invitations
 */
export interface Invitations {
    /**
     * 招待一覧(invitation list)
     * @type {Array<Invitation>}
     * @memberof Invitations
     */
    'invitations': Array<Invitation>;
}
/**
 * 
 * @export
 * @interface InvitedUserEnvironmentInformationInner
 */
export interface InvitedUserEnvironmentInformationInner {
    /**
     * 
     * @type {number}
     * @memberof InvitedUserEnvironmentInformationInner
     */
    'id': number;
    /**
     * 役割名(role name)
     * @type {Array<string>}
     * @memberof InvitedUserEnvironmentInformationInner
     */
    'role_names': Array<string>;
}
/**
 * 請求書の言語  Language of invoice 
 * @export
 * @enum {string}
 */

export const InvoiceLanguage = {
    JaJp: 'ja-JP',
    EnUs: 'en-US'
} as const;

export type InvoiceLanguage = typeof InvoiceLanguage[keyof typeof InvoiceLanguage];


/**
 * 
 * @export
 * @interface LinkAwsMarketplaceParam
 */
export interface LinkAwsMarketplaceParam {
    /**
     * テナントID(tenant ID)
     * @type {string}
     * @memberof LinkAwsMarketplaceParam
     */
    'tenant_id': string;
    /**
     * アクセストークン(access token)
     * @type {string}
     * @memberof LinkAwsMarketplaceParam
     */
    'access_token': string;
    /**
     * Registration Token
     * @type {string}
     * @memberof LinkAwsMarketplaceParam
     */
    'registration_token': string;
}
/**
 * 
 * @export
 * @interface MessageTemplate
 */
export interface MessageTemplate {
    /**
     * タイトル(title)
     * @type {string}
     * @memberof MessageTemplate
     */
    'subject': string;
    /**
     * メッセージ(message)
     * @type {string}
     * @memberof MessageTemplate
     */
    'message': string;
}
/**
 * MFAデバイス認証設定(MFA device authentication settings) ※ 未提供の機能のため、変更・保存はできません(This function is not yet provided, so it cannot be changed or saved.) 
 * @export
 * @interface MfaConfiguration
 */
export interface MfaConfiguration {
    /**
     * on: 全ユーザーがログイン時に適用(apply when all users log in) optional: MFA要素が有効になっている個別ユーザーに適用(apply to individual users with MFA factor enabled) ※ パラメータは現在optionalで固定となります。(The parameter is currently optional and fixed.) 
     * @type {string}
     * @memberof MfaConfiguration
     */
    'mfa_configuration': MfaConfigurationMfaConfigurationEnum;
}

export const MfaConfigurationMfaConfigurationEnum = {
    On: 'on',
    Optional: 'optional'
} as const;

export type MfaConfigurationMfaConfigurationEnum = typeof MfaConfigurationMfaConfigurationEnum[keyof typeof MfaConfigurationMfaConfigurationEnum];

/**
 * 
 * @export
 * @interface MfaPreference
 */
export interface MfaPreference {
    /**
     * MFAを有効にするか否か(enable MFA)
     * @type {boolean}
     * @memberof MfaPreference
     */
    'enabled': boolean;
    /**
     * MFAの方法(enabledがtrueの場合は必須)(MFA method (required if enabled is true))
     * @type {string}
     * @memberof MfaPreference
     */
    'method'?: MfaPreferenceMethodEnum;
}

export const MfaPreferenceMethodEnum = {
    SoftwareToken: 'softwareToken'
} as const;

export type MfaPreferenceMethodEnum = typeof MfaPreferenceMethodEnum[keyof typeof MfaPreferenceMethodEnum];

/**
 * 
 * @export
 * @interface ModelError
 */
export interface ModelError {
    /**
     * permission_denied
     * @type {string}
     * @memberof ModelError
     */
    'type': string;
    /**
     * Error message
     * @type {string}
     * @memberof ModelError
     */
    'message': string;
    /**
     * 
     * @type {{ [key: string]: any; }}
     * @memberof ModelError
     */
    'data'?: { [key: string]: any; };
}
/**
 * 
 * @export
 * @interface NotificationMessages
 */
export interface NotificationMessages {
    /**
     * 
     * @type {MessageTemplate}
     * @memberof NotificationMessages
     */
    'sign_up': MessageTemplate;
    /**
     * 
     * @type {MessageTemplate}
     * @memberof NotificationMessages
     */
    'create_user': MessageTemplate;
    /**
     * 
     * @type {MessageTemplate}
     * @memberof NotificationMessages
     */
    'resend_code': MessageTemplate;
    /**
     * 
     * @type {MessageTemplate}
     * @memberof NotificationMessages
     */
    'forgot_password': MessageTemplate;
    /**
     * 
     * @type {MessageTemplate}
     * @memberof NotificationMessages
     */
    'update_user_attribute': MessageTemplate;
    /**
     * 
     * @type {MessageTemplate}
     * @memberof NotificationMessages
     */
    'verify_user_attribute': MessageTemplate;
    /**
     * 
     * @type {MessageTemplate}
     * @memberof NotificationMessages
     */
    'authentication_mfa': MessageTemplate;
    /**
     * 
     * @type {MessageTemplate}
     * @memberof NotificationMessages
     */
    'invite_tenant_user': MessageTemplate;
    /**
     * 
     * @type {MessageTemplate}
     * @memberof NotificationMessages
     */
    'verify_external_user': MessageTemplate;
}
/**
 * パスワードポリシー(password policy)
 * @export
 * @interface PasswordPolicy
 */
export interface PasswordPolicy {
    /**
     * 最小文字数(minimum number of characters)
     * @type {number}
     * @memberof PasswordPolicy
     */
    'minimum_length': number;
    /**
     * 一文字以上の小文字を含むが設定されているか(contains one or more lowercase characters)
     * @type {boolean}
     * @memberof PasswordPolicy
     */
    'is_require_lowercase': boolean;
    /**
     * 一文字以上の数字を含むが設定されているか(contains one or more numeric characters)
     * @type {boolean}
     * @memberof PasswordPolicy
     */
    'is_require_numbers': boolean;
    /**
     * 一文字以上の特殊文字を含むが設定されているか(contains one or more special characters)
     * @type {boolean}
     * @memberof PasswordPolicy
     */
    'is_require_symbols': boolean;
    /**
     * 一文字以上の大文字を含むが設定されているか(contains one or more uppercase letters)
     * @type {boolean}
     * @memberof PasswordPolicy
     */
    'is_require_uppercase': boolean;
    /**
     * 仮パスワードの有効期限(temporary password expiration date)
     * @type {number}
     * @memberof PasswordPolicy
     */
    'temporary_password_validity_days': number;
}
/**
 * 
 * @export
 * @interface PlanHistories
 */
export interface PlanHistories {
    /**
     * 料金プラン履歴
     * @type {Array<PlanHistory>}
     * @memberof PlanHistories
     */
    'plan_histories': Array<PlanHistory>;
}
/**
 * 
 * @export
 * @interface PlanHistory
 */
export interface PlanHistory {
    /**
     * 
     * @type {string}
     * @memberof PlanHistory
     */
    'plan_id': string;
    /**
     * 登録日時
     * @type {number}
     * @memberof PlanHistory
     */
    'plan_applied_at': number;
    /**
     * 
     * @type {string}
     * @memberof PlanHistory
     */
    'tax_rate_id'?: string;
    /**
     * 
     * @type {ProrationBehavior}
     * @memberof PlanHistory
     */
    'proration_behavior'?: ProrationBehavior;
    /**
     * stripe連携している場合で、プラン変更時に従量課金アイテムを削除するか設定できます。 プラン変更した場合に、現在のサブスクリプションに含まれる従量課金アイテムを全て削除して、従量課金アイテムに基づく請求の発生を止めることができます。 即時に記録している使用量がクリアされます。それらは復元できないため、delete_usageをtrueにしたプラン変更予約は取り消しできません。  If you have a stripe linkage,  you can set whether to delete pay-as-you-go items when changing plans. When you change plan, you can remove all pay-as-you-go items included in your current subscription to stop being billed based on pay-as-you-go items. The recorded usage is cleared immediately. Since it cannot be restored, please note that plan change reservations with delete_usage set to true cannot be canceled. 
     * @type {boolean}
     * @memberof PlanHistory
     */
    'delete_usage'?: boolean;
}
/**
 * 
 * @export
 * @interface PlanReservation
 */
export interface PlanReservation {
    /**
     * 
     * @type {string}
     * @memberof PlanReservation
     */
    'next_plan_id'?: string;
    /**
     * 次回料金プラン開始日時（stripe連携時、当月月初の0時（UTC）を指定すると当月月初開始のサブスクリプションを作成できます。ex. 2023年1月の場合は、1672531200 ） (Next billing plan start time (When using stripe, you can create a subscription that starts at the beginning of the current month by specifying 00:00 (UTC) at the beginning of the current month. Ex. 1672531200 for January 2023.)) 
     * @type {number}
     * @memberof PlanReservation
     */
    'using_next_plan_from'?: number;
    /**
     * 
     * @type {string}
     * @memberof PlanReservation
     */
    'next_plan_tax_rate_id'?: string;
    /**
     * 
     * @type {ProrationBehavior}
     * @memberof PlanReservation
     */
    'proration_behavior'?: ProrationBehavior;
    /**
     * stripe連携している場合で、プラン変更時に従量課金アイテムを削除するか設定できます。 プラン変更した場合に、現在のサブスクリプションに含まれる従量課金アイテムを全て削除して、従量課金アイテムに基づく請求の発生を止めることができます。 即時に記録している使用量がクリアされます。それらは復元できないため、delete_usageをtrueにしたプラン変更予約は取り消しできません。  If you have a stripe linkage,  you can set whether to delete pay-as-you-go items when changing plans. When you change plan, you can remove all pay-as-you-go items included in your current subscription to stop being billed based on pay-as-you-go items. The recorded usage is cleared immediately. Since it cannot be restored, please note that plan change reservations with delete_usage set to true cannot be canceled. 
     * @type {boolean}
     * @memberof PlanReservation
     */
    'delete_usage'?: boolean;
}
/**
 * stripe連携している場合で、プラン変更時の比例配分の挙動を設定できます。 プラン変更した場合に、請求金額を日割り計算し次回請求書に反映させるか、日割り計算した請求を即時に発行する、日割り計算をしないを設定できます。  If you have a strine linkage, you can set the behavior of the proportional allocation when changing plans. When a plan is changed, you can set whether to prorate the billing amount and reflect it on the next invoice, to issue a prorated invoice immediately, or not to prorate at all. 
 * @export
 * @enum {string}
 */

export const ProrationBehavior = {
    CreateProrations: 'create_prorations',
    None: 'none',
    AlwaysInvoice: 'always_invoice'
} as const;

export type ProrationBehavior = typeof ProrationBehavior[keyof typeof ProrationBehavior];


/**
 * 
 * @export
 * @enum {string}
 */

export const ProviderName = {
    Google: 'Google'
} as const;

export type ProviderName = typeof ProviderName[keyof typeof ProviderName];


/**
 * 
 * @export
 * @enum {string}
 */

export const ProviderType = {
    Saml: 'SAML'
} as const;

export type ProviderType = typeof ProviderType[keyof typeof ProviderType];


/**
 * reCAPTCHA認証設定(reCAPTCHA authentication settings) ※ 未提供の機能のため、変更・保存はできません(This function is not yet provided, so it cannot be changed or saved.) 
 * @export
 * @interface RecaptchaProps
 */
export interface RecaptchaProps {
    /**
     * サイトキー(site key)
     * @type {string}
     * @memberof RecaptchaProps
     */
    'site_key': string;
    /**
     * シークレットキー(secret key)
     * @type {string}
     * @memberof RecaptchaProps
     */
    'secret_key': string;
}
/**
 * 
 * @export
 * @interface RequestEmailUpdateParam
 */
export interface RequestEmailUpdateParam {
    /**
     * メールアドレス(Email Address)
     * @type {string}
     * @memberof RequestEmailUpdateParam
     */
    'email': string;
    /**
     * 
     * @type {string}
     * @memberof RequestEmailUpdateParam
     */
    'access_token': string;
}
/**
 * 
 * @export
 * @interface RequestExternalUserLinkParam
 */
export interface RequestExternalUserLinkParam {
    /**
     * 
     * @type {string}
     * @memberof RequestExternalUserLinkParam
     */
    'access_token': string;
}
/**
 * 
 * @export
 * @interface ResendSignUpConfirmationEmailParam
 */
export interface ResendSignUpConfirmationEmailParam {
    /**
     * メールアドレス(Email Address)
     * @type {string}
     * @memberof ResendSignUpConfirmationEmailParam
     */
    'email': string;
}
/**
 * 役割(ロール)情報(role info)
 * @export
 * @interface Role
 */
export interface Role {
    /**
     * 役割(ロール)名(role name)
     * @type {string}
     * @memberof Role
     */
    'role_name': string;
    /**
     * 役割(ロール)表示名(role display name)
     * @type {string}
     * @memberof Role
     */
    'display_name': string;
}
/**
 * 
 * @export
 * @interface Roles
 */
export interface Roles {
    /**
     * 
     * @type {Array<Role>}
     * @memberof Roles
     */
    'roles': Array<Role>;
}
/**
 * 
 * @export
 * @interface SaasId
 */
export interface SaasId {
    /**
     * 
     * @type {string}
     * @memberof SaasId
     */
    'tenant_id': string;
    /**
     * 
     * @type {number}
     * @memberof SaasId
     */
    'env_id': number;
    /**
     * saas id
     * @type {string}
     * @memberof SaasId
     */
    'saas_id': string;
}
/**
 * 
 * @export
 * @interface SaasUser
 */
export interface SaasUser {
    /**
     * 
     * @type {string}
     * @memberof SaasUser
     */
    'id': string;
    /**
     * メールアドレス(E-mail)
     * @type {string}
     * @memberof SaasUser
     */
    'email': string;
}
/**
 * 
 * @export
 * @interface SaasUsers
 */
export interface SaasUsers {
    /**
     * 
     * @type {Array<SaasUser>}
     * @memberof SaasUsers
     */
    'users': Array<SaasUser>;
}
/**
 * セルフサインアップを許可設定(self sign-up permission)
 * @export
 * @interface SelfRegist
 */
export interface SelfRegist {
    /**
     * 
     * @type {boolean}
     * @memberof SelfRegist
     */
    'enable': boolean;
}
/**
 * 
 * @export
 * @interface SignInSettings
 */
export interface SignInSettings {
    /**
     * 
     * @type {PasswordPolicy}
     * @memberof SignInSettings
     */
    'password_policy': PasswordPolicy;
    /**
     * 
     * @type {DeviceConfiguration}
     * @memberof SignInSettings
     */
    'device_configuration': DeviceConfiguration;
    /**
     * 
     * @type {MfaConfiguration}
     * @memberof SignInSettings
     */
    'mfa_configuration': MfaConfiguration;
    /**
     * 
     * @type {RecaptchaProps}
     * @memberof SignInSettings
     */
    'recaptcha_props': RecaptchaProps;
    /**
     * 
     * @type {AccountVerification}
     * @memberof SignInSettings
     */
    'account_verification': AccountVerification;
    /**
     * 
     * @type {SelfRegist}
     * @memberof SignInSettings
     */
    'self_regist': SelfRegist;
    /**
     * 
     * @type {IdentityProviderConfiguration}
     * @memberof SignInSettings
     */
    'identity_provider_configuration': IdentityProviderConfiguration;
}
/**
 * 
 * @export
 * @interface SignUpParam
 */
export interface SignUpParam {
    /**
     * メールアドレス(Email Address)
     * @type {string}
     * @memberof SignUpParam
     */
    'email': string;
}
/**
 * 
 * @export
 * @interface SignUpWithAwsMarketplaceParam
 */
export interface SignUpWithAwsMarketplaceParam {
    /**
     * メールアドレス(Email Address)
     * @type {string}
     * @memberof SignUpWithAwsMarketplaceParam
     */
    'email': string;
    /**
     * Registration Token
     * @type {string}
     * @memberof SignUpWithAwsMarketplaceParam
     */
    'registration_token': string;
}
/**
 * 
 * @export
 * @interface SoftwareTokenSecretCode
 */
export interface SoftwareTokenSecretCode {
    /**
     * シークレットコード(secret code)
     * @type {string}
     * @memberof SoftwareTokenSecretCode
     */
    'secret_code': string;
}
/**
 * 
 * @export
 * @interface Tenant
 */
export interface Tenant {
    /**
     * 
     * @type {string}
     * @memberof Tenant
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof Tenant
     */
    'plan_id'?: string;
    /**
     * 
     * @type {BillingInfo}
     * @memberof Tenant
     */
    'billing_info'?: BillingInfo;
    /**
     * テナント名(tenant name)
     * @type {string}
     * @memberof Tenant
     */
    'name': string;
    /**
     * 属性情報(attribute info)
     * @type {{ [key: string]: any; }}
     * @memberof Tenant
     */
    'attributes': { [key: string]: any; };
    /**
     * 事務管理部門スタッフメールアドレス(administrative staff email address)
     * @type {string}
     * @memberof Tenant
     */
    'back_office_staff_email': string;
    /**
     * 
     * @type {string}
     * @memberof Tenant
     */
    'next_plan_id'?: string;
    /**
     * 次回料金プラン開始日時（stripe連携時、当月月初の0時（UTC）を指定すると当月月初開始のサブスクリプションを作成できます。ex. 2023年1月の場合は、1672531200 ） (Next billing plan start time (When using stripe, you can create a subscription that starts at the beginning of the current month by specifying 00:00 (UTC) at the beginning of the current month. Ex. 1672531200 for January 2023.)) 
     * @type {number}
     * @memberof Tenant
     */
    'using_next_plan_from'?: number;
    /**
     * 
     * @type {string}
     * @memberof Tenant
     */
    'next_plan_tax_rate_id'?: string;
    /**
     * 
     * @type {ProrationBehavior}
     * @memberof Tenant
     */
    'proration_behavior'?: ProrationBehavior;
    /**
     * stripe連携している場合で、プラン変更時に従量課金アイテムを削除するか設定できます。 プラン変更した場合に、現在のサブスクリプションに含まれる従量課金アイテムを全て削除して、従量課金アイテムに基づく請求の発生を止めることができます。 即時に記録している使用量がクリアされます。それらは復元できないため、delete_usageをtrueにしたプラン変更予約は取り消しできません。  If you have a stripe linkage,  you can set whether to delete pay-as-you-go items when changing plans. When you change plan, you can remove all pay-as-you-go items included in your current subscription to stop being billed based on pay-as-you-go items. The recorded usage is cleared immediately. Since it cannot be restored, please note that plan change reservations with delete_usage set to true cannot be canceled. 
     * @type {boolean}
     * @memberof Tenant
     */
    'delete_usage'?: boolean;
    /**
     * 料金プラン履歴
     * @type {Array<PlanHistory>}
     * @memberof Tenant
     */
    'plan_histories': Array<PlanHistory>;
}
/**
 * 
 * @export
 * @interface TenantAllOf
 */
export interface TenantAllOf {
    /**
     * 
     * @type {string}
     * @memberof TenantAllOf
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof TenantAllOf
     */
    'plan_id'?: string;
    /**
     * 
     * @type {BillingInfo}
     * @memberof TenantAllOf
     */
    'billing_info'?: BillingInfo;
}
/**
 * 
 * @export
 * @interface TenantAttributes
 */
export interface TenantAttributes {
    /**
     * テナント属性定義(Tenant Attribute Definition)
     * @type {Array<Attribute>}
     * @memberof TenantAttributes
     */
    'tenant_attributes': Array<Attribute>;
}
/**
 * 
 * @export
 * @interface TenantDetail
 */
export interface TenantDetail {
    /**
     * 現在のプランの開始日時(current plan period start)
     * @type {number}
     * @memberof TenantDetail
     */
    'current_plan_period_start'?: number;
    /**
     * 現在のプランの終了日時(current plan period end)
     * @type {number}
     * @memberof TenantDetail
     */
    'current_plan_period_end'?: number;
    /**
     * 
     * @type {string}
     * @memberof TenantDetail
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof TenantDetail
     */
    'plan_id'?: string;
    /**
     * 
     * @type {BillingInfo}
     * @memberof TenantDetail
     */
    'billing_info'?: BillingInfo;
    /**
     * テナント名(tenant name)
     * @type {string}
     * @memberof TenantDetail
     */
    'name': string;
    /**
     * 属性情報(attribute info)
     * @type {{ [key: string]: any; }}
     * @memberof TenantDetail
     */
    'attributes': { [key: string]: any; };
    /**
     * 事務管理部門スタッフメールアドレス(administrative staff email address)
     * @type {string}
     * @memberof TenantDetail
     */
    'back_office_staff_email': string;
    /**
     * 
     * @type {string}
     * @memberof TenantDetail
     */
    'next_plan_id'?: string;
    /**
     * 次回料金プラン開始日時（stripe連携時、当月月初の0時（UTC）を指定すると当月月初開始のサブスクリプションを作成できます。ex. 2023年1月の場合は、1672531200 ） (Next billing plan start time (When using stripe, you can create a subscription that starts at the beginning of the current month by specifying 00:00 (UTC) at the beginning of the current month. Ex. 1672531200 for January 2023.)) 
     * @type {number}
     * @memberof TenantDetail
     */
    'using_next_plan_from'?: number;
    /**
     * 
     * @type {string}
     * @memberof TenantDetail
     */
    'next_plan_tax_rate_id'?: string;
    /**
     * 
     * @type {ProrationBehavior}
     * @memberof TenantDetail
     */
    'proration_behavior'?: ProrationBehavior;
    /**
     * stripe連携している場合で、プラン変更時に従量課金アイテムを削除するか設定できます。 プラン変更した場合に、現在のサブスクリプションに含まれる従量課金アイテムを全て削除して、従量課金アイテムに基づく請求の発生を止めることができます。 即時に記録している使用量がクリアされます。それらは復元できないため、delete_usageをtrueにしたプラン変更予約は取り消しできません。  If you have a stripe linkage,  you can set whether to delete pay-as-you-go items when changing plans. When you change plan, you can remove all pay-as-you-go items included in your current subscription to stop being billed based on pay-as-you-go items. The recorded usage is cleared immediately. Since it cannot be restored, please note that plan change reservations with delete_usage set to true cannot be canceled. 
     * @type {boolean}
     * @memberof TenantDetail
     */
    'delete_usage'?: boolean;
    /**
     * 料金プラン履歴
     * @type {Array<PlanHistory>}
     * @memberof TenantDetail
     */
    'plan_histories': Array<PlanHistory>;
}
/**
 * 
 * @export
 * @interface TenantDetailAllOf
 */
export interface TenantDetailAllOf {
    /**
     * 現在のプランの開始日時(current plan period start)
     * @type {number}
     * @memberof TenantDetailAllOf
     */
    'current_plan_period_start'?: number;
    /**
     * 現在のプランの終了日時(current plan period end)
     * @type {number}
     * @memberof TenantDetailAllOf
     */
    'current_plan_period_end'?: number;
}
/**
 * @type TenantIdentityProviderProps
 * @export
 */
export type TenantIdentityProviderProps = IdentityProviderSaml;

/**
 * 
 * @export
 * @interface TenantIdentityProviders
 */
export interface TenantIdentityProviders {
    /**
     * 
     * @type {TenantIdentityProvidersSaml}
     * @memberof TenantIdentityProviders
     */
    'saml'?: TenantIdentityProvidersSaml;
}
/**
 * 
 * @export
 * @interface TenantIdentityProvidersSaml
 */
export interface TenantIdentityProvidersSaml {
    /**
     * 
     * @type {string}
     * @memberof TenantIdentityProvidersSaml
     */
    'sign_in_url': string;
    /**
     * 
     * @type {string}
     * @memberof TenantIdentityProvidersSaml
     */
    'metadata_url': string;
    /**
     * 
     * @type {string}
     * @memberof TenantIdentityProvidersSaml
     */
    'email_attribute': string;
}
/**
 * 
 * @export
 * @interface TenantIdentityProvidersSamlAllOf
 */
export interface TenantIdentityProvidersSamlAllOf {
    /**
     * 
     * @type {string}
     * @memberof TenantIdentityProvidersSamlAllOf
     */
    'sign_in_url': string;
}
/**
 * 
 * @export
 * @interface TenantProps
 */
export interface TenantProps {
    /**
     * テナント名(tenant name)
     * @type {string}
     * @memberof TenantProps
     */
    'name': string;
    /**
     * 属性情報(attribute info)
     * @type {{ [key: string]: any; }}
     * @memberof TenantProps
     */
    'attributes': { [key: string]: any; };
    /**
     * 事務管理部門スタッフメールアドレス(administrative staff email address)
     * @type {string}
     * @memberof TenantProps
     */
    'back_office_staff_email': string;
}
/**
 * テナント情報(Tenant Info)
 * @export
 * @interface Tenants
 */
export interface Tenants {
    /**
     * 
     * @type {Array<Tenant>}
     * @memberof Tenants
     */
    'tenants': Array<Tenant>;
}
/**
 * 
 * @export
 * @interface UpdateBasicInfoParam
 */
export interface UpdateBasicInfoParam {
    /**
     * ドメイン名(Domain Name)
     * @type {string}
     * @memberof UpdateBasicInfoParam
     */
    'domain_name': string;
    /**
     * 認証メールの送信元メールアドレス(Sender email of authentication email)
     * @type {string}
     * @memberof UpdateBasicInfoParam
     */
    'from_email_address': string;
    /**
     * 認証メールの返信元メールアドレス(Reply-from email address of authentication email)
     * @type {string}
     * @memberof UpdateBasicInfoParam
     */
    'reply_email_address'?: string;
}
/**
 * 
 * @export
 * @interface UpdateCustomizePageSettingsParam
 */
export interface UpdateCustomizePageSettingsParam {
    /**
     * サービスアイコン(service icon)
     * @type {string}
     * @memberof UpdateCustomizePageSettingsParam
     */
    'icon': string;
    /**
     * ファビコン(favicon)
     * @type {string}
     * @memberof UpdateCustomizePageSettingsParam
     */
    'favicon': string;
    /**
     * サービス名(service name)
     * @type {string}
     * @memberof UpdateCustomizePageSettingsParam
     */
    'title': string;
    /**
     * 利用規約URL(terms of service URL)
     * @type {string}
     * @memberof UpdateCustomizePageSettingsParam
     */
    'terms_of_service_url': string;
    /**
     * プライバシーポリシーURL(privacy policy URL)
     * @type {string}
     * @memberof UpdateCustomizePageSettingsParam
     */
    'privacy_policy_url': string;
    /**
     * Google Tag Manager コンテナ ID(Google Tag Manager container ID)
     * @type {string}
     * @memberof UpdateCustomizePageSettingsParam
     */
    'google_tag_manager_container_id': string;
}
/**
 * 
 * @export
 * @interface UpdateCustomizePageSettingsParamAllOf
 */
export interface UpdateCustomizePageSettingsParamAllOf {
    /**
     * サービスアイコン(service icon)
     * @type {string}
     * @memberof UpdateCustomizePageSettingsParamAllOf
     */
    'icon': string;
    /**
     * ファビコン(favicon)
     * @type {string}
     * @memberof UpdateCustomizePageSettingsParamAllOf
     */
    'favicon': string;
}
/**
 * 
 * @export
 * @interface UpdateCustomizePagesParam
 */
export interface UpdateCustomizePagesParam {
    /**
     * 
     * @type {CustomizePageProps}
     * @memberof UpdateCustomizePagesParam
     */
    'sign_up_page'?: CustomizePageProps;
    /**
     * 
     * @type {CustomizePageProps}
     * @memberof UpdateCustomizePagesParam
     */
    'sign_in_page'?: CustomizePageProps;
    /**
     * 
     * @type {CustomizePageProps}
     * @memberof UpdateCustomizePagesParam
     */
    'password_reset_page'?: CustomizePageProps;
}
/**
 * 
 * @export
 * @interface UpdateEnvParam
 */
export interface UpdateEnvParam {
    /**
     * 環境名(env name)
     * @type {string}
     * @memberof UpdateEnvParam
     */
    'name': string;
    /**
     * 環境表示名(env display name)
     * @type {string}
     * @memberof UpdateEnvParam
     */
    'display_name'?: string;
}
/**
 * 
 * @export
 * @interface UpdateIdentityProviderParam
 */
export interface UpdateIdentityProviderParam {
    /**
     * 
     * @type {ProviderName}
     * @memberof UpdateIdentityProviderParam
     */
    'provider': ProviderName;
    /**
     * 
     * @type {IdentityProviderProps}
     * @memberof UpdateIdentityProviderParam
     */
    'identity_provider_props'?: IdentityProviderProps;
}
/**
 * 
 * @export
 * @interface UpdateNotificationMessagesParam
 */
export interface UpdateNotificationMessagesParam {
    /**
     * 
     * @type {MessageTemplate}
     * @memberof UpdateNotificationMessagesParam
     */
    'sign_up'?: MessageTemplate;
    /**
     * 
     * @type {MessageTemplate}
     * @memberof UpdateNotificationMessagesParam
     */
    'create_user'?: MessageTemplate;
    /**
     * 
     * @type {MessageTemplate}
     * @memberof UpdateNotificationMessagesParam
     */
    'resend_code'?: MessageTemplate;
    /**
     * 
     * @type {MessageTemplate}
     * @memberof UpdateNotificationMessagesParam
     */
    'forgot_password'?: MessageTemplate;
    /**
     * 
     * @type {MessageTemplate}
     * @memberof UpdateNotificationMessagesParam
     */
    'update_user_attribute'?: MessageTemplate;
    /**
     * 
     * @type {MessageTemplate}
     * @memberof UpdateNotificationMessagesParam
     */
    'verify_user_attribute'?: MessageTemplate;
    /**
     * 
     * @type {MessageTemplate}
     * @memberof UpdateNotificationMessagesParam
     */
    'authentication_mfa'?: MessageTemplate;
    /**
     * 
     * @type {MessageTemplate}
     * @memberof UpdateNotificationMessagesParam
     */
    'invite_tenant_user'?: MessageTemplate;
    /**
     * 
     * @type {MessageTemplate}
     * @memberof UpdateNotificationMessagesParam
     */
    'verify_external_user'?: MessageTemplate;
}
/**
 * 
 * @export
 * @interface UpdateSaasUserEmailParam
 */
export interface UpdateSaasUserEmailParam {
    /**
     * メールアドレス(e-mail)
     * @type {string}
     * @memberof UpdateSaasUserEmailParam
     */
    'email': string;
}
/**
 * 
 * @export
 * @interface UpdateSaasUserPasswordParam
 */
export interface UpdateSaasUserPasswordParam {
    /**
     * パスワード(password)
     * @type {string}
     * @memberof UpdateSaasUserPasswordParam
     */
    'password': string;
}
/**
 * 
 * @export
 * @interface UpdateSignInSettingsParam
 */
export interface UpdateSignInSettingsParam {
    /**
     * 
     * @type {PasswordPolicy}
     * @memberof UpdateSignInSettingsParam
     */
    'password_policy'?: PasswordPolicy;
    /**
     * 
     * @type {DeviceConfiguration}
     * @memberof UpdateSignInSettingsParam
     */
    'device_configuration'?: DeviceConfiguration;
    /**
     * 
     * @type {MfaConfiguration}
     * @memberof UpdateSignInSettingsParam
     */
    'mfa_configuration'?: MfaConfiguration;
    /**
     * 
     * @type {RecaptchaProps}
     * @memberof UpdateSignInSettingsParam
     */
    'recaptcha_props'?: RecaptchaProps;
    /**
     * 
     * @type {AccountVerification}
     * @memberof UpdateSignInSettingsParam
     */
    'account_verification'?: AccountVerification;
    /**
     * 
     * @type {SelfRegist}
     * @memberof UpdateSignInSettingsParam
     */
    'self_regist'?: SelfRegist;
}
/**
 * 
 * @export
 * @interface UpdateSoftwareTokenParam
 */
export interface UpdateSoftwareTokenParam {
    /**
     * アクセストークン(access token)
     * @type {string}
     * @memberof UpdateSoftwareTokenParam
     */
    'access_token': string;
    /**
     * 検証コード(verification code)
     * @type {string}
     * @memberof UpdateSoftwareTokenParam
     */
    'verification_code': string;
}
/**
 * identity_provider_propsがnullの場合は、provider_typeで指定された外部IDプロバイダのサインイン情報を無効化します。  If identity_provider_props is null, the sign-in information for the external identity provider specified in provider_type is disabled. 
 * @export
 * @interface UpdateTenantIdentityProviderParam
 */
export interface UpdateTenantIdentityProviderParam {
    /**
     * 
     * @type {ProviderType}
     * @memberof UpdateTenantIdentityProviderParam
     */
    'provider_type': ProviderType;
    /**
     * 
     * @type {TenantIdentityProviderProps}
     * @memberof UpdateTenantIdentityProviderParam
     */
    'identity_provider_props'?: TenantIdentityProviderProps;
}
/**
 * 
 * @export
 * @interface UpdateTenantUserParam
 */
export interface UpdateTenantUserParam {
    /**
     * 属性情報（SaaS 開発コンソールでユーザー属性定義を行い設定された情報を取得します）  Attribute information (Get information set by defining user attributes in the SaaS development console) 
     * @type {{ [key: string]: any; }}
     * @memberof UpdateTenantUserParam
     */
    'attributes': { [key: string]: any; };
}
/**
 * 
 * @export
 * @interface User
 */
export interface User {
    /**
     * ユーザーID(User ID)
     * @type {string}
     * @memberof User
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    'tenant_id': string;
    /**
     * テナント名(Tenant Name)
     * @type {string}
     * @memberof User
     */
    'tenant_name': string;
    /**
     * メールアドレス(E-mail)
     * @type {string}
     * @memberof User
     */
    'email': string;
    /**
     * 属性情報（SaaS 開発コンソールでユーザー属性定義を行い設定された情報を取得します）  Attribute information (Get information set by defining user attributes in the SaaS development console) 
     * @type {{ [key: string]: any; }}
     * @memberof User
     */
    'attributes': { [key: string]: any; };
    /**
     * 
     * @type {Array<UserAvailableEnv>}
     * @memberof User
     */
    'envs': Array<UserAvailableEnv>;
}
/**
 * 
 * @export
 * @interface UserAttributes
 */
export interface UserAttributes {
    /**
     * ユーザー属性定義(User attribute definition)
     * @type {Array<Attribute>}
     * @memberof UserAttributes
     */
    'user_attributes': Array<Attribute>;
}
/**
 * 
 * @export
 * @interface UserAvailableEnv
 */
export interface UserAvailableEnv {
    /**
     * 
     * @type {number}
     * @memberof UserAvailableEnv
     */
    'id': number;
    /**
     * 環境名(env name)
     * @type {string}
     * @memberof UserAvailableEnv
     */
    'name': string;
    /**
     * 環境表示名(env display name)
     * @type {string}
     * @memberof UserAvailableEnv
     */
    'display_name'?: string;
    /**
     * 役割(ロール)情報(role info)
     * @type {Array<Role>}
     * @memberof UserAvailableEnv
     */
    'roles': Array<Role>;
}
/**
 * 
 * @export
 * @interface UserAvailableTenant
 */
export interface UserAvailableTenant {
    /**
     * 
     * @type {string}
     * @memberof UserAvailableTenant
     */
    'id': string;
    /**
     * テナント名(tenant name)
     * @type {string}
     * @memberof UserAvailableTenant
     */
    'name': string;
    /**
     * 
     * @type {boolean}
     * @memberof UserAvailableTenant
     */
    'completed_sign_up': boolean;
    /**
     * 環境情報、役割(ロール)情報(environmental info, role info)
     * @type {Array<UserAvailableEnv>}
     * @memberof UserAvailableTenant
     */
    'envs': Array<UserAvailableEnv>;
    /**
     * ユーザー追加属性(user additional attributes)
     * @type {{ [key: string]: any; }}
     * @memberof UserAvailableTenant
     */
    'user_attribute': { [key: string]: any; };
    /**
     * バックオフィス担当者のメール(back office contact email)
     * @type {string}
     * @memberof UserAvailableTenant
     */
    'back_office_staff_email': string;
    /**
     * 
     * @type {string}
     * @memberof UserAvailableTenant
     */
    'plan_id'?: string;
    /**
     * テナントの支払い状況(tenant payment status)  ※ 現在はストライプ連携時のみ返却されます。Currently, it is returned only when stripe is linked. 
     * @type {boolean}
     * @memberof UserAvailableTenant
     */
    'is_paid'?: boolean;
}
/**
 * 
 * @export
 * @interface UserInfo
 */
export interface UserInfo {
    /**
     * 
     * @type {string}
     * @memberof UserInfo
     */
    'id': string;
    /**
     * メールアドレス(E-mail)
     * @type {string}
     * @memberof UserInfo
     */
    'email': string;
    /**
     * テナント情報(Tenant Info)
     * @type {Array<UserAvailableTenant>}
     * @memberof UserInfo
     */
    'tenants': Array<UserAvailableTenant>;
}
/**
 * 
 * @export
 * @interface Users
 */
export interface Users {
    /**
     * 
     * @type {Array<User>}
     * @memberof Users
     */
    'users': Array<User>;
}
/**
 * 既存ユーザーの場合はアクセストークン、新規ユーザーの場合はメールアドレスとパスワードが必須です。  Access token is required for existing users, and email and password is required for new users. 
 * @export
 * @interface ValidateInvitationParam
 */
export interface ValidateInvitationParam {
    /**
     * 招待されたユーザーのアクセストークン(access token of the invited user)
     * @type {string}
     * @memberof ValidateInvitationParam
     */
    'access_token'?: string;
    /**
     * 招待されたユーザーのメールアドレス(email address of the invited user)
     * @type {string}
     * @memberof ValidateInvitationParam
     */
    'email'?: string;
    /**
     * 招待されたユーザーのパスワード(password of the invited user)
     * @type {string}
     * @memberof ValidateInvitationParam
     */
    'password'?: string;
}

/**
 * AuthInfoApi - axios parameter creator
 * @export
 */
export const AuthInfoApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * ログイン後に認証情報を渡す SaaS の URL を取得します。 ここで取得した URL へ認証情報を渡し、SaaSus SDK を利用してこの Callback の実装をすることが可能となります。  Get the post-login SaaS URL that contains authentication information. You can pass authentication information to the URL obtained here and implement this Callback using the SaaSus SDK. 
         * @summary 認証情報を取得(Get Authentication Info)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAuthInfo: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/auth-info`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * cognitoに設定している外部プロバイダ経由のサインイン情報取得  Get sign-in information via external provider set in cognito 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getIdentityProviders: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/identity-providers`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ユーザーパスワードの要件設定を取得します。 アルファベット、数字、記号の組み合わせで、桁数を長くすれば解読されづらい安全なパスワードを設定することが可能となります。  Get user password requirements. Set a secure password that is difficult to decipher by increasing the number of digits by combining alphabets, numbers, and symbols. 
         * @summary パスワード要件を取得(Get Password Requirements)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSignInSettings: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/sign-in-settings`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ログイン後に認証情報を渡す SaaS の URL を登録します。 ここで登録した URL に認証情報を渡し、SaaSus SDK を利用してこの Callback の実装をすることが可能となります。  Register post-login SaaS URL for authentication information. It is possible to pass authentication information to the URL registered here and implement this Callback using the SaaSus SDK. 
         * @summary 認証情報を更新(Update Authentication Info)
         * @param {AuthInfo} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateAuthInfo: async (body?: AuthInfo, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/auth-info`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 外部IDプロバイダのサインイン情報更新
         * @param {UpdateIdentityProviderParam} [updateIdentityProviderParam] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateIdentityProvider: async (updateIdentityProviderParam?: UpdateIdentityProviderParam, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/identity-providers`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateIdentityProviderParam, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ユーザーパスワードの要件設定を更新します。 アルファベット、数字、記号の組み合わせで、桁数を長くすれば解読されづらい安全なパスワードを設定することが可能となります。  Update user password requirements. Set a secure password that is difficult to decipher by increasing the number of digits by combining alphabets, numbers, and symbols. 
         * @summary パスワード要件を更新(Update Password Requirements)
         * @param {UpdateSignInSettingsParam} [updateSignInSettingsParam] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateSignInSettings: async (updateSignInSettingsParam?: UpdateSignInSettingsParam, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/sign-in-settings`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateSignInSettingsParam, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AuthInfoApi - functional programming interface
 * @export
 */
export const AuthInfoApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AuthInfoApiAxiosParamCreator(configuration)
    return {
        /**
         * ログイン後に認証情報を渡す SaaS の URL を取得します。 ここで取得した URL へ認証情報を渡し、SaaSus SDK を利用してこの Callback の実装をすることが可能となります。  Get the post-login SaaS URL that contains authentication information. You can pass authentication information to the URL obtained here and implement this Callback using the SaaSus SDK. 
         * @summary 認証情報を取得(Get Authentication Info)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAuthInfo(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AuthInfo>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAuthInfo(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * cognitoに設定している外部プロバイダ経由のサインイン情報取得  Get sign-in information via external provider set in cognito 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getIdentityProviders(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IdentityProviders>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getIdentityProviders(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * ユーザーパスワードの要件設定を取得します。 アルファベット、数字、記号の組み合わせで、桁数を長くすれば解読されづらい安全なパスワードを設定することが可能となります。  Get user password requirements. Set a secure password that is difficult to decipher by increasing the number of digits by combining alphabets, numbers, and symbols. 
         * @summary パスワード要件を取得(Get Password Requirements)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSignInSettings(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SignInSettings>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSignInSettings(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * ログイン後に認証情報を渡す SaaS の URL を登録します。 ここで登録した URL に認証情報を渡し、SaaSus SDK を利用してこの Callback の実装をすることが可能となります。  Register post-login SaaS URL for authentication information. It is possible to pass authentication information to the URL registered here and implement this Callback using the SaaSus SDK. 
         * @summary 認証情報を更新(Update Authentication Info)
         * @param {AuthInfo} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateAuthInfo(body?: AuthInfo, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateAuthInfo(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 外部IDプロバイダのサインイン情報更新
         * @param {UpdateIdentityProviderParam} [updateIdentityProviderParam] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateIdentityProvider(updateIdentityProviderParam?: UpdateIdentityProviderParam, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateIdentityProvider(updateIdentityProviderParam, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * ユーザーパスワードの要件設定を更新します。 アルファベット、数字、記号の組み合わせで、桁数を長くすれば解読されづらい安全なパスワードを設定することが可能となります。  Update user password requirements. Set a secure password that is difficult to decipher by increasing the number of digits by combining alphabets, numbers, and symbols. 
         * @summary パスワード要件を更新(Update Password Requirements)
         * @param {UpdateSignInSettingsParam} [updateSignInSettingsParam] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateSignInSettings(updateSignInSettingsParam?: UpdateSignInSettingsParam, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateSignInSettings(updateSignInSettingsParam, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * AuthInfoApi - factory interface
 * @export
 */
export const AuthInfoApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AuthInfoApiFp(configuration)
    return {
        /**
         * ログイン後に認証情報を渡す SaaS の URL を取得します。 ここで取得した URL へ認証情報を渡し、SaaSus SDK を利用してこの Callback の実装をすることが可能となります。  Get the post-login SaaS URL that contains authentication information. You can pass authentication information to the URL obtained here and implement this Callback using the SaaSus SDK. 
         * @summary 認証情報を取得(Get Authentication Info)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAuthInfo(options?: any): AxiosPromise<AuthInfo> {
            return localVarFp.getAuthInfo(options).then((request) => request(axios, basePath));
        },
        /**
         * cognitoに設定している外部プロバイダ経由のサインイン情報取得  Get sign-in information via external provider set in cognito 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getIdentityProviders(options?: any): AxiosPromise<IdentityProviders> {
            return localVarFp.getIdentityProviders(options).then((request) => request(axios, basePath));
        },
        /**
         * ユーザーパスワードの要件設定を取得します。 アルファベット、数字、記号の組み合わせで、桁数を長くすれば解読されづらい安全なパスワードを設定することが可能となります。  Get user password requirements. Set a secure password that is difficult to decipher by increasing the number of digits by combining alphabets, numbers, and symbols. 
         * @summary パスワード要件を取得(Get Password Requirements)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSignInSettings(options?: any): AxiosPromise<SignInSettings> {
            return localVarFp.getSignInSettings(options).then((request) => request(axios, basePath));
        },
        /**
         * ログイン後に認証情報を渡す SaaS の URL を登録します。 ここで登録した URL に認証情報を渡し、SaaSus SDK を利用してこの Callback の実装をすることが可能となります。  Register post-login SaaS URL for authentication information. It is possible to pass authentication information to the URL registered here and implement this Callback using the SaaSus SDK. 
         * @summary 認証情報を更新(Update Authentication Info)
         * @param {AuthInfo} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateAuthInfo(body?: AuthInfo, options?: any): AxiosPromise<void> {
            return localVarFp.updateAuthInfo(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 外部IDプロバイダのサインイン情報更新
         * @param {UpdateIdentityProviderParam} [updateIdentityProviderParam] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateIdentityProvider(updateIdentityProviderParam?: UpdateIdentityProviderParam, options?: any): AxiosPromise<void> {
            return localVarFp.updateIdentityProvider(updateIdentityProviderParam, options).then((request) => request(axios, basePath));
        },
        /**
         * ユーザーパスワードの要件設定を更新します。 アルファベット、数字、記号の組み合わせで、桁数を長くすれば解読されづらい安全なパスワードを設定することが可能となります。  Update user password requirements. Set a secure password that is difficult to decipher by increasing the number of digits by combining alphabets, numbers, and symbols. 
         * @summary パスワード要件を更新(Update Password Requirements)
         * @param {UpdateSignInSettingsParam} [updateSignInSettingsParam] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateSignInSettings(updateSignInSettingsParam?: UpdateSignInSettingsParam, options?: any): AxiosPromise<void> {
            return localVarFp.updateSignInSettings(updateSignInSettingsParam, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AuthInfoApi - object-oriented interface
 * @export
 * @class AuthInfoApi
 * @extends {BaseAPI}
 */
export class AuthInfoApi extends BaseAPI {
    /**
     * ログイン後に認証情報を渡す SaaS の URL を取得します。 ここで取得した URL へ認証情報を渡し、SaaSus SDK を利用してこの Callback の実装をすることが可能となります。  Get the post-login SaaS URL that contains authentication information. You can pass authentication information to the URL obtained here and implement this Callback using the SaaSus SDK. 
     * @summary 認証情報を取得(Get Authentication Info)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthInfoApi
     */
    public getAuthInfo(options?: AxiosRequestConfig) {
        return AuthInfoApiFp(this.configuration).getAuthInfo(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * cognitoに設定している外部プロバイダ経由のサインイン情報取得  Get sign-in information via external provider set in cognito 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthInfoApi
     */
    public getIdentityProviders(options?: AxiosRequestConfig) {
        return AuthInfoApiFp(this.configuration).getIdentityProviders(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ユーザーパスワードの要件設定を取得します。 アルファベット、数字、記号の組み合わせで、桁数を長くすれば解読されづらい安全なパスワードを設定することが可能となります。  Get user password requirements. Set a secure password that is difficult to decipher by increasing the number of digits by combining alphabets, numbers, and symbols. 
     * @summary パスワード要件を取得(Get Password Requirements)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthInfoApi
     */
    public getSignInSettings(options?: AxiosRequestConfig) {
        return AuthInfoApiFp(this.configuration).getSignInSettings(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ログイン後に認証情報を渡す SaaS の URL を登録します。 ここで登録した URL に認証情報を渡し、SaaSus SDK を利用してこの Callback の実装をすることが可能となります。  Register post-login SaaS URL for authentication information. It is possible to pass authentication information to the URL registered here and implement this Callback using the SaaSus SDK. 
     * @summary 認証情報を更新(Update Authentication Info)
     * @param {AuthInfo} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthInfoApi
     */
    public updateAuthInfo(body?: AuthInfo, options?: AxiosRequestConfig) {
        return AuthInfoApiFp(this.configuration).updateAuthInfo(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 外部IDプロバイダのサインイン情報更新
     * @param {UpdateIdentityProviderParam} [updateIdentityProviderParam] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthInfoApi
     */
    public updateIdentityProvider(updateIdentityProviderParam?: UpdateIdentityProviderParam, options?: AxiosRequestConfig) {
        return AuthInfoApiFp(this.configuration).updateIdentityProvider(updateIdentityProviderParam, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ユーザーパスワードの要件設定を更新します。 アルファベット、数字、記号の組み合わせで、桁数を長くすれば解読されづらい安全なパスワードを設定することが可能となります。  Update user password requirements. Set a secure password that is difficult to decipher by increasing the number of digits by combining alphabets, numbers, and symbols. 
     * @summary パスワード要件を更新(Update Password Requirements)
     * @param {UpdateSignInSettingsParam} [updateSignInSettingsParam] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthInfoApi
     */
    public updateSignInSettings(updateSignInSettingsParam?: UpdateSignInSettingsParam, options?: AxiosRequestConfig) {
        return AuthInfoApiFp(this.configuration).updateSignInSettings(updateSignInSettingsParam, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * BasicInfoApi - axios parameter creator
 * @export
 */
export const BasicInfoApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 各種通知メールテンプレートを取得します。  Get notification email templates. 
         * @summary 通知メールテンプレートを取得(Get Notification Email Templates)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findNotificationMessages: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/notification-messages`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * SaaS ID を元に設定されているドメイン名と CNAME レコードを取得します。 取得した CNAME レコードを DNS に設定することで、ログイン画面を生成します。  Get the domain name and CNAME record based on the SaaS ID. By setting the CNAME record on the DNS the login screen will be generated. 
         * @summary 基本設定情報の取得(Get Basic Configurations)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBasicInfo: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/basic-info`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 認証認可基本情報を取得します。  Get authentication authorization basic information. 
         * @summary 認証認可基本情報取得(Get Authentication Authorization Basic Information)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCustomizePageSettings: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/customize-page-settings`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 認証系画面設定情報（新規登録・ログイン・パスワードリセット等）を取得します。  Get the authentication screen setting information (new registration, login, password reset, etc.). 
         * @summary 認証系画面設定情報取得(Get Authentication Page Setting)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCustomizePages: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/customize-pages`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * SaaS ID を元にパラメータとして設定したドメイン名を設定更新します。 CNAME レコードが生成されますので、 DNS に設定して下さい。 既に稼働中の SaaS アプリケーションに設定している場合には、動作に影響があります。  Update the domain name that was set as a parameter based on the SaaS ID. After the CNAME record is generated, set it in your DNS. If it is set on a SaaS application that is already running, it will affect the behavior. 
         * @summary 基本設定情報の更新(Update Basic Configurations)
         * @param {UpdateBasicInfoParam} [updateBasicInfoParam] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateBasicInfo: async (updateBasicInfoParam?: UpdateBasicInfoParam, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/basic-info`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateBasicInfoParam, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 認証認可基本情報を更新します。  Update authentication authorization basic information. 
         * @summary 認証認可基本情報更新(Update Authentication Authorization Basic Information)
         * @param {UpdateCustomizePageSettingsParam} [updateCustomizePageSettingsParam] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateCustomizePageSettings: async (updateCustomizePageSettingsParam?: UpdateCustomizePageSettingsParam, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/customize-page-settings`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateCustomizePageSettingsParam, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 認証系画面設定情報（新規登録・ログイン・パスワードリセット等）を更新します。  Update the authentication page setting information (new registration, login, password reset, etc.). 
         * @summary 認証系画面設定情報設定(Authentication Page Setting)
         * @param {UpdateCustomizePagesParam} [updateCustomizePagesParam] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateCustomizePages: async (updateCustomizePagesParam?: UpdateCustomizePagesParam, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/customize-pages`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateCustomizePagesParam, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 各種通知メールテンプレート更新します。  Update notification email template. 
         * @summary 通知メールテンプレートを更新(Update Notification Email Template)
         * @param {UpdateNotificationMessagesParam} [updateNotificationMessagesParam] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateNotificationMessages: async (updateNotificationMessagesParam?: UpdateNotificationMessagesParam, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/notification-messages`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateNotificationMessagesParam, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * BasicInfoApi - functional programming interface
 * @export
 */
export const BasicInfoApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = BasicInfoApiAxiosParamCreator(configuration)
    return {
        /**
         * 各種通知メールテンプレートを取得します。  Get notification email templates. 
         * @summary 通知メールテンプレートを取得(Get Notification Email Templates)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async findNotificationMessages(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<NotificationMessages>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.findNotificationMessages(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * SaaS ID を元に設定されているドメイン名と CNAME レコードを取得します。 取得した CNAME レコードを DNS に設定することで、ログイン画面を生成します。  Get the domain name and CNAME record based on the SaaS ID. By setting the CNAME record on the DNS the login screen will be generated. 
         * @summary 基本設定情報の取得(Get Basic Configurations)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getBasicInfo(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BasicInfo>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getBasicInfo(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 認証認可基本情報を取得します。  Get authentication authorization basic information. 
         * @summary 認証認可基本情報取得(Get Authentication Authorization Basic Information)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCustomizePageSettings(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CustomizePageSettings>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCustomizePageSettings(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 認証系画面設定情報（新規登録・ログイン・パスワードリセット等）を取得します。  Get the authentication screen setting information (new registration, login, password reset, etc.). 
         * @summary 認証系画面設定情報取得(Get Authentication Page Setting)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCustomizePages(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CustomizePages>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCustomizePages(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * SaaS ID を元にパラメータとして設定したドメイン名を設定更新します。 CNAME レコードが生成されますので、 DNS に設定して下さい。 既に稼働中の SaaS アプリケーションに設定している場合には、動作に影響があります。  Update the domain name that was set as a parameter based on the SaaS ID. After the CNAME record is generated, set it in your DNS. If it is set on a SaaS application that is already running, it will affect the behavior. 
         * @summary 基本設定情報の更新(Update Basic Configurations)
         * @param {UpdateBasicInfoParam} [updateBasicInfoParam] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateBasicInfo(updateBasicInfoParam?: UpdateBasicInfoParam, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateBasicInfo(updateBasicInfoParam, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 認証認可基本情報を更新します。  Update authentication authorization basic information. 
         * @summary 認証認可基本情報更新(Update Authentication Authorization Basic Information)
         * @param {UpdateCustomizePageSettingsParam} [updateCustomizePageSettingsParam] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateCustomizePageSettings(updateCustomizePageSettingsParam?: UpdateCustomizePageSettingsParam, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateCustomizePageSettings(updateCustomizePageSettingsParam, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 認証系画面設定情報（新規登録・ログイン・パスワードリセット等）を更新します。  Update the authentication page setting information (new registration, login, password reset, etc.). 
         * @summary 認証系画面設定情報設定(Authentication Page Setting)
         * @param {UpdateCustomizePagesParam} [updateCustomizePagesParam] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateCustomizePages(updateCustomizePagesParam?: UpdateCustomizePagesParam, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateCustomizePages(updateCustomizePagesParam, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 各種通知メールテンプレート更新します。  Update notification email template. 
         * @summary 通知メールテンプレートを更新(Update Notification Email Template)
         * @param {UpdateNotificationMessagesParam} [updateNotificationMessagesParam] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateNotificationMessages(updateNotificationMessagesParam?: UpdateNotificationMessagesParam, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateNotificationMessages(updateNotificationMessagesParam, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * BasicInfoApi - factory interface
 * @export
 */
export const BasicInfoApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = BasicInfoApiFp(configuration)
    return {
        /**
         * 各種通知メールテンプレートを取得します。  Get notification email templates. 
         * @summary 通知メールテンプレートを取得(Get Notification Email Templates)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findNotificationMessages(options?: any): AxiosPromise<NotificationMessages> {
            return localVarFp.findNotificationMessages(options).then((request) => request(axios, basePath));
        },
        /**
         * SaaS ID を元に設定されているドメイン名と CNAME レコードを取得します。 取得した CNAME レコードを DNS に設定することで、ログイン画面を生成します。  Get the domain name and CNAME record based on the SaaS ID. By setting the CNAME record on the DNS the login screen will be generated. 
         * @summary 基本設定情報の取得(Get Basic Configurations)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBasicInfo(options?: any): AxiosPromise<BasicInfo> {
            return localVarFp.getBasicInfo(options).then((request) => request(axios, basePath));
        },
        /**
         * 認証認可基本情報を取得します。  Get authentication authorization basic information. 
         * @summary 認証認可基本情報取得(Get Authentication Authorization Basic Information)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCustomizePageSettings(options?: any): AxiosPromise<CustomizePageSettings> {
            return localVarFp.getCustomizePageSettings(options).then((request) => request(axios, basePath));
        },
        /**
         * 認証系画面設定情報（新規登録・ログイン・パスワードリセット等）を取得します。  Get the authentication screen setting information (new registration, login, password reset, etc.). 
         * @summary 認証系画面設定情報取得(Get Authentication Page Setting)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCustomizePages(options?: any): AxiosPromise<CustomizePages> {
            return localVarFp.getCustomizePages(options).then((request) => request(axios, basePath));
        },
        /**
         * SaaS ID を元にパラメータとして設定したドメイン名を設定更新します。 CNAME レコードが生成されますので、 DNS に設定して下さい。 既に稼働中の SaaS アプリケーションに設定している場合には、動作に影響があります。  Update the domain name that was set as a parameter based on the SaaS ID. After the CNAME record is generated, set it in your DNS. If it is set on a SaaS application that is already running, it will affect the behavior. 
         * @summary 基本設定情報の更新(Update Basic Configurations)
         * @param {UpdateBasicInfoParam} [updateBasicInfoParam] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateBasicInfo(updateBasicInfoParam?: UpdateBasicInfoParam, options?: any): AxiosPromise<void> {
            return localVarFp.updateBasicInfo(updateBasicInfoParam, options).then((request) => request(axios, basePath));
        },
        /**
         * 認証認可基本情報を更新します。  Update authentication authorization basic information. 
         * @summary 認証認可基本情報更新(Update Authentication Authorization Basic Information)
         * @param {UpdateCustomizePageSettingsParam} [updateCustomizePageSettingsParam] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateCustomizePageSettings(updateCustomizePageSettingsParam?: UpdateCustomizePageSettingsParam, options?: any): AxiosPromise<void> {
            return localVarFp.updateCustomizePageSettings(updateCustomizePageSettingsParam, options).then((request) => request(axios, basePath));
        },
        /**
         * 認証系画面設定情報（新規登録・ログイン・パスワードリセット等）を更新します。  Update the authentication page setting information (new registration, login, password reset, etc.). 
         * @summary 認証系画面設定情報設定(Authentication Page Setting)
         * @param {UpdateCustomizePagesParam} [updateCustomizePagesParam] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateCustomizePages(updateCustomizePagesParam?: UpdateCustomizePagesParam, options?: any): AxiosPromise<void> {
            return localVarFp.updateCustomizePages(updateCustomizePagesParam, options).then((request) => request(axios, basePath));
        },
        /**
         * 各種通知メールテンプレート更新します。  Update notification email template. 
         * @summary 通知メールテンプレートを更新(Update Notification Email Template)
         * @param {UpdateNotificationMessagesParam} [updateNotificationMessagesParam] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateNotificationMessages(updateNotificationMessagesParam?: UpdateNotificationMessagesParam, options?: any): AxiosPromise<void> {
            return localVarFp.updateNotificationMessages(updateNotificationMessagesParam, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * BasicInfoApi - object-oriented interface
 * @export
 * @class BasicInfoApi
 * @extends {BaseAPI}
 */
export class BasicInfoApi extends BaseAPI {
    /**
     * 各種通知メールテンプレートを取得します。  Get notification email templates. 
     * @summary 通知メールテンプレートを取得(Get Notification Email Templates)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BasicInfoApi
     */
    public findNotificationMessages(options?: AxiosRequestConfig) {
        return BasicInfoApiFp(this.configuration).findNotificationMessages(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * SaaS ID を元に設定されているドメイン名と CNAME レコードを取得します。 取得した CNAME レコードを DNS に設定することで、ログイン画面を生成します。  Get the domain name and CNAME record based on the SaaS ID. By setting the CNAME record on the DNS the login screen will be generated. 
     * @summary 基本設定情報の取得(Get Basic Configurations)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BasicInfoApi
     */
    public getBasicInfo(options?: AxiosRequestConfig) {
        return BasicInfoApiFp(this.configuration).getBasicInfo(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 認証認可基本情報を取得します。  Get authentication authorization basic information. 
     * @summary 認証認可基本情報取得(Get Authentication Authorization Basic Information)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BasicInfoApi
     */
    public getCustomizePageSettings(options?: AxiosRequestConfig) {
        return BasicInfoApiFp(this.configuration).getCustomizePageSettings(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 認証系画面設定情報（新規登録・ログイン・パスワードリセット等）を取得します。  Get the authentication screen setting information (new registration, login, password reset, etc.). 
     * @summary 認証系画面設定情報取得(Get Authentication Page Setting)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BasicInfoApi
     */
    public getCustomizePages(options?: AxiosRequestConfig) {
        return BasicInfoApiFp(this.configuration).getCustomizePages(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * SaaS ID を元にパラメータとして設定したドメイン名を設定更新します。 CNAME レコードが生成されますので、 DNS に設定して下さい。 既に稼働中の SaaS アプリケーションに設定している場合には、動作に影響があります。  Update the domain name that was set as a parameter based on the SaaS ID. After the CNAME record is generated, set it in your DNS. If it is set on a SaaS application that is already running, it will affect the behavior. 
     * @summary 基本設定情報の更新(Update Basic Configurations)
     * @param {UpdateBasicInfoParam} [updateBasicInfoParam] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BasicInfoApi
     */
    public updateBasicInfo(updateBasicInfoParam?: UpdateBasicInfoParam, options?: AxiosRequestConfig) {
        return BasicInfoApiFp(this.configuration).updateBasicInfo(updateBasicInfoParam, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 認証認可基本情報を更新します。  Update authentication authorization basic information. 
     * @summary 認証認可基本情報更新(Update Authentication Authorization Basic Information)
     * @param {UpdateCustomizePageSettingsParam} [updateCustomizePageSettingsParam] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BasicInfoApi
     */
    public updateCustomizePageSettings(updateCustomizePageSettingsParam?: UpdateCustomizePageSettingsParam, options?: AxiosRequestConfig) {
        return BasicInfoApiFp(this.configuration).updateCustomizePageSettings(updateCustomizePageSettingsParam, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 認証系画面設定情報（新規登録・ログイン・パスワードリセット等）を更新します。  Update the authentication page setting information (new registration, login, password reset, etc.). 
     * @summary 認証系画面設定情報設定(Authentication Page Setting)
     * @param {UpdateCustomizePagesParam} [updateCustomizePagesParam] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BasicInfoApi
     */
    public updateCustomizePages(updateCustomizePagesParam?: UpdateCustomizePagesParam, options?: AxiosRequestConfig) {
        return BasicInfoApiFp(this.configuration).updateCustomizePages(updateCustomizePagesParam, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 各種通知メールテンプレート更新します。  Update notification email template. 
     * @summary 通知メールテンプレートを更新(Update Notification Email Template)
     * @param {UpdateNotificationMessagesParam} [updateNotificationMessagesParam] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BasicInfoApi
     */
    public updateNotificationMessages(updateNotificationMessagesParam?: UpdateNotificationMessagesParam, options?: AxiosRequestConfig) {
        return BasicInfoApiFp(this.configuration).updateNotificationMessages(updateNotificationMessagesParam, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * CredentialApi - axios parameter creator
 * @export
 */
export const CredentialApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 引数のIDトークン・アクセストークン・リフレッシュトークンを一時保存し取得用の一時コードを返却する。 一時コードの有効期間は発行から10秒です。  Temporarily save the parameter for the ID token, access token, and refresh token and return a temporary code for obtaining. Temporary codes are valid for 10 seconds from issuance. 
         * @summary 認証・認可情報の保存(Save Authentication/Authorization Information)
         * @param {Credentials} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAuthCredentials: async (body?: Credentials, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/credentials`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 一時コードまたはリフレッシュトークンを利用してIDトークン・アクセストークン・リフレッシュトークンを取得する。  Get ID token, access token, and refresh token using a temporary code or a refresh token. 
         * @summary 認証・認可情報の取得(Get Authentication/Authorization Information)
         * @param {string} [code] 一時コード(Temp Code)
         * @param {'tempCodeAuth' | 'refreshTokenAuth'} [authFlow] 認証フロー（Authentication Flow） tempCodeAuth: 一時コードを利用した認証情報の取得 refreshTokenAuth: リフレッシュトークンを利用した認証情報の取得 指定されていない場合は tempCodeAuth になります 
         * @param {string} [refreshToken] リフレッシュトークン(Refresh Token)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAuthCredentials: async (code?: string, authFlow?: 'tempCodeAuth' | 'refreshTokenAuth', refreshToken?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/credentials`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (code !== undefined) {
                localVarQueryParameter['code'] = code;
            }

            if (authFlow !== undefined) {
                localVarQueryParameter['auth-flow'] = authFlow;
            }

            if (refreshToken !== undefined) {
                localVarQueryParameter['refresh-token'] = refreshToken;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CredentialApi - functional programming interface
 * @export
 */
export const CredentialApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CredentialApiAxiosParamCreator(configuration)
    return {
        /**
         * 引数のIDトークン・アクセストークン・リフレッシュトークンを一時保存し取得用の一時コードを返却する。 一時コードの有効期間は発行から10秒です。  Temporarily save the parameter for the ID token, access token, and refresh token and return a temporary code for obtaining. Temporary codes are valid for 10 seconds from issuance. 
         * @summary 認証・認可情報の保存(Save Authentication/Authorization Information)
         * @param {Credentials} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createAuthCredentials(body?: Credentials, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AuthorizationTempCode>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createAuthCredentials(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 一時コードまたはリフレッシュトークンを利用してIDトークン・アクセストークン・リフレッシュトークンを取得する。  Get ID token, access token, and refresh token using a temporary code or a refresh token. 
         * @summary 認証・認可情報の取得(Get Authentication/Authorization Information)
         * @param {string} [code] 一時コード(Temp Code)
         * @param {'tempCodeAuth' | 'refreshTokenAuth'} [authFlow] 認証フロー（Authentication Flow） tempCodeAuth: 一時コードを利用した認証情報の取得 refreshTokenAuth: リフレッシュトークンを利用した認証情報の取得 指定されていない場合は tempCodeAuth になります 
         * @param {string} [refreshToken] リフレッシュトークン(Refresh Token)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAuthCredentials(code?: string, authFlow?: 'tempCodeAuth' | 'refreshTokenAuth', refreshToken?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Credentials>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAuthCredentials(code, authFlow, refreshToken, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * CredentialApi - factory interface
 * @export
 */
export const CredentialApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CredentialApiFp(configuration)
    return {
        /**
         * 引数のIDトークン・アクセストークン・リフレッシュトークンを一時保存し取得用の一時コードを返却する。 一時コードの有効期間は発行から10秒です。  Temporarily save the parameter for the ID token, access token, and refresh token and return a temporary code for obtaining. Temporary codes are valid for 10 seconds from issuance. 
         * @summary 認証・認可情報の保存(Save Authentication/Authorization Information)
         * @param {Credentials} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAuthCredentials(body?: Credentials, options?: any): AxiosPromise<AuthorizationTempCode> {
            return localVarFp.createAuthCredentials(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 一時コードまたはリフレッシュトークンを利用してIDトークン・アクセストークン・リフレッシュトークンを取得する。  Get ID token, access token, and refresh token using a temporary code or a refresh token. 
         * @summary 認証・認可情報の取得(Get Authentication/Authorization Information)
         * @param {string} [code] 一時コード(Temp Code)
         * @param {'tempCodeAuth' | 'refreshTokenAuth'} [authFlow] 認証フロー（Authentication Flow） tempCodeAuth: 一時コードを利用した認証情報の取得 refreshTokenAuth: リフレッシュトークンを利用した認証情報の取得 指定されていない場合は tempCodeAuth になります 
         * @param {string} [refreshToken] リフレッシュトークン(Refresh Token)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAuthCredentials(code?: string, authFlow?: 'tempCodeAuth' | 'refreshTokenAuth', refreshToken?: string, options?: any): AxiosPromise<Credentials> {
            return localVarFp.getAuthCredentials(code, authFlow, refreshToken, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CredentialApi - object-oriented interface
 * @export
 * @class CredentialApi
 * @extends {BaseAPI}
 */
export class CredentialApi extends BaseAPI {
    /**
     * 引数のIDトークン・アクセストークン・リフレッシュトークンを一時保存し取得用の一時コードを返却する。 一時コードの有効期間は発行から10秒です。  Temporarily save the parameter for the ID token, access token, and refresh token and return a temporary code for obtaining. Temporary codes are valid for 10 seconds from issuance. 
     * @summary 認証・認可情報の保存(Save Authentication/Authorization Information)
     * @param {Credentials} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CredentialApi
     */
    public createAuthCredentials(body?: Credentials, options?: AxiosRequestConfig) {
        return CredentialApiFp(this.configuration).createAuthCredentials(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 一時コードまたはリフレッシュトークンを利用してIDトークン・アクセストークン・リフレッシュトークンを取得する。  Get ID token, access token, and refresh token using a temporary code or a refresh token. 
     * @summary 認証・認可情報の取得(Get Authentication/Authorization Information)
     * @param {string} [code] 一時コード(Temp Code)
     * @param {'tempCodeAuth' | 'refreshTokenAuth'} [authFlow] 認証フロー（Authentication Flow） tempCodeAuth: 一時コードを利用した認証情報の取得 refreshTokenAuth: リフレッシュトークンを利用した認証情報の取得 指定されていない場合は tempCodeAuth になります 
     * @param {string} [refreshToken] リフレッシュトークン(Refresh Token)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CredentialApi
     */
    public getAuthCredentials(code?: string, authFlow?: 'tempCodeAuth' | 'refreshTokenAuth', refreshToken?: string, options?: AxiosRequestConfig) {
        return CredentialApiFp(this.configuration).getAuthCredentials(code, authFlow, refreshToken, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * EnvApi - axios parameter creator
 * @export
 */
export const EnvApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 環境情報を作成します。 連携のテストや開発用環境や実際の運用で利用する環境など複数の環境を定義することができます。  Create environment information. Multiple environments can be defined, such as an environment for testing linkage, an environment for development, and an environment for actual operation. 
         * @summary 環境情報を作成(Create Env Info)
         * @param {Env} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createEnv: async (body?: Env, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/envs`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 環境情報を削除します。  Delete env info. 
         * @summary 環境情報を削除(Delete Env Info)
         * @param {number} envId 環境ID(Env ID)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteEnv: async (envId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'envId' is not null or undefined
            assertParamExists('deleteEnv', 'envId', envId)
            const localVarPath = `/envs/{env_id}`
                .replace(`{${"env_id"}}`, encodeURIComponent(String(envId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 環境情報の詳細を取得します。  Get environment details. 
         * @summary 環境情報を取得(Get Env Details)
         * @param {number} envId 環境ID(Env ID)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEnv: async (envId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'envId' is not null or undefined
            assertParamExists('getEnv', 'envId', envId)
            const localVarPath = `/envs/{env_id}`
                .replace(`{${"env_id"}}`, encodeURIComponent(String(envId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 登録されている環境情報を取得します。 連携のテストや開発用環境や実際の運用で利用する環境など複数の環境を定義することができます。  Get registered environment information. Multiple environments can be defined, such as an environment for testing linkage, an environment for development, and an environment for actual operation. 
         * @summary 環境情報一覧を取得(Get Env Info)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEnvs: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/envs`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 環境情報を更新します。  Update env info. 
         * @summary 環境情報を更新(Update Env Info)
         * @param {number} envId 環境ID(Env ID)
         * @param {UpdateEnvParam} [updateEnvParam] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateEnv: async (envId: number, updateEnvParam?: UpdateEnvParam, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'envId' is not null or undefined
            assertParamExists('updateEnv', 'envId', envId)
            const localVarPath = `/envs/{env_id}`
                .replace(`{${"env_id"}}`, encodeURIComponent(String(envId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateEnvParam, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * EnvApi - functional programming interface
 * @export
 */
export const EnvApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = EnvApiAxiosParamCreator(configuration)
    return {
        /**
         * 環境情報を作成します。 連携のテストや開発用環境や実際の運用で利用する環境など複数の環境を定義することができます。  Create environment information. Multiple environments can be defined, such as an environment for testing linkage, an environment for development, and an environment for actual operation. 
         * @summary 環境情報を作成(Create Env Info)
         * @param {Env} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createEnv(body?: Env, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Env>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createEnv(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 環境情報を削除します。  Delete env info. 
         * @summary 環境情報を削除(Delete Env Info)
         * @param {number} envId 環境ID(Env ID)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteEnv(envId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteEnv(envId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 環境情報の詳細を取得します。  Get environment details. 
         * @summary 環境情報を取得(Get Env Details)
         * @param {number} envId 環境ID(Env ID)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getEnv(envId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Env>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getEnv(envId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 登録されている環境情報を取得します。 連携のテストや開発用環境や実際の運用で利用する環境など複数の環境を定義することができます。  Get registered environment information. Multiple environments can be defined, such as an environment for testing linkage, an environment for development, and an environment for actual operation. 
         * @summary 環境情報一覧を取得(Get Env Info)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getEnvs(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Envs>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getEnvs(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 環境情報を更新します。  Update env info. 
         * @summary 環境情報を更新(Update Env Info)
         * @param {number} envId 環境ID(Env ID)
         * @param {UpdateEnvParam} [updateEnvParam] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateEnv(envId: number, updateEnvParam?: UpdateEnvParam, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateEnv(envId, updateEnvParam, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * EnvApi - factory interface
 * @export
 */
export const EnvApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = EnvApiFp(configuration)
    return {
        /**
         * 環境情報を作成します。 連携のテストや開発用環境や実際の運用で利用する環境など複数の環境を定義することができます。  Create environment information. Multiple environments can be defined, such as an environment for testing linkage, an environment for development, and an environment for actual operation. 
         * @summary 環境情報を作成(Create Env Info)
         * @param {Env} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createEnv(body?: Env, options?: any): AxiosPromise<Env> {
            return localVarFp.createEnv(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 環境情報を削除します。  Delete env info. 
         * @summary 環境情報を削除(Delete Env Info)
         * @param {number} envId 環境ID(Env ID)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteEnv(envId: number, options?: any): AxiosPromise<void> {
            return localVarFp.deleteEnv(envId, options).then((request) => request(axios, basePath));
        },
        /**
         * 環境情報の詳細を取得します。  Get environment details. 
         * @summary 環境情報を取得(Get Env Details)
         * @param {number} envId 環境ID(Env ID)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEnv(envId: number, options?: any): AxiosPromise<Env> {
            return localVarFp.getEnv(envId, options).then((request) => request(axios, basePath));
        },
        /**
         * 登録されている環境情報を取得します。 連携のテストや開発用環境や実際の運用で利用する環境など複数の環境を定義することができます。  Get registered environment information. Multiple environments can be defined, such as an environment for testing linkage, an environment for development, and an environment for actual operation. 
         * @summary 環境情報一覧を取得(Get Env Info)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEnvs(options?: any): AxiosPromise<Envs> {
            return localVarFp.getEnvs(options).then((request) => request(axios, basePath));
        },
        /**
         * 環境情報を更新します。  Update env info. 
         * @summary 環境情報を更新(Update Env Info)
         * @param {number} envId 環境ID(Env ID)
         * @param {UpdateEnvParam} [updateEnvParam] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateEnv(envId: number, updateEnvParam?: UpdateEnvParam, options?: any): AxiosPromise<void> {
            return localVarFp.updateEnv(envId, updateEnvParam, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * EnvApi - object-oriented interface
 * @export
 * @class EnvApi
 * @extends {BaseAPI}
 */
export class EnvApi extends BaseAPI {
    /**
     * 環境情報を作成します。 連携のテストや開発用環境や実際の運用で利用する環境など複数の環境を定義することができます。  Create environment information. Multiple environments can be defined, such as an environment for testing linkage, an environment for development, and an environment for actual operation. 
     * @summary 環境情報を作成(Create Env Info)
     * @param {Env} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EnvApi
     */
    public createEnv(body?: Env, options?: AxiosRequestConfig) {
        return EnvApiFp(this.configuration).createEnv(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 環境情報を削除します。  Delete env info. 
     * @summary 環境情報を削除(Delete Env Info)
     * @param {number} envId 環境ID(Env ID)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EnvApi
     */
    public deleteEnv(envId: number, options?: AxiosRequestConfig) {
        return EnvApiFp(this.configuration).deleteEnv(envId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 環境情報の詳細を取得します。  Get environment details. 
     * @summary 環境情報を取得(Get Env Details)
     * @param {number} envId 環境ID(Env ID)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EnvApi
     */
    public getEnv(envId: number, options?: AxiosRequestConfig) {
        return EnvApiFp(this.configuration).getEnv(envId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 登録されている環境情報を取得します。 連携のテストや開発用環境や実際の運用で利用する環境など複数の環境を定義することができます。  Get registered environment information. Multiple environments can be defined, such as an environment for testing linkage, an environment for development, and an environment for actual operation. 
     * @summary 環境情報一覧を取得(Get Env Info)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EnvApi
     */
    public getEnvs(options?: AxiosRequestConfig) {
        return EnvApiFp(this.configuration).getEnvs(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 環境情報を更新します。  Update env info. 
     * @summary 環境情報を更新(Update Env Info)
     * @param {number} envId 環境ID(Env ID)
     * @param {UpdateEnvParam} [updateEnvParam] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EnvApi
     */
    public updateEnv(envId: number, updateEnvParam?: UpdateEnvParam, options?: AxiosRequestConfig) {
        return EnvApiFp(this.configuration).updateEnv(envId, updateEnvParam, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * ErrorApi - axios parameter creator
 * @export
 */
export const ErrorApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * テスト用途で使用するエンドポイントです。ステータスコード500でサーバーエラーを返却します。  This endpoint is used for testing purposes. Returns a server error with status code 500. 
         * @summary ステータスコード500でサーバーエラーを返却(Return Internal Server Error)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        returnInternalServerError: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/errors/internal-server-error`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ErrorApi - functional programming interface
 * @export
 */
export const ErrorApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ErrorApiAxiosParamCreator(configuration)
    return {
        /**
         * テスト用途で使用するエンドポイントです。ステータスコード500でサーバーエラーを返却します。  This endpoint is used for testing purposes. Returns a server error with status code 500. 
         * @summary ステータスコード500でサーバーエラーを返却(Return Internal Server Error)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async returnInternalServerError(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.returnInternalServerError(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ErrorApi - factory interface
 * @export
 */
export const ErrorApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ErrorApiFp(configuration)
    return {
        /**
         * テスト用途で使用するエンドポイントです。ステータスコード500でサーバーエラーを返却します。  This endpoint is used for testing purposes. Returns a server error with status code 500. 
         * @summary ステータスコード500でサーバーエラーを返却(Return Internal Server Error)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        returnInternalServerError(options?: any): AxiosPromise<void> {
            return localVarFp.returnInternalServerError(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ErrorApi - object-oriented interface
 * @export
 * @class ErrorApi
 * @extends {BaseAPI}
 */
export class ErrorApi extends BaseAPI {
    /**
     * テスト用途で使用するエンドポイントです。ステータスコード500でサーバーエラーを返却します。  This endpoint is used for testing purposes. Returns a server error with status code 500. 
     * @summary ステータスコード500でサーバーエラーを返却(Return Internal Server Error)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ErrorApi
     */
    public returnInternalServerError(options?: AxiosRequestConfig) {
        return ErrorApiFp(this.configuration).returnInternalServerError(options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * InvitationApi - axios parameter creator
 * @export
 */
export const InvitationApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * テナントへの招待を作成します。  Create an invitation to the tenant. 
         * @summary テナントへの招待を作成(Create Tenant Invitation)
         * @param {string} tenantId テナントID(Tenant ID)
         * @param {CreateTenantInvitationParam} [createTenantInvitationParam] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createTenantInvitation: async (tenantId: string, createTenantInvitationParam?: CreateTenantInvitationParam, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tenantId' is not null or undefined
            assertParamExists('createTenantInvitation', 'tenantId', tenantId)
            const localVarPath = `/tenants/{tenant_id}/invitations`
                .replace(`{${"tenant_id"}}`, encodeURIComponent(String(tenantId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createTenantInvitationParam, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * テナントへの招待を削除します。  Delete an invitation to the tenant. 
         * @summary テナントへの招待を削除(Delete Tenant Invitation)
         * @param {string} tenantId テナントID(Tenant ID)
         * @param {string} invitationId 招待ID(Invitation ID)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteTenantInvitation: async (tenantId: string, invitationId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tenantId' is not null or undefined
            assertParamExists('deleteTenantInvitation', 'tenantId', tenantId)
            // verify required parameter 'invitationId' is not null or undefined
            assertParamExists('deleteTenantInvitation', 'invitationId', invitationId)
            const localVarPath = `/tenants/{tenant_id}/invitations/{invitation_id}`
                .replace(`{${"tenant_id"}}`, encodeURIComponent(String(tenantId)))
                .replace(`{${"invitation_id"}}`, encodeURIComponent(String(invitationId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * テナントへの招待の有効性を取得します。  Get the validity of an invitation to the tenant. 
         * @summary テナントへの招待の有効性を取得(Get Invitation Validity)
         * @param {string} invitationId 招待ID(Invitation ID)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getInvitationValidity: async (invitationId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'invitationId' is not null or undefined
            assertParamExists('getInvitationValidity', 'invitationId', invitationId)
            const localVarPath = `/invitations/{invitation_id}/validity`
                .replace(`{${"invitation_id"}}`, encodeURIComponent(String(invitationId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * テナントへの招待情報を取得します。  Get invitation information to the tenant. 
         * @summary テナントの招待情報を取得(Get Tenant Invitation)
         * @param {string} tenantId テナントID(Tenant ID)
         * @param {string} invitationId 招待ID(Invitation ID)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTenantInvitation: async (tenantId: string, invitationId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tenantId' is not null or undefined
            assertParamExists('getTenantInvitation', 'tenantId', tenantId)
            // verify required parameter 'invitationId' is not null or undefined
            assertParamExists('getTenantInvitation', 'invitationId', invitationId)
            const localVarPath = `/tenants/{tenant_id}/invitations/{invitation_id}`
                .replace(`{${"tenant_id"}}`, encodeURIComponent(String(tenantId)))
                .replace(`{${"invitation_id"}}`, encodeURIComponent(String(invitationId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * テナントへの招待一覧を取得します。  Get a list of invitations to the tenant. 
         * @summary テナントの招待一覧を取得(Get Tenant Invitations)
         * @param {string} tenantId テナントID(Tenant ID)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTenantInvitations: async (tenantId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tenantId' is not null or undefined
            assertParamExists('getTenantInvitations', 'tenantId', tenantId)
            const localVarPath = `/tenants/{tenant_id}/invitations`
                .replace(`{${"tenant_id"}}`, encodeURIComponent(String(tenantId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * テナントへの招待を検証します。  Validate an invitation to the tenant. 
         * @summary テナントへの招待を検証(Validate Invitation)
         * @param {string} invitationId 招待ID(Invitation ID)
         * @param {ValidateInvitationParam} [validateInvitationParam] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        validateInvitation: async (invitationId: string, validateInvitationParam?: ValidateInvitationParam, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'invitationId' is not null or undefined
            assertParamExists('validateInvitation', 'invitationId', invitationId)
            const localVarPath = `/invitations/{invitation_id}/validate`
                .replace(`{${"invitation_id"}}`, encodeURIComponent(String(invitationId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(validateInvitationParam, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * InvitationApi - functional programming interface
 * @export
 */
export const InvitationApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = InvitationApiAxiosParamCreator(configuration)
    return {
        /**
         * テナントへの招待を作成します。  Create an invitation to the tenant. 
         * @summary テナントへの招待を作成(Create Tenant Invitation)
         * @param {string} tenantId テナントID(Tenant ID)
         * @param {CreateTenantInvitationParam} [createTenantInvitationParam] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createTenantInvitation(tenantId: string, createTenantInvitationParam?: CreateTenantInvitationParam, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Invitation>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createTenantInvitation(tenantId, createTenantInvitationParam, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * テナントへの招待を削除します。  Delete an invitation to the tenant. 
         * @summary テナントへの招待を削除(Delete Tenant Invitation)
         * @param {string} tenantId テナントID(Tenant ID)
         * @param {string} invitationId 招待ID(Invitation ID)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteTenantInvitation(tenantId: string, invitationId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteTenantInvitation(tenantId, invitationId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * テナントへの招待の有効性を取得します。  Get the validity of an invitation to the tenant. 
         * @summary テナントへの招待の有効性を取得(Get Invitation Validity)
         * @param {string} invitationId 招待ID(Invitation ID)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getInvitationValidity(invitationId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InvitationValidity>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getInvitationValidity(invitationId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * テナントへの招待情報を取得します。  Get invitation information to the tenant. 
         * @summary テナントの招待情報を取得(Get Tenant Invitation)
         * @param {string} tenantId テナントID(Tenant ID)
         * @param {string} invitationId 招待ID(Invitation ID)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getTenantInvitation(tenantId: string, invitationId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Invitation>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getTenantInvitation(tenantId, invitationId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * テナントへの招待一覧を取得します。  Get a list of invitations to the tenant. 
         * @summary テナントの招待一覧を取得(Get Tenant Invitations)
         * @param {string} tenantId テナントID(Tenant ID)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getTenantInvitations(tenantId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Invitations>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getTenantInvitations(tenantId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * テナントへの招待を検証します。  Validate an invitation to the tenant. 
         * @summary テナントへの招待を検証(Validate Invitation)
         * @param {string} invitationId 招待ID(Invitation ID)
         * @param {ValidateInvitationParam} [validateInvitationParam] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async validateInvitation(invitationId: string, validateInvitationParam?: ValidateInvitationParam, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.validateInvitation(invitationId, validateInvitationParam, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * InvitationApi - factory interface
 * @export
 */
export const InvitationApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = InvitationApiFp(configuration)
    return {
        /**
         * テナントへの招待を作成します。  Create an invitation to the tenant. 
         * @summary テナントへの招待を作成(Create Tenant Invitation)
         * @param {string} tenantId テナントID(Tenant ID)
         * @param {CreateTenantInvitationParam} [createTenantInvitationParam] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createTenantInvitation(tenantId: string, createTenantInvitationParam?: CreateTenantInvitationParam, options?: any): AxiosPromise<Invitation> {
            return localVarFp.createTenantInvitation(tenantId, createTenantInvitationParam, options).then((request) => request(axios, basePath));
        },
        /**
         * テナントへの招待を削除します。  Delete an invitation to the tenant. 
         * @summary テナントへの招待を削除(Delete Tenant Invitation)
         * @param {string} tenantId テナントID(Tenant ID)
         * @param {string} invitationId 招待ID(Invitation ID)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteTenantInvitation(tenantId: string, invitationId: string, options?: any): AxiosPromise<void> {
            return localVarFp.deleteTenantInvitation(tenantId, invitationId, options).then((request) => request(axios, basePath));
        },
        /**
         * テナントへの招待の有効性を取得します。  Get the validity of an invitation to the tenant. 
         * @summary テナントへの招待の有効性を取得(Get Invitation Validity)
         * @param {string} invitationId 招待ID(Invitation ID)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getInvitationValidity(invitationId: string, options?: any): AxiosPromise<InvitationValidity> {
            return localVarFp.getInvitationValidity(invitationId, options).then((request) => request(axios, basePath));
        },
        /**
         * テナントへの招待情報を取得します。  Get invitation information to the tenant. 
         * @summary テナントの招待情報を取得(Get Tenant Invitation)
         * @param {string} tenantId テナントID(Tenant ID)
         * @param {string} invitationId 招待ID(Invitation ID)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTenantInvitation(tenantId: string, invitationId: string, options?: any): AxiosPromise<Invitation> {
            return localVarFp.getTenantInvitation(tenantId, invitationId, options).then((request) => request(axios, basePath));
        },
        /**
         * テナントへの招待一覧を取得します。  Get a list of invitations to the tenant. 
         * @summary テナントの招待一覧を取得(Get Tenant Invitations)
         * @param {string} tenantId テナントID(Tenant ID)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTenantInvitations(tenantId: string, options?: any): AxiosPromise<Invitations> {
            return localVarFp.getTenantInvitations(tenantId, options).then((request) => request(axios, basePath));
        },
        /**
         * テナントへの招待を検証します。  Validate an invitation to the tenant. 
         * @summary テナントへの招待を検証(Validate Invitation)
         * @param {string} invitationId 招待ID(Invitation ID)
         * @param {ValidateInvitationParam} [validateInvitationParam] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        validateInvitation(invitationId: string, validateInvitationParam?: ValidateInvitationParam, options?: any): AxiosPromise<void> {
            return localVarFp.validateInvitation(invitationId, validateInvitationParam, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * InvitationApi - object-oriented interface
 * @export
 * @class InvitationApi
 * @extends {BaseAPI}
 */
export class InvitationApi extends BaseAPI {
    /**
     * テナントへの招待を作成します。  Create an invitation to the tenant. 
     * @summary テナントへの招待を作成(Create Tenant Invitation)
     * @param {string} tenantId テナントID(Tenant ID)
     * @param {CreateTenantInvitationParam} [createTenantInvitationParam] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InvitationApi
     */
    public createTenantInvitation(tenantId: string, createTenantInvitationParam?: CreateTenantInvitationParam, options?: AxiosRequestConfig) {
        return InvitationApiFp(this.configuration).createTenantInvitation(tenantId, createTenantInvitationParam, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * テナントへの招待を削除します。  Delete an invitation to the tenant. 
     * @summary テナントへの招待を削除(Delete Tenant Invitation)
     * @param {string} tenantId テナントID(Tenant ID)
     * @param {string} invitationId 招待ID(Invitation ID)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InvitationApi
     */
    public deleteTenantInvitation(tenantId: string, invitationId: string, options?: AxiosRequestConfig) {
        return InvitationApiFp(this.configuration).deleteTenantInvitation(tenantId, invitationId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * テナントへの招待の有効性を取得します。  Get the validity of an invitation to the tenant. 
     * @summary テナントへの招待の有効性を取得(Get Invitation Validity)
     * @param {string} invitationId 招待ID(Invitation ID)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InvitationApi
     */
    public getInvitationValidity(invitationId: string, options?: AxiosRequestConfig) {
        return InvitationApiFp(this.configuration).getInvitationValidity(invitationId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * テナントへの招待情報を取得します。  Get invitation information to the tenant. 
     * @summary テナントの招待情報を取得(Get Tenant Invitation)
     * @param {string} tenantId テナントID(Tenant ID)
     * @param {string} invitationId 招待ID(Invitation ID)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InvitationApi
     */
    public getTenantInvitation(tenantId: string, invitationId: string, options?: AxiosRequestConfig) {
        return InvitationApiFp(this.configuration).getTenantInvitation(tenantId, invitationId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * テナントへの招待一覧を取得します。  Get a list of invitations to the tenant. 
     * @summary テナントの招待一覧を取得(Get Tenant Invitations)
     * @param {string} tenantId テナントID(Tenant ID)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InvitationApi
     */
    public getTenantInvitations(tenantId: string, options?: AxiosRequestConfig) {
        return InvitationApiFp(this.configuration).getTenantInvitations(tenantId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * テナントへの招待を検証します。  Validate an invitation to the tenant. 
     * @summary テナントへの招待を検証(Validate Invitation)
     * @param {string} invitationId 招待ID(Invitation ID)
     * @param {ValidateInvitationParam} [validateInvitationParam] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InvitationApi
     */
    public validateInvitation(invitationId: string, validateInvitationParam?: ValidateInvitationParam, options?: AxiosRequestConfig) {
        return InvitationApiFp(this.configuration).validateInvitation(invitationId, validateInvitationParam, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * RoleApi - axios parameter creator
 * @export
 */
export const RoleApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 役割(ロール)を作成します。 ここで作成した役割をユーザーに付与することによって、SaaS側で役割ベースの認可を実装することが用意になります。 また、同じユーザーでも、属するテナント・環境ごとに持っている役割を変えることが可能です。  Create a role. By granting users the roles created here, it becomes easier to implement role-based authorization on the SaaS side. In addition, even the same user can have different roles for each tenant/environment to which they belong. 
         * @summary 役割(ロール)を作成(Create Role)
         * @param {Role} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createRole: async (body?: Role, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/roles`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 役割(ロール)を削除します。  Delete role. 
         * @summary 役割(ロール)を削除(Delete Role)
         * @param {string} roleName 役割(ロール)名(role name)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteRole: async (roleName: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'roleName' is not null or undefined
            assertParamExists('deleteRole', 'roleName', roleName)
            const localVarPath = `/roles/{role_name}`
                .replace(`{${"role_name"}}`, encodeURIComponent(String(roleName)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 登録されている役割(ロール)を一覧として取得します。 ここで定義した役割をユーザーに付与することによって、SaaS側で役割ベースの認可を実装することが用意になります。 また、同じユーザーでも、属するテナント・環境ごとに持っている役割を変えることが可能です。  Get registered roles list. Granting users the roles defined here makes it easy to implement role-based authorization on the SaaS side. In addition, even the same user can have different roles for each tenant/environment to which they belong. 
         * @summary 役割(ロール)一覧を取得(Get Roles)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRoles: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/roles`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * RoleApi - functional programming interface
 * @export
 */
export const RoleApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = RoleApiAxiosParamCreator(configuration)
    return {
        /**
         * 役割(ロール)を作成します。 ここで作成した役割をユーザーに付与することによって、SaaS側で役割ベースの認可を実装することが用意になります。 また、同じユーザーでも、属するテナント・環境ごとに持っている役割を変えることが可能です。  Create a role. By granting users the roles created here, it becomes easier to implement role-based authorization on the SaaS side. In addition, even the same user can have different roles for each tenant/environment to which they belong. 
         * @summary 役割(ロール)を作成(Create Role)
         * @param {Role} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createRole(body?: Role, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Role>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createRole(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 役割(ロール)を削除します。  Delete role. 
         * @summary 役割(ロール)を削除(Delete Role)
         * @param {string} roleName 役割(ロール)名(role name)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteRole(roleName: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteRole(roleName, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 登録されている役割(ロール)を一覧として取得します。 ここで定義した役割をユーザーに付与することによって、SaaS側で役割ベースの認可を実装することが用意になります。 また、同じユーザーでも、属するテナント・環境ごとに持っている役割を変えることが可能です。  Get registered roles list. Granting users the roles defined here makes it easy to implement role-based authorization on the SaaS side. In addition, even the same user can have different roles for each tenant/environment to which they belong. 
         * @summary 役割(ロール)一覧を取得(Get Roles)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getRoles(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Roles>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getRoles(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * RoleApi - factory interface
 * @export
 */
export const RoleApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = RoleApiFp(configuration)
    return {
        /**
         * 役割(ロール)を作成します。 ここで作成した役割をユーザーに付与することによって、SaaS側で役割ベースの認可を実装することが用意になります。 また、同じユーザーでも、属するテナント・環境ごとに持っている役割を変えることが可能です。  Create a role. By granting users the roles created here, it becomes easier to implement role-based authorization on the SaaS side. In addition, even the same user can have different roles for each tenant/environment to which they belong. 
         * @summary 役割(ロール)を作成(Create Role)
         * @param {Role} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createRole(body?: Role, options?: any): AxiosPromise<Role> {
            return localVarFp.createRole(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 役割(ロール)を削除します。  Delete role. 
         * @summary 役割(ロール)を削除(Delete Role)
         * @param {string} roleName 役割(ロール)名(role name)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteRole(roleName: string, options?: any): AxiosPromise<void> {
            return localVarFp.deleteRole(roleName, options).then((request) => request(axios, basePath));
        },
        /**
         * 登録されている役割(ロール)を一覧として取得します。 ここで定義した役割をユーザーに付与することによって、SaaS側で役割ベースの認可を実装することが用意になります。 また、同じユーザーでも、属するテナント・環境ごとに持っている役割を変えることが可能です。  Get registered roles list. Granting users the roles defined here makes it easy to implement role-based authorization on the SaaS side. In addition, even the same user can have different roles for each tenant/environment to which they belong. 
         * @summary 役割(ロール)一覧を取得(Get Roles)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRoles(options?: any): AxiosPromise<Roles> {
            return localVarFp.getRoles(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * RoleApi - object-oriented interface
 * @export
 * @class RoleApi
 * @extends {BaseAPI}
 */
export class RoleApi extends BaseAPI {
    /**
     * 役割(ロール)を作成します。 ここで作成した役割をユーザーに付与することによって、SaaS側で役割ベースの認可を実装することが用意になります。 また、同じユーザーでも、属するテナント・環境ごとに持っている役割を変えることが可能です。  Create a role. By granting users the roles created here, it becomes easier to implement role-based authorization on the SaaS side. In addition, even the same user can have different roles for each tenant/environment to which they belong. 
     * @summary 役割(ロール)を作成(Create Role)
     * @param {Role} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RoleApi
     */
    public createRole(body?: Role, options?: AxiosRequestConfig) {
        return RoleApiFp(this.configuration).createRole(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 役割(ロール)を削除します。  Delete role. 
     * @summary 役割(ロール)を削除(Delete Role)
     * @param {string} roleName 役割(ロール)名(role name)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RoleApi
     */
    public deleteRole(roleName: string, options?: AxiosRequestConfig) {
        return RoleApiFp(this.configuration).deleteRole(roleName, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 登録されている役割(ロール)を一覧として取得します。 ここで定義した役割をユーザーに付与することによって、SaaS側で役割ベースの認可を実装することが用意になります。 また、同じユーザーでも、属するテナント・環境ごとに持っている役割を変えることが可能です。  Get registered roles list. Granting users the roles defined here makes it easy to implement role-based authorization on the SaaS side. In addition, even the same user can have different roles for each tenant/environment to which they belong. 
     * @summary 役割(ロール)一覧を取得(Get Roles)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RoleApi
     */
    public getRoles(options?: AxiosRequestConfig) {
        return RoleApiFp(this.configuration).getRoles(options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * SaasUserApi - axios parameter creator
 * @export
 */
export const SaasUserApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * ユーザーのメールアドレス変更確認のためにコードを検証します。 ユーザーのアクセストークンが必要です。  Verify the code to confirm the user\'s email address update. Requires the user\'s access token. 
         * @summary ユーザーのメールアドレス変更確認(Confirm User Email Update)
         * @param {string} userId ユーザーID(User ID)
         * @param {ConfirmEmailUpdateParam} [confirmEmailUpdateParam] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        confirmEmailUpdate: async (userId: string, confirmEmailUpdateParam?: ConfirmEmailUpdateParam, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('confirmEmailUpdate', 'userId', userId)
            const localVarPath = `/users/{user_id}/email/confirm`
                .replace(`{${"user_id"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(confirmEmailUpdateParam, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 外部アカウントのユーザー連携確認のためにコードを検証します。  Verify the code for external account user link confirmation. 
         * @summary 外部アカウントのユーザーの連携確認(Confirm External User Account Link)
         * @param {ConfirmExternalUserLinkParam} [confirmExternalUserLinkParam] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        confirmExternalUserLink: async (confirmExternalUserLinkParam?: ConfirmExternalUserLinkParam, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/external-users/confirm`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(confirmExternalUserLinkParam, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * AWS Marketplaceと連携したユーザー新規登録を確定します。AWS Marketplaceと連携したテナントを新規作成します。 Registration Tokenが有効でない場合はエラーを返却します。  Confirm a new use registeration linked to AWS Marketplace. Create a new tenant linked to AWS Marketplace. If the Registration Token is not valid, an error is returned. 
         * @summary AWS Marketplaceによるユーザー新規登録の確定(Confirm Sign Up with AWS Marketplace)
         * @param {ConfirmSignUpWithAwsMarketplaceParam} [confirmSignUpWithAwsMarketplaceParam] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        confirmSignUpWithAwsMarketplace: async (confirmSignUpWithAwsMarketplaceParam?: ConfirmSignUpWithAwsMarketplaceParam, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/aws-marketplace/sign-up-confirm`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(confirmSignUpWithAwsMarketplaceParam, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * SaaSにユーザーを作成します。  Create SaaS User. 
         * @summary SaaSにユーザーを作成(Create SaaS User)
         * @param {CreateSaasUserParam} [createSaasUserParam] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createSaasUser: async (createSaasUserParam?: CreateSaasUserParam, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/users`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createSaasUserParam, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 認証アプリケーション登録用のシークレットコードを作成します。  Create a secret code for authentication application registration. 
         * @summary 認証アプリケーション登録用のシークレットコードを作成(Creates secret code for authentication application registration)
         * @param {string} userId ユーザーID(User ID)
         * @param {CreateSecretCodeParam} [createSecretCodeParam] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createSecretCode: async (userId: string, createSecretCodeParam?: CreateSecretCodeParam, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('createSecretCode', 'userId', userId)
            const localVarPath = `/users/{user_id}/mfa/software-token/secret-code`
                .replace(`{${"user_id"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createSecretCodeParam, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ユーザーIDを元に一致するユーザーをテナントからすべて削除し、SaaSからも削除します。  Delete all users with matching user ID from the tenant and SaaS. 
         * @summary ユーザー情報を削除(Delete User)
         * @param {string} userId ユーザーID(User ID)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteSaasUser: async (userId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('deleteSaasUser', 'userId', userId)
            const localVarPath = `/users/{user_id}`
                .replace(`{${"user_id"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ユーザーIDからユーザー情報を取得します。  Get user information based on user ID. 
         * @summary ユーザー情報を取得(Get User)
         * @param {string} userId ユーザーID(User ID)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSaasUser: async (userId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('getSaasUser', 'userId', userId)
            const localVarPath = `/users/{user_id}`
                .replace(`{${"user_id"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * SaaSのユーザー全件を取得します。  Get all SaaS users. 
         * @summary ユーザー一覧を取得(Get Users)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSaasUsers: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/users`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ユーザーのMFA設定を取得します。  Get the user\'s MFA settings. 
         * @summary ユーザーのMFA設定を取得(Get User\'s MFA Settings)
         * @param {string} userId ユーザーID(User ID)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserMfaPreference: async (userId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('getUserMfaPreference', 'userId', userId)
            const localVarPath = `/users/{user_id}/mfa/preference`
                .replace(`{${"user_id"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * AWS Marketplaceと既存のテナントを連携します。 Registration Tokenが有効でない場合はエラーを返却します。  Link an existing tenant with AWS Marketplace. If the Registration Token is not valid, an error is returned. 
         * @summary AWS Marketplaceと既存のテナントの連携(Link an existing tenant with AWS Marketplace)
         * @param {LinkAwsMarketplaceParam} [linkAwsMarketplaceParam] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        linkAwsMarketplace: async (linkAwsMarketplaceParam?: LinkAwsMarketplaceParam, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/aws-marketplace/link`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(linkAwsMarketplaceParam, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ユーザーのメールアドレス変更を要求します。 要求されたメールアドレスに対して検証コードを送信します。 ユーザーのアクセストークンが必要です。 検証コードの有効期限は24時間です。  Request to update the user\'s email address. Sends a verification code to the requested email address. Requires the user\'s access token. The verification code is valid for 24 hours. 
         * @summary ユーザーのメールアドレス変更要求(Request User Email Update)
         * @param {string} userId ユーザーID(User ID)
         * @param {RequestEmailUpdateParam} [requestEmailUpdateParam] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        requestEmailUpdate: async (userId: string, requestEmailUpdateParam?: RequestEmailUpdateParam, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('requestEmailUpdate', 'userId', userId)
            const localVarPath = `/users/{user_id}/email/request`
                .replace(`{${"user_id"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(requestEmailUpdateParam, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 外部アカウントのユーザー連携を要求します。 アクセストークンから連携するユーザーのメールアドレスを取得し、そのメールアドレスに対して検証コードを送信します。 検証コードの有効期限は24時間です。  Request to link an external account user. Get the email address of the user to be linked from the access token and send a verification code to that email address. The verification code is valid for 24 hours. 
         * @summary 外部アカウントのユーザー連携要求(Request External User Account Link)
         * @param {RequestExternalUserLinkParam} [requestExternalUserLinkParam] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        requestExternalUserLink: async (requestExternalUserLinkParam?: RequestExternalUserLinkParam, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/external-users/request`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(requestExternalUserLinkParam, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 新規登録時の仮パスワードを再送信します。  Resend temporary password for the new registered user. 
         * @summary 新規登録時の確認メール再送信(Resend Sign Up Confirmation Email)
         * @param {ResendSignUpConfirmationEmailParam} [resendSignUpConfirmationEmailParam] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        resendSignUpConfirmationEmail: async (resendSignUpConfirmationEmailParam?: ResendSignUpConfirmationEmailParam, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/sign-up/resend`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(resendSignUpConfirmationEmailParam, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ユーザーを新規登録します。登録されたメールアドレスに対して仮パスワードを送信します。  Register a new user. A temporary password will be sent to the registered email. 
         * @summary 新規登録(Sign Up)
         * @param {SignUpParam} [signUpParam] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        signUp: async (signUpParam?: SignUpParam, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/sign-up`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(signUpParam, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * AWS Marketplaceと連携したユーザーを新規登録します。登録されたメールアドレスに対して仮パスワードを送信します。 Registration Tokenが有効でない場合はエラーを返却します。  Register a new user linked to AWS Marketplace. A temporary password will be sent to the registered email. If the Registration Token is not valid, an error is returned. 
         * @summary AWS Marketplaceによるユーザー新規登録(Sign Up with AWS Marketplace)
         * @param {SignUpWithAwsMarketplaceParam} [signUpWithAwsMarketplaceParam] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        signUpWithAwsMarketplace: async (signUpWithAwsMarketplaceParam?: SignUpWithAwsMarketplaceParam, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/aws-marketplace/sign-up`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(signUpWithAwsMarketplaceParam, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 外部IDプロバイダの連携を解除します。  Unlink external identity providers. 
         * @summary 外部IDプロバイダの連携解除(Unlink external identity providers)
         * @param {string} providerName 
         * @param {string} userId ユーザーID(User ID)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        unlinkProvider: async (providerName: string, userId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'providerName' is not null or undefined
            assertParamExists('unlinkProvider', 'providerName', providerName)
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('unlinkProvider', 'userId', userId)
            const localVarPath = `/users/{user_id}/providers/{provider_name}`
                .replace(`{${"provider_name"}}`, encodeURIComponent(String(providerName)))
                .replace(`{${"user_id"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ユーザーのメールアドレスを変更します。  Change user\'s email. 
         * @summary メールアドレスを変更(Change Email)
         * @param {string} userId ユーザーID(User ID)
         * @param {UpdateSaasUserEmailParam} [updateSaasUserEmailParam] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateSaasUserEmail: async (userId: string, updateSaasUserEmailParam?: UpdateSaasUserEmailParam, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('updateSaasUserEmail', 'userId', userId)
            const localVarPath = `/users/{user_id}/email`
                .replace(`{${"user_id"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateSaasUserEmailParam, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ユーザーのログインパスワードを変更します。  Change user\'s login password. 
         * @summary パスワードを変更(Change Password)
         * @param {string} userId ユーザーID(User ID)
         * @param {UpdateSaasUserPasswordParam} [updateSaasUserPasswordParam] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateSaasUserPassword: async (userId: string, updateSaasUserPasswordParam?: UpdateSaasUserPasswordParam, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('updateSaasUserPassword', 'userId', userId)
            const localVarPath = `/users/{user_id}/password`
                .replace(`{${"user_id"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateSaasUserPasswordParam, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 認証アプリケーションを登録します。  Register an authentication application. 
         * @summary 認証アプリケーションを登録(Register Authentication Application)
         * @param {string} userId ユーザーID(User ID)
         * @param {UpdateSoftwareTokenParam} [updateSoftwareTokenParam] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateSoftwareToken: async (userId: string, updateSoftwareTokenParam?: UpdateSoftwareTokenParam, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('updateSoftwareToken', 'userId', userId)
            const localVarPath = `/users/{user_id}/mfa/software-token`
                .replace(`{${"user_id"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateSoftwareTokenParam, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ユーザーのMFA設定を更新します。  Update user\'s MFA settings. 
         * @summary ユーザーのMFA設定を更新(Update User\'s MFA Settings)
         * @param {string} userId ユーザーID(User ID)
         * @param {MfaPreference} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUserMfaPreference: async (userId: string, body?: MfaPreference, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('updateUserMfaPreference', 'userId', userId)
            const localVarPath = `/users/{user_id}/mfa/preference`
                .replace(`{${"user_id"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SaasUserApi - functional programming interface
 * @export
 */
export const SaasUserApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = SaasUserApiAxiosParamCreator(configuration)
    return {
        /**
         * ユーザーのメールアドレス変更確認のためにコードを検証します。 ユーザーのアクセストークンが必要です。  Verify the code to confirm the user\'s email address update. Requires the user\'s access token. 
         * @summary ユーザーのメールアドレス変更確認(Confirm User Email Update)
         * @param {string} userId ユーザーID(User ID)
         * @param {ConfirmEmailUpdateParam} [confirmEmailUpdateParam] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async confirmEmailUpdate(userId: string, confirmEmailUpdateParam?: ConfirmEmailUpdateParam, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.confirmEmailUpdate(userId, confirmEmailUpdateParam, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 外部アカウントのユーザー連携確認のためにコードを検証します。  Verify the code for external account user link confirmation. 
         * @summary 外部アカウントのユーザーの連携確認(Confirm External User Account Link)
         * @param {ConfirmExternalUserLinkParam} [confirmExternalUserLinkParam] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async confirmExternalUserLink(confirmExternalUserLinkParam?: ConfirmExternalUserLinkParam, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.confirmExternalUserLink(confirmExternalUserLinkParam, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * AWS Marketplaceと連携したユーザー新規登録を確定します。AWS Marketplaceと連携したテナントを新規作成します。 Registration Tokenが有効でない場合はエラーを返却します。  Confirm a new use registeration linked to AWS Marketplace. Create a new tenant linked to AWS Marketplace. If the Registration Token is not valid, an error is returned. 
         * @summary AWS Marketplaceによるユーザー新規登録の確定(Confirm Sign Up with AWS Marketplace)
         * @param {ConfirmSignUpWithAwsMarketplaceParam} [confirmSignUpWithAwsMarketplaceParam] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async confirmSignUpWithAwsMarketplace(confirmSignUpWithAwsMarketplaceParam?: ConfirmSignUpWithAwsMarketplaceParam, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Tenant>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.confirmSignUpWithAwsMarketplace(confirmSignUpWithAwsMarketplaceParam, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * SaaSにユーザーを作成します。  Create SaaS User. 
         * @summary SaaSにユーザーを作成(Create SaaS User)
         * @param {CreateSaasUserParam} [createSaasUserParam] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createSaasUser(createSaasUserParam?: CreateSaasUserParam, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SaasUser>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createSaasUser(createSaasUserParam, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 認証アプリケーション登録用のシークレットコードを作成します。  Create a secret code for authentication application registration. 
         * @summary 認証アプリケーション登録用のシークレットコードを作成(Creates secret code for authentication application registration)
         * @param {string} userId ユーザーID(User ID)
         * @param {CreateSecretCodeParam} [createSecretCodeParam] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createSecretCode(userId: string, createSecretCodeParam?: CreateSecretCodeParam, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SoftwareTokenSecretCode>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createSecretCode(userId, createSecretCodeParam, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * ユーザーIDを元に一致するユーザーをテナントからすべて削除し、SaaSからも削除します。  Delete all users with matching user ID from the tenant and SaaS. 
         * @summary ユーザー情報を削除(Delete User)
         * @param {string} userId ユーザーID(User ID)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteSaasUser(userId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteSaasUser(userId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * ユーザーIDからユーザー情報を取得します。  Get user information based on user ID. 
         * @summary ユーザー情報を取得(Get User)
         * @param {string} userId ユーザーID(User ID)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSaasUser(userId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SaasUser>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSaasUser(userId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * SaaSのユーザー全件を取得します。  Get all SaaS users. 
         * @summary ユーザー一覧を取得(Get Users)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSaasUsers(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SaasUsers>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSaasUsers(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * ユーザーのMFA設定を取得します。  Get the user\'s MFA settings. 
         * @summary ユーザーのMFA設定を取得(Get User\'s MFA Settings)
         * @param {string} userId ユーザーID(User ID)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUserMfaPreference(userId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MfaPreference>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUserMfaPreference(userId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * AWS Marketplaceと既存のテナントを連携します。 Registration Tokenが有効でない場合はエラーを返却します。  Link an existing tenant with AWS Marketplace. If the Registration Token is not valid, an error is returned. 
         * @summary AWS Marketplaceと既存のテナントの連携(Link an existing tenant with AWS Marketplace)
         * @param {LinkAwsMarketplaceParam} [linkAwsMarketplaceParam] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async linkAwsMarketplace(linkAwsMarketplaceParam?: LinkAwsMarketplaceParam, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.linkAwsMarketplace(linkAwsMarketplaceParam, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * ユーザーのメールアドレス変更を要求します。 要求されたメールアドレスに対して検証コードを送信します。 ユーザーのアクセストークンが必要です。 検証コードの有効期限は24時間です。  Request to update the user\'s email address. Sends a verification code to the requested email address. Requires the user\'s access token. The verification code is valid for 24 hours. 
         * @summary ユーザーのメールアドレス変更要求(Request User Email Update)
         * @param {string} userId ユーザーID(User ID)
         * @param {RequestEmailUpdateParam} [requestEmailUpdateParam] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async requestEmailUpdate(userId: string, requestEmailUpdateParam?: RequestEmailUpdateParam, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.requestEmailUpdate(userId, requestEmailUpdateParam, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 外部アカウントのユーザー連携を要求します。 アクセストークンから連携するユーザーのメールアドレスを取得し、そのメールアドレスに対して検証コードを送信します。 検証コードの有効期限は24時間です。  Request to link an external account user. Get the email address of the user to be linked from the access token and send a verification code to that email address. The verification code is valid for 24 hours. 
         * @summary 外部アカウントのユーザー連携要求(Request External User Account Link)
         * @param {RequestExternalUserLinkParam} [requestExternalUserLinkParam] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async requestExternalUserLink(requestExternalUserLinkParam?: RequestExternalUserLinkParam, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.requestExternalUserLink(requestExternalUserLinkParam, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 新規登録時の仮パスワードを再送信します。  Resend temporary password for the new registered user. 
         * @summary 新規登録時の確認メール再送信(Resend Sign Up Confirmation Email)
         * @param {ResendSignUpConfirmationEmailParam} [resendSignUpConfirmationEmailParam] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async resendSignUpConfirmationEmail(resendSignUpConfirmationEmailParam?: ResendSignUpConfirmationEmailParam, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.resendSignUpConfirmationEmail(resendSignUpConfirmationEmailParam, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * ユーザーを新規登録します。登録されたメールアドレスに対して仮パスワードを送信します。  Register a new user. A temporary password will be sent to the registered email. 
         * @summary 新規登録(Sign Up)
         * @param {SignUpParam} [signUpParam] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async signUp(signUpParam?: SignUpParam, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SaasUser>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.signUp(signUpParam, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * AWS Marketplaceと連携したユーザーを新規登録します。登録されたメールアドレスに対して仮パスワードを送信します。 Registration Tokenが有効でない場合はエラーを返却します。  Register a new user linked to AWS Marketplace. A temporary password will be sent to the registered email. If the Registration Token is not valid, an error is returned. 
         * @summary AWS Marketplaceによるユーザー新規登録(Sign Up with AWS Marketplace)
         * @param {SignUpWithAwsMarketplaceParam} [signUpWithAwsMarketplaceParam] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async signUpWithAwsMarketplace(signUpWithAwsMarketplaceParam?: SignUpWithAwsMarketplaceParam, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SaasUser>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.signUpWithAwsMarketplace(signUpWithAwsMarketplaceParam, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 外部IDプロバイダの連携を解除します。  Unlink external identity providers. 
         * @summary 外部IDプロバイダの連携解除(Unlink external identity providers)
         * @param {string} providerName 
         * @param {string} userId ユーザーID(User ID)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async unlinkProvider(providerName: string, userId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.unlinkProvider(providerName, userId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * ユーザーのメールアドレスを変更します。  Change user\'s email. 
         * @summary メールアドレスを変更(Change Email)
         * @param {string} userId ユーザーID(User ID)
         * @param {UpdateSaasUserEmailParam} [updateSaasUserEmailParam] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateSaasUserEmail(userId: string, updateSaasUserEmailParam?: UpdateSaasUserEmailParam, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateSaasUserEmail(userId, updateSaasUserEmailParam, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * ユーザーのログインパスワードを変更します。  Change user\'s login password. 
         * @summary パスワードを変更(Change Password)
         * @param {string} userId ユーザーID(User ID)
         * @param {UpdateSaasUserPasswordParam} [updateSaasUserPasswordParam] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateSaasUserPassword(userId: string, updateSaasUserPasswordParam?: UpdateSaasUserPasswordParam, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateSaasUserPassword(userId, updateSaasUserPasswordParam, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 認証アプリケーションを登録します。  Register an authentication application. 
         * @summary 認証アプリケーションを登録(Register Authentication Application)
         * @param {string} userId ユーザーID(User ID)
         * @param {UpdateSoftwareTokenParam} [updateSoftwareTokenParam] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateSoftwareToken(userId: string, updateSoftwareTokenParam?: UpdateSoftwareTokenParam, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateSoftwareToken(userId, updateSoftwareTokenParam, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * ユーザーのMFA設定を更新します。  Update user\'s MFA settings. 
         * @summary ユーザーのMFA設定を更新(Update User\'s MFA Settings)
         * @param {string} userId ユーザーID(User ID)
         * @param {MfaPreference} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateUserMfaPreference(userId: string, body?: MfaPreference, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateUserMfaPreference(userId, body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * SaasUserApi - factory interface
 * @export
 */
export const SaasUserApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = SaasUserApiFp(configuration)
    return {
        /**
         * ユーザーのメールアドレス変更確認のためにコードを検証します。 ユーザーのアクセストークンが必要です。  Verify the code to confirm the user\'s email address update. Requires the user\'s access token. 
         * @summary ユーザーのメールアドレス変更確認(Confirm User Email Update)
         * @param {string} userId ユーザーID(User ID)
         * @param {ConfirmEmailUpdateParam} [confirmEmailUpdateParam] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        confirmEmailUpdate(userId: string, confirmEmailUpdateParam?: ConfirmEmailUpdateParam, options?: any): AxiosPromise<void> {
            return localVarFp.confirmEmailUpdate(userId, confirmEmailUpdateParam, options).then((request) => request(axios, basePath));
        },
        /**
         * 外部アカウントのユーザー連携確認のためにコードを検証します。  Verify the code for external account user link confirmation. 
         * @summary 外部アカウントのユーザーの連携確認(Confirm External User Account Link)
         * @param {ConfirmExternalUserLinkParam} [confirmExternalUserLinkParam] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        confirmExternalUserLink(confirmExternalUserLinkParam?: ConfirmExternalUserLinkParam, options?: any): AxiosPromise<void> {
            return localVarFp.confirmExternalUserLink(confirmExternalUserLinkParam, options).then((request) => request(axios, basePath));
        },
        /**
         * AWS Marketplaceと連携したユーザー新規登録を確定します。AWS Marketplaceと連携したテナントを新規作成します。 Registration Tokenが有効でない場合はエラーを返却します。  Confirm a new use registeration linked to AWS Marketplace. Create a new tenant linked to AWS Marketplace. If the Registration Token is not valid, an error is returned. 
         * @summary AWS Marketplaceによるユーザー新規登録の確定(Confirm Sign Up with AWS Marketplace)
         * @param {ConfirmSignUpWithAwsMarketplaceParam} [confirmSignUpWithAwsMarketplaceParam] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        confirmSignUpWithAwsMarketplace(confirmSignUpWithAwsMarketplaceParam?: ConfirmSignUpWithAwsMarketplaceParam, options?: any): AxiosPromise<Tenant> {
            return localVarFp.confirmSignUpWithAwsMarketplace(confirmSignUpWithAwsMarketplaceParam, options).then((request) => request(axios, basePath));
        },
        /**
         * SaaSにユーザーを作成します。  Create SaaS User. 
         * @summary SaaSにユーザーを作成(Create SaaS User)
         * @param {CreateSaasUserParam} [createSaasUserParam] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createSaasUser(createSaasUserParam?: CreateSaasUserParam, options?: any): AxiosPromise<SaasUser> {
            return localVarFp.createSaasUser(createSaasUserParam, options).then((request) => request(axios, basePath));
        },
        /**
         * 認証アプリケーション登録用のシークレットコードを作成します。  Create a secret code for authentication application registration. 
         * @summary 認証アプリケーション登録用のシークレットコードを作成(Creates secret code for authentication application registration)
         * @param {string} userId ユーザーID(User ID)
         * @param {CreateSecretCodeParam} [createSecretCodeParam] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createSecretCode(userId: string, createSecretCodeParam?: CreateSecretCodeParam, options?: any): AxiosPromise<SoftwareTokenSecretCode> {
            return localVarFp.createSecretCode(userId, createSecretCodeParam, options).then((request) => request(axios, basePath));
        },
        /**
         * ユーザーIDを元に一致するユーザーをテナントからすべて削除し、SaaSからも削除します。  Delete all users with matching user ID from the tenant and SaaS. 
         * @summary ユーザー情報を削除(Delete User)
         * @param {string} userId ユーザーID(User ID)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteSaasUser(userId: string, options?: any): AxiosPromise<void> {
            return localVarFp.deleteSaasUser(userId, options).then((request) => request(axios, basePath));
        },
        /**
         * ユーザーIDからユーザー情報を取得します。  Get user information based on user ID. 
         * @summary ユーザー情報を取得(Get User)
         * @param {string} userId ユーザーID(User ID)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSaasUser(userId: string, options?: any): AxiosPromise<SaasUser> {
            return localVarFp.getSaasUser(userId, options).then((request) => request(axios, basePath));
        },
        /**
         * SaaSのユーザー全件を取得します。  Get all SaaS users. 
         * @summary ユーザー一覧を取得(Get Users)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSaasUsers(options?: any): AxiosPromise<SaasUsers> {
            return localVarFp.getSaasUsers(options).then((request) => request(axios, basePath));
        },
        /**
         * ユーザーのMFA設定を取得します。  Get the user\'s MFA settings. 
         * @summary ユーザーのMFA設定を取得(Get User\'s MFA Settings)
         * @param {string} userId ユーザーID(User ID)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserMfaPreference(userId: string, options?: any): AxiosPromise<MfaPreference> {
            return localVarFp.getUserMfaPreference(userId, options).then((request) => request(axios, basePath));
        },
        /**
         * AWS Marketplaceと既存のテナントを連携します。 Registration Tokenが有効でない場合はエラーを返却します。  Link an existing tenant with AWS Marketplace. If the Registration Token is not valid, an error is returned. 
         * @summary AWS Marketplaceと既存のテナントの連携(Link an existing tenant with AWS Marketplace)
         * @param {LinkAwsMarketplaceParam} [linkAwsMarketplaceParam] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        linkAwsMarketplace(linkAwsMarketplaceParam?: LinkAwsMarketplaceParam, options?: any): AxiosPromise<void> {
            return localVarFp.linkAwsMarketplace(linkAwsMarketplaceParam, options).then((request) => request(axios, basePath));
        },
        /**
         * ユーザーのメールアドレス変更を要求します。 要求されたメールアドレスに対して検証コードを送信します。 ユーザーのアクセストークンが必要です。 検証コードの有効期限は24時間です。  Request to update the user\'s email address. Sends a verification code to the requested email address. Requires the user\'s access token. The verification code is valid for 24 hours. 
         * @summary ユーザーのメールアドレス変更要求(Request User Email Update)
         * @param {string} userId ユーザーID(User ID)
         * @param {RequestEmailUpdateParam} [requestEmailUpdateParam] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        requestEmailUpdate(userId: string, requestEmailUpdateParam?: RequestEmailUpdateParam, options?: any): AxiosPromise<void> {
            return localVarFp.requestEmailUpdate(userId, requestEmailUpdateParam, options).then((request) => request(axios, basePath));
        },
        /**
         * 外部アカウントのユーザー連携を要求します。 アクセストークンから連携するユーザーのメールアドレスを取得し、そのメールアドレスに対して検証コードを送信します。 検証コードの有効期限は24時間です。  Request to link an external account user. Get the email address of the user to be linked from the access token and send a verification code to that email address. The verification code is valid for 24 hours. 
         * @summary 外部アカウントのユーザー連携要求(Request External User Account Link)
         * @param {RequestExternalUserLinkParam} [requestExternalUserLinkParam] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        requestExternalUserLink(requestExternalUserLinkParam?: RequestExternalUserLinkParam, options?: any): AxiosPromise<void> {
            return localVarFp.requestExternalUserLink(requestExternalUserLinkParam, options).then((request) => request(axios, basePath));
        },
        /**
         * 新規登録時の仮パスワードを再送信します。  Resend temporary password for the new registered user. 
         * @summary 新規登録時の確認メール再送信(Resend Sign Up Confirmation Email)
         * @param {ResendSignUpConfirmationEmailParam} [resendSignUpConfirmationEmailParam] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        resendSignUpConfirmationEmail(resendSignUpConfirmationEmailParam?: ResendSignUpConfirmationEmailParam, options?: any): AxiosPromise<void> {
            return localVarFp.resendSignUpConfirmationEmail(resendSignUpConfirmationEmailParam, options).then((request) => request(axios, basePath));
        },
        /**
         * ユーザーを新規登録します。登録されたメールアドレスに対して仮パスワードを送信します。  Register a new user. A temporary password will be sent to the registered email. 
         * @summary 新規登録(Sign Up)
         * @param {SignUpParam} [signUpParam] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        signUp(signUpParam?: SignUpParam, options?: any): AxiosPromise<SaasUser> {
            return localVarFp.signUp(signUpParam, options).then((request) => request(axios, basePath));
        },
        /**
         * AWS Marketplaceと連携したユーザーを新規登録します。登録されたメールアドレスに対して仮パスワードを送信します。 Registration Tokenが有効でない場合はエラーを返却します。  Register a new user linked to AWS Marketplace. A temporary password will be sent to the registered email. If the Registration Token is not valid, an error is returned. 
         * @summary AWS Marketplaceによるユーザー新規登録(Sign Up with AWS Marketplace)
         * @param {SignUpWithAwsMarketplaceParam} [signUpWithAwsMarketplaceParam] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        signUpWithAwsMarketplace(signUpWithAwsMarketplaceParam?: SignUpWithAwsMarketplaceParam, options?: any): AxiosPromise<SaasUser> {
            return localVarFp.signUpWithAwsMarketplace(signUpWithAwsMarketplaceParam, options).then((request) => request(axios, basePath));
        },
        /**
         * 外部IDプロバイダの連携を解除します。  Unlink external identity providers. 
         * @summary 外部IDプロバイダの連携解除(Unlink external identity providers)
         * @param {string} providerName 
         * @param {string} userId ユーザーID(User ID)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        unlinkProvider(providerName: string, userId: string, options?: any): AxiosPromise<void> {
            return localVarFp.unlinkProvider(providerName, userId, options).then((request) => request(axios, basePath));
        },
        /**
         * ユーザーのメールアドレスを変更します。  Change user\'s email. 
         * @summary メールアドレスを変更(Change Email)
         * @param {string} userId ユーザーID(User ID)
         * @param {UpdateSaasUserEmailParam} [updateSaasUserEmailParam] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateSaasUserEmail(userId: string, updateSaasUserEmailParam?: UpdateSaasUserEmailParam, options?: any): AxiosPromise<void> {
            return localVarFp.updateSaasUserEmail(userId, updateSaasUserEmailParam, options).then((request) => request(axios, basePath));
        },
        /**
         * ユーザーのログインパスワードを変更します。  Change user\'s login password. 
         * @summary パスワードを変更(Change Password)
         * @param {string} userId ユーザーID(User ID)
         * @param {UpdateSaasUserPasswordParam} [updateSaasUserPasswordParam] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateSaasUserPassword(userId: string, updateSaasUserPasswordParam?: UpdateSaasUserPasswordParam, options?: any): AxiosPromise<void> {
            return localVarFp.updateSaasUserPassword(userId, updateSaasUserPasswordParam, options).then((request) => request(axios, basePath));
        },
        /**
         * 認証アプリケーションを登録します。  Register an authentication application. 
         * @summary 認証アプリケーションを登録(Register Authentication Application)
         * @param {string} userId ユーザーID(User ID)
         * @param {UpdateSoftwareTokenParam} [updateSoftwareTokenParam] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateSoftwareToken(userId: string, updateSoftwareTokenParam?: UpdateSoftwareTokenParam, options?: any): AxiosPromise<void> {
            return localVarFp.updateSoftwareToken(userId, updateSoftwareTokenParam, options).then((request) => request(axios, basePath));
        },
        /**
         * ユーザーのMFA設定を更新します。  Update user\'s MFA settings. 
         * @summary ユーザーのMFA設定を更新(Update User\'s MFA Settings)
         * @param {string} userId ユーザーID(User ID)
         * @param {MfaPreference} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUserMfaPreference(userId: string, body?: MfaPreference, options?: any): AxiosPromise<void> {
            return localVarFp.updateUserMfaPreference(userId, body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * SaasUserApi - object-oriented interface
 * @export
 * @class SaasUserApi
 * @extends {BaseAPI}
 */
export class SaasUserApi extends BaseAPI {
    /**
     * ユーザーのメールアドレス変更確認のためにコードを検証します。 ユーザーのアクセストークンが必要です。  Verify the code to confirm the user\'s email address update. Requires the user\'s access token. 
     * @summary ユーザーのメールアドレス変更確認(Confirm User Email Update)
     * @param {string} userId ユーザーID(User ID)
     * @param {ConfirmEmailUpdateParam} [confirmEmailUpdateParam] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SaasUserApi
     */
    public confirmEmailUpdate(userId: string, confirmEmailUpdateParam?: ConfirmEmailUpdateParam, options?: AxiosRequestConfig) {
        return SaasUserApiFp(this.configuration).confirmEmailUpdate(userId, confirmEmailUpdateParam, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 外部アカウントのユーザー連携確認のためにコードを検証します。  Verify the code for external account user link confirmation. 
     * @summary 外部アカウントのユーザーの連携確認(Confirm External User Account Link)
     * @param {ConfirmExternalUserLinkParam} [confirmExternalUserLinkParam] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SaasUserApi
     */
    public confirmExternalUserLink(confirmExternalUserLinkParam?: ConfirmExternalUserLinkParam, options?: AxiosRequestConfig) {
        return SaasUserApiFp(this.configuration).confirmExternalUserLink(confirmExternalUserLinkParam, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * AWS Marketplaceと連携したユーザー新規登録を確定します。AWS Marketplaceと連携したテナントを新規作成します。 Registration Tokenが有効でない場合はエラーを返却します。  Confirm a new use registeration linked to AWS Marketplace. Create a new tenant linked to AWS Marketplace. If the Registration Token is not valid, an error is returned. 
     * @summary AWS Marketplaceによるユーザー新規登録の確定(Confirm Sign Up with AWS Marketplace)
     * @param {ConfirmSignUpWithAwsMarketplaceParam} [confirmSignUpWithAwsMarketplaceParam] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SaasUserApi
     */
    public confirmSignUpWithAwsMarketplace(confirmSignUpWithAwsMarketplaceParam?: ConfirmSignUpWithAwsMarketplaceParam, options?: AxiosRequestConfig) {
        return SaasUserApiFp(this.configuration).confirmSignUpWithAwsMarketplace(confirmSignUpWithAwsMarketplaceParam, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * SaaSにユーザーを作成します。  Create SaaS User. 
     * @summary SaaSにユーザーを作成(Create SaaS User)
     * @param {CreateSaasUserParam} [createSaasUserParam] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SaasUserApi
     */
    public createSaasUser(createSaasUserParam?: CreateSaasUserParam, options?: AxiosRequestConfig) {
        return SaasUserApiFp(this.configuration).createSaasUser(createSaasUserParam, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 認証アプリケーション登録用のシークレットコードを作成します。  Create a secret code for authentication application registration. 
     * @summary 認証アプリケーション登録用のシークレットコードを作成(Creates secret code for authentication application registration)
     * @param {string} userId ユーザーID(User ID)
     * @param {CreateSecretCodeParam} [createSecretCodeParam] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SaasUserApi
     */
    public createSecretCode(userId: string, createSecretCodeParam?: CreateSecretCodeParam, options?: AxiosRequestConfig) {
        return SaasUserApiFp(this.configuration).createSecretCode(userId, createSecretCodeParam, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ユーザーIDを元に一致するユーザーをテナントからすべて削除し、SaaSからも削除します。  Delete all users with matching user ID from the tenant and SaaS. 
     * @summary ユーザー情報を削除(Delete User)
     * @param {string} userId ユーザーID(User ID)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SaasUserApi
     */
    public deleteSaasUser(userId: string, options?: AxiosRequestConfig) {
        return SaasUserApiFp(this.configuration).deleteSaasUser(userId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ユーザーIDからユーザー情報を取得します。  Get user information based on user ID. 
     * @summary ユーザー情報を取得(Get User)
     * @param {string} userId ユーザーID(User ID)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SaasUserApi
     */
    public getSaasUser(userId: string, options?: AxiosRequestConfig) {
        return SaasUserApiFp(this.configuration).getSaasUser(userId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * SaaSのユーザー全件を取得します。  Get all SaaS users. 
     * @summary ユーザー一覧を取得(Get Users)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SaasUserApi
     */
    public getSaasUsers(options?: AxiosRequestConfig) {
        return SaasUserApiFp(this.configuration).getSaasUsers(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ユーザーのMFA設定を取得します。  Get the user\'s MFA settings. 
     * @summary ユーザーのMFA設定を取得(Get User\'s MFA Settings)
     * @param {string} userId ユーザーID(User ID)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SaasUserApi
     */
    public getUserMfaPreference(userId: string, options?: AxiosRequestConfig) {
        return SaasUserApiFp(this.configuration).getUserMfaPreference(userId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * AWS Marketplaceと既存のテナントを連携します。 Registration Tokenが有効でない場合はエラーを返却します。  Link an existing tenant with AWS Marketplace. If the Registration Token is not valid, an error is returned. 
     * @summary AWS Marketplaceと既存のテナントの連携(Link an existing tenant with AWS Marketplace)
     * @param {LinkAwsMarketplaceParam} [linkAwsMarketplaceParam] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SaasUserApi
     */
    public linkAwsMarketplace(linkAwsMarketplaceParam?: LinkAwsMarketplaceParam, options?: AxiosRequestConfig) {
        return SaasUserApiFp(this.configuration).linkAwsMarketplace(linkAwsMarketplaceParam, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ユーザーのメールアドレス変更を要求します。 要求されたメールアドレスに対して検証コードを送信します。 ユーザーのアクセストークンが必要です。 検証コードの有効期限は24時間です。  Request to update the user\'s email address. Sends a verification code to the requested email address. Requires the user\'s access token. The verification code is valid for 24 hours. 
     * @summary ユーザーのメールアドレス変更要求(Request User Email Update)
     * @param {string} userId ユーザーID(User ID)
     * @param {RequestEmailUpdateParam} [requestEmailUpdateParam] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SaasUserApi
     */
    public requestEmailUpdate(userId: string, requestEmailUpdateParam?: RequestEmailUpdateParam, options?: AxiosRequestConfig) {
        return SaasUserApiFp(this.configuration).requestEmailUpdate(userId, requestEmailUpdateParam, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 外部アカウントのユーザー連携を要求します。 アクセストークンから連携するユーザーのメールアドレスを取得し、そのメールアドレスに対して検証コードを送信します。 検証コードの有効期限は24時間です。  Request to link an external account user. Get the email address of the user to be linked from the access token and send a verification code to that email address. The verification code is valid for 24 hours. 
     * @summary 外部アカウントのユーザー連携要求(Request External User Account Link)
     * @param {RequestExternalUserLinkParam} [requestExternalUserLinkParam] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SaasUserApi
     */
    public requestExternalUserLink(requestExternalUserLinkParam?: RequestExternalUserLinkParam, options?: AxiosRequestConfig) {
        return SaasUserApiFp(this.configuration).requestExternalUserLink(requestExternalUserLinkParam, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 新規登録時の仮パスワードを再送信します。  Resend temporary password for the new registered user. 
     * @summary 新規登録時の確認メール再送信(Resend Sign Up Confirmation Email)
     * @param {ResendSignUpConfirmationEmailParam} [resendSignUpConfirmationEmailParam] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SaasUserApi
     */
    public resendSignUpConfirmationEmail(resendSignUpConfirmationEmailParam?: ResendSignUpConfirmationEmailParam, options?: AxiosRequestConfig) {
        return SaasUserApiFp(this.configuration).resendSignUpConfirmationEmail(resendSignUpConfirmationEmailParam, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ユーザーを新規登録します。登録されたメールアドレスに対して仮パスワードを送信します。  Register a new user. A temporary password will be sent to the registered email. 
     * @summary 新規登録(Sign Up)
     * @param {SignUpParam} [signUpParam] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SaasUserApi
     */
    public signUp(signUpParam?: SignUpParam, options?: AxiosRequestConfig) {
        return SaasUserApiFp(this.configuration).signUp(signUpParam, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * AWS Marketplaceと連携したユーザーを新規登録します。登録されたメールアドレスに対して仮パスワードを送信します。 Registration Tokenが有効でない場合はエラーを返却します。  Register a new user linked to AWS Marketplace. A temporary password will be sent to the registered email. If the Registration Token is not valid, an error is returned. 
     * @summary AWS Marketplaceによるユーザー新規登録(Sign Up with AWS Marketplace)
     * @param {SignUpWithAwsMarketplaceParam} [signUpWithAwsMarketplaceParam] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SaasUserApi
     */
    public signUpWithAwsMarketplace(signUpWithAwsMarketplaceParam?: SignUpWithAwsMarketplaceParam, options?: AxiosRequestConfig) {
        return SaasUserApiFp(this.configuration).signUpWithAwsMarketplace(signUpWithAwsMarketplaceParam, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 外部IDプロバイダの連携を解除します。  Unlink external identity providers. 
     * @summary 外部IDプロバイダの連携解除(Unlink external identity providers)
     * @param {string} providerName 
     * @param {string} userId ユーザーID(User ID)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SaasUserApi
     */
    public unlinkProvider(providerName: string, userId: string, options?: AxiosRequestConfig) {
        return SaasUserApiFp(this.configuration).unlinkProvider(providerName, userId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ユーザーのメールアドレスを変更します。  Change user\'s email. 
     * @summary メールアドレスを変更(Change Email)
     * @param {string} userId ユーザーID(User ID)
     * @param {UpdateSaasUserEmailParam} [updateSaasUserEmailParam] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SaasUserApi
     */
    public updateSaasUserEmail(userId: string, updateSaasUserEmailParam?: UpdateSaasUserEmailParam, options?: AxiosRequestConfig) {
        return SaasUserApiFp(this.configuration).updateSaasUserEmail(userId, updateSaasUserEmailParam, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ユーザーのログインパスワードを変更します。  Change user\'s login password. 
     * @summary パスワードを変更(Change Password)
     * @param {string} userId ユーザーID(User ID)
     * @param {UpdateSaasUserPasswordParam} [updateSaasUserPasswordParam] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SaasUserApi
     */
    public updateSaasUserPassword(userId: string, updateSaasUserPasswordParam?: UpdateSaasUserPasswordParam, options?: AxiosRequestConfig) {
        return SaasUserApiFp(this.configuration).updateSaasUserPassword(userId, updateSaasUserPasswordParam, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 認証アプリケーションを登録します。  Register an authentication application. 
     * @summary 認証アプリケーションを登録(Register Authentication Application)
     * @param {string} userId ユーザーID(User ID)
     * @param {UpdateSoftwareTokenParam} [updateSoftwareTokenParam] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SaasUserApi
     */
    public updateSoftwareToken(userId: string, updateSoftwareTokenParam?: UpdateSoftwareTokenParam, options?: AxiosRequestConfig) {
        return SaasUserApiFp(this.configuration).updateSoftwareToken(userId, updateSoftwareTokenParam, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ユーザーのMFA設定を更新します。  Update user\'s MFA settings. 
     * @summary ユーザーのMFA設定を更新(Update User\'s MFA Settings)
     * @param {string} userId ユーザーID(User ID)
     * @param {MfaPreference} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SaasUserApi
     */
    public updateUserMfaPreference(userId: string, body?: MfaPreference, options?: AxiosRequestConfig) {
        return SaasUserApiFp(this.configuration).updateUserMfaPreference(userId, body, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * SaasusTenantApi - axios parameter creator
 * @export
 */
export const SaasusTenantApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * サーバサイド用に API キーを発行します。 最大 2 つまで発行できます。  Generate an API key for the server side. Up to 2 can be generated. 
         * @summary APIキーを作成(Create API Key)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createApiKey: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/apikeys`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * サーバサイド用の API キーを削除します。  Delete API Key. 
         * @summary APIキーを削除(Delete API Key)
         * @param {string} apiKey APIキー(API key)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteApiKey: async (apiKey: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'apiKey' is not null or undefined
            assertParamExists('deleteApiKey', 'apiKey', apiKey)
            const localVarPath = `/apikeys/{api_key}`
                .replace(`{${"api_key"}}`, encodeURIComponent(String(apiKey)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * サーバサイド用に API キーを取得します。 最大 2 つまで発行できます。  Get API key for the server side. Up to 2 can be generated. 
         * @summary APIキー一覧を取得(Get API Keys)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiKeys: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/apikeys`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * API リクエストでアプリが使用する固定文字列を取得します。  Gets the fixed string that the app uses in API requests. 
         * @summary クライアントシークレットを取得(Get Client Secret)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getClientSecret: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/client-secret`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * テナントのSaasIDを取得します。 SaaSus API および SaaSus SDK にて利用します。  Get the tenant\'s SaasID. Used by SaaSus API and SaaSus SDK. 
         * @summary SaasIDを取得(Get SaasID)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSaasId: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/saasid`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * API リクエストでアプリが使用する固定文字列を再発行します。 既に稼働中のSaaSアプリケーションに設定している場合には、動作に影響があります。  Reissue fixed strings that apps use in API requests. If changed on a SaaS application that is already running, it will affect the behavior. 
         * @summary クライアントシークレットを更新(Update Client Secret)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateClientSecret: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/client-secret`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * テナントのSaasIDを更新します。 SaaSus API および SaaSus SDK にて利用します。 既に稼働中の SaaS アプリケーションに設定している場合には、動作に影響があります。  Update the tenant\'s SaasID. Used by SaaSus API and SaaSus SDK. If changed on an SaaS application that is already running, it will affect the behavior. 
         * @summary SaasIDを更新(Update SaasID)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateSaasId: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/saasid`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SaasusTenantApi - functional programming interface
 * @export
 */
export const SaasusTenantApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = SaasusTenantApiAxiosParamCreator(configuration)
    return {
        /**
         * サーバサイド用に API キーを発行します。 最大 2 つまで発行できます。  Generate an API key for the server side. Up to 2 can be generated. 
         * @summary APIキーを作成(Create API Key)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createApiKey(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createApiKey(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * サーバサイド用の API キーを削除します。  Delete API Key. 
         * @summary APIキーを削除(Delete API Key)
         * @param {string} apiKey APIキー(API key)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteApiKey(apiKey: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteApiKey(apiKey, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * サーバサイド用に API キーを取得します。 最大 2 つまで発行できます。  Get API key for the server side. Up to 2 can be generated. 
         * @summary APIキー一覧を取得(Get API Keys)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getApiKeys(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiKeys>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getApiKeys(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * API リクエストでアプリが使用する固定文字列を取得します。  Gets the fixed string that the app uses in API requests. 
         * @summary クライアントシークレットを取得(Get Client Secret)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getClientSecret(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ClientSecret>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getClientSecret(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * テナントのSaasIDを取得します。 SaaSus API および SaaSus SDK にて利用します。  Get the tenant\'s SaasID. Used by SaaSus API and SaaSus SDK. 
         * @summary SaasIDを取得(Get SaasID)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSaasId(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SaasId>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSaasId(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * API リクエストでアプリが使用する固定文字列を再発行します。 既に稼働中のSaaSアプリケーションに設定している場合には、動作に影響があります。  Reissue fixed strings that apps use in API requests. If changed on a SaaS application that is already running, it will affect the behavior. 
         * @summary クライアントシークレットを更新(Update Client Secret)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateClientSecret(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateClientSecret(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * テナントのSaasIDを更新します。 SaaSus API および SaaSus SDK にて利用します。 既に稼働中の SaaS アプリケーションに設定している場合には、動作に影響があります。  Update the tenant\'s SaasID. Used by SaaSus API and SaaSus SDK. If changed on an SaaS application that is already running, it will affect the behavior. 
         * @summary SaasIDを更新(Update SaasID)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateSaasId(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateSaasId(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * SaasusTenantApi - factory interface
 * @export
 */
export const SaasusTenantApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = SaasusTenantApiFp(configuration)
    return {
        /**
         * サーバサイド用に API キーを発行します。 最大 2 つまで発行できます。  Generate an API key for the server side. Up to 2 can be generated. 
         * @summary APIキーを作成(Create API Key)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createApiKey(options?: any): AxiosPromise<void> {
            return localVarFp.createApiKey(options).then((request) => request(axios, basePath));
        },
        /**
         * サーバサイド用の API キーを削除します。  Delete API Key. 
         * @summary APIキーを削除(Delete API Key)
         * @param {string} apiKey APIキー(API key)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteApiKey(apiKey: string, options?: any): AxiosPromise<void> {
            return localVarFp.deleteApiKey(apiKey, options).then((request) => request(axios, basePath));
        },
        /**
         * サーバサイド用に API キーを取得します。 最大 2 つまで発行できます。  Get API key for the server side. Up to 2 can be generated. 
         * @summary APIキー一覧を取得(Get API Keys)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiKeys(options?: any): AxiosPromise<ApiKeys> {
            return localVarFp.getApiKeys(options).then((request) => request(axios, basePath));
        },
        /**
         * API リクエストでアプリが使用する固定文字列を取得します。  Gets the fixed string that the app uses in API requests. 
         * @summary クライアントシークレットを取得(Get Client Secret)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getClientSecret(options?: any): AxiosPromise<ClientSecret> {
            return localVarFp.getClientSecret(options).then((request) => request(axios, basePath));
        },
        /**
         * テナントのSaasIDを取得します。 SaaSus API および SaaSus SDK にて利用します。  Get the tenant\'s SaasID. Used by SaaSus API and SaaSus SDK. 
         * @summary SaasIDを取得(Get SaasID)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSaasId(options?: any): AxiosPromise<SaasId> {
            return localVarFp.getSaasId(options).then((request) => request(axios, basePath));
        },
        /**
         * API リクエストでアプリが使用する固定文字列を再発行します。 既に稼働中のSaaSアプリケーションに設定している場合には、動作に影響があります。  Reissue fixed strings that apps use in API requests. If changed on a SaaS application that is already running, it will affect the behavior. 
         * @summary クライアントシークレットを更新(Update Client Secret)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateClientSecret(options?: any): AxiosPromise<void> {
            return localVarFp.updateClientSecret(options).then((request) => request(axios, basePath));
        },
        /**
         * テナントのSaasIDを更新します。 SaaSus API および SaaSus SDK にて利用します。 既に稼働中の SaaS アプリケーションに設定している場合には、動作に影響があります。  Update the tenant\'s SaasID. Used by SaaSus API and SaaSus SDK. If changed on an SaaS application that is already running, it will affect the behavior. 
         * @summary SaasIDを更新(Update SaasID)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateSaasId(options?: any): AxiosPromise<void> {
            return localVarFp.updateSaasId(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * SaasusTenantApi - object-oriented interface
 * @export
 * @class SaasusTenantApi
 * @extends {BaseAPI}
 */
export class SaasusTenantApi extends BaseAPI {
    /**
     * サーバサイド用に API キーを発行します。 最大 2 つまで発行できます。  Generate an API key for the server side. Up to 2 can be generated. 
     * @summary APIキーを作成(Create API Key)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SaasusTenantApi
     */
    public createApiKey(options?: AxiosRequestConfig) {
        return SaasusTenantApiFp(this.configuration).createApiKey(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * サーバサイド用の API キーを削除します。  Delete API Key. 
     * @summary APIキーを削除(Delete API Key)
     * @param {string} apiKey APIキー(API key)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SaasusTenantApi
     */
    public deleteApiKey(apiKey: string, options?: AxiosRequestConfig) {
        return SaasusTenantApiFp(this.configuration).deleteApiKey(apiKey, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * サーバサイド用に API キーを取得します。 最大 2 つまで発行できます。  Get API key for the server side. Up to 2 can be generated. 
     * @summary APIキー一覧を取得(Get API Keys)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SaasusTenantApi
     */
    public getApiKeys(options?: AxiosRequestConfig) {
        return SaasusTenantApiFp(this.configuration).getApiKeys(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * API リクエストでアプリが使用する固定文字列を取得します。  Gets the fixed string that the app uses in API requests. 
     * @summary クライアントシークレットを取得(Get Client Secret)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SaasusTenantApi
     */
    public getClientSecret(options?: AxiosRequestConfig) {
        return SaasusTenantApiFp(this.configuration).getClientSecret(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * テナントのSaasIDを取得します。 SaaSus API および SaaSus SDK にて利用します。  Get the tenant\'s SaasID. Used by SaaSus API and SaaSus SDK. 
     * @summary SaasIDを取得(Get SaasID)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SaasusTenantApi
     */
    public getSaasId(options?: AxiosRequestConfig) {
        return SaasusTenantApiFp(this.configuration).getSaasId(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * API リクエストでアプリが使用する固定文字列を再発行します。 既に稼働中のSaaSアプリケーションに設定している場合には、動作に影響があります。  Reissue fixed strings that apps use in API requests. If changed on a SaaS application that is already running, it will affect the behavior. 
     * @summary クライアントシークレットを更新(Update Client Secret)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SaasusTenantApi
     */
    public updateClientSecret(options?: AxiosRequestConfig) {
        return SaasusTenantApiFp(this.configuration).updateClientSecret(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * テナントのSaasIDを更新します。 SaaSus API および SaaSus SDK にて利用します。 既に稼働中の SaaS アプリケーションに設定している場合には、動作に影響があります。  Update the tenant\'s SaasID. Used by SaaSus API and SaaSus SDK. If changed on an SaaS application that is already running, it will affect the behavior. 
     * @summary SaasIDを更新(Update SaasID)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SaasusTenantApi
     */
    public updateSaasId(options?: AxiosRequestConfig) {
        return SaasusTenantApiFp(this.configuration).updateSaasId(options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * TenantApi - axios parameter creator
 * @export
 */
export const TenantApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * SaaSus Platform で管理する、テナント情報を作成します。  Create a tenant managed by the SaaSus Platform. 
         * @summary テナントを作成(Create Tenant)
         * @param {TenantProps} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createTenant: async (body?: TenantProps, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/tenants`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * billing経由でstripeへ初期情報を設定  Set Stripe initial information via billing 
         * @summary stripe初期設定(Stripe Initial Setting)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createTenantAndPricing: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/stripe/init`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * stripe上の顧客情報・商品情報を削除します  Delete customer and product from Stripe. 
         * @summary stripe上の顧客情報・商品情報の削除(Delete Customer and Product From Stripe)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteStripeTenantAndPricing: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/stripe`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * SaaSus Platform で管理する、テナントの詳細情報を削除します。  Delete SaaSus Platform tenant. 
         * @summary テナント情報を削除(Delete Tenant)
         * @param {string} tenantId テナントID(Tenant ID)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteTenant: async (tenantId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tenantId' is not null or undefined
            assertParamExists('deleteTenant', 'tenantId', tenantId)
            const localVarPath = `/tenants/{tenant_id}`
                .replace(`{${"tenant_id"}}`, encodeURIComponent(String(tenantId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * SaaSus Platform で管理する、テナントの詳細情報を取得します。  Get the details of tenant managed on the SaaSus Platform. 
         * @summary テナント情報を取得(Get Tenant Details)
         * @param {string} tenantId テナントID(Tenant ID)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTenant: async (tenantId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tenantId' is not null or undefined
            assertParamExists('getTenant', 'tenantId', tenantId)
            const localVarPath = `/tenants/{tenant_id}`
                .replace(`{${"tenant_id"}}`, encodeURIComponent(String(tenantId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * テナント毎の外部IDプロバイダ経由のサインイン情報を取得します。  Get sign-in information via external identity provider per tenant. 
         * @summary テナント毎の外部IDプロバイダ取得(Get identity provider per tenant)
         * @param {string} tenantId テナントID(Tenant ID)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTenantIdentityProviders: async (tenantId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tenantId' is not null or undefined
            assertParamExists('getTenantIdentityProviders', 'tenantId', tenantId)
            const localVarPath = `/tenants/{tenant_id}/identity-providers`
                .replace(`{${"tenant_id"}}`, encodeURIComponent(String(tenantId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * SaaSus Platform で管理する、テナント情報の取得を行います。  Get tenants managed by SaaSus Platform. 
         * @summary テナント一覧取得(Get Tenants)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTenants: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/tenants`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 料金プランに関わる情報を全削除します。 テナントに連携されたプランとプラン定義を削除します。 Stripe連携している場合、連携が解除されます。  Delete all information related to rate plans. Delete plans linked to tenants and plan definitions. If you are using the Stripe linkage, the linkage will be removed. 
         * @summary プランに関わる情報を全削除
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        resetPlan: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/plans/reset`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * SaaSus Platform で管理する、テナントの詳細情報を更新します。  Update SaaSus Platform tenant details. 
         * @summary テナント情報を更新(Update Tenant Details)
         * @param {string} tenantId テナントID(Tenant ID)
         * @param {TenantProps} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateTenant: async (tenantId: string, body?: TenantProps, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tenantId' is not null or undefined
            assertParamExists('updateTenant', 'tenantId', tenantId)
            const localVarPath = `/tenants/{tenant_id}`
                .replace(`{${"tenant_id"}}`, encodeURIComponent(String(tenantId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * SaaSus Platform で管理しているテナントの請求先情報を更新します。  Update SaaSus Platform tenant billing information. 
         * @summary テナントの請求先情報を更新(Update Tenant Billing Information)
         * @param {string} tenantId テナントID(Tenant ID)
         * @param {BillingInfo} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateTenantBillingInfo: async (tenantId: string, body?: BillingInfo, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tenantId' is not null or undefined
            assertParamExists('updateTenantBillingInfo', 'tenantId', tenantId)
            const localVarPath = `/tenants/{tenant_id}/billing-info`
                .replace(`{${"tenant_id"}}`, encodeURIComponent(String(tenantId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * テナント毎の外部IDプロバイダ経由のサインイン情報を更新します。  Update sign-in information via external identity provider per tenant. 
         * @summary テナント毎の外部IDプロバイダ更新(Update identity provider per tenant)
         * @param {string} tenantId テナントID(Tenant ID)
         * @param {UpdateTenantIdentityProviderParam} [updateTenantIdentityProviderParam] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateTenantIdentityProvider: async (tenantId: string, updateTenantIdentityProviderParam?: UpdateTenantIdentityProviderParam, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tenantId' is not null or undefined
            assertParamExists('updateTenantIdentityProvider', 'tenantId', tenantId)
            const localVarPath = `/tenants/{tenant_id}/identity-providers`
                .replace(`{${"tenant_id"}}`, encodeURIComponent(String(tenantId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateTenantIdentityProviderParam, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * SaaSus Platform で管理しているテナントのプラン情報を更新します。  Update SaaSus Platform tenant plan information. 
         * @summary テナントのプラン情報を更新(Update Tenant Plan Information)
         * @param {string} tenantId テナントID(Tenant ID)
         * @param {PlanReservation} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateTenantPlan: async (tenantId: string, body?: PlanReservation, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tenantId' is not null or undefined
            assertParamExists('updateTenantPlan', 'tenantId', tenantId)
            const localVarPath = `/tenants/{tenant_id}/plans`
                .replace(`{${"tenant_id"}}`, encodeURIComponent(String(tenantId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TenantApi - functional programming interface
 * @export
 */
export const TenantApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = TenantApiAxiosParamCreator(configuration)
    return {
        /**
         * SaaSus Platform で管理する、テナント情報を作成します。  Create a tenant managed by the SaaSus Platform. 
         * @summary テナントを作成(Create Tenant)
         * @param {TenantProps} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createTenant(body?: TenantProps, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Tenant>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createTenant(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * billing経由でstripeへ初期情報を設定  Set Stripe initial information via billing 
         * @summary stripe初期設定(Stripe Initial Setting)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createTenantAndPricing(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createTenantAndPricing(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * stripe上の顧客情報・商品情報を削除します  Delete customer and product from Stripe. 
         * @summary stripe上の顧客情報・商品情報の削除(Delete Customer and Product From Stripe)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteStripeTenantAndPricing(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteStripeTenantAndPricing(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * SaaSus Platform で管理する、テナントの詳細情報を削除します。  Delete SaaSus Platform tenant. 
         * @summary テナント情報を削除(Delete Tenant)
         * @param {string} tenantId テナントID(Tenant ID)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteTenant(tenantId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteTenant(tenantId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * SaaSus Platform で管理する、テナントの詳細情報を取得します。  Get the details of tenant managed on the SaaSus Platform. 
         * @summary テナント情報を取得(Get Tenant Details)
         * @param {string} tenantId テナントID(Tenant ID)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getTenant(tenantId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TenantDetail>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getTenant(tenantId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * テナント毎の外部IDプロバイダ経由のサインイン情報を取得します。  Get sign-in information via external identity provider per tenant. 
         * @summary テナント毎の外部IDプロバイダ取得(Get identity provider per tenant)
         * @param {string} tenantId テナントID(Tenant ID)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getTenantIdentityProviders(tenantId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TenantIdentityProviders>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getTenantIdentityProviders(tenantId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * SaaSus Platform で管理する、テナント情報の取得を行います。  Get tenants managed by SaaSus Platform. 
         * @summary テナント一覧取得(Get Tenants)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getTenants(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Tenants>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getTenants(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 料金プランに関わる情報を全削除します。 テナントに連携されたプランとプラン定義を削除します。 Stripe連携している場合、連携が解除されます。  Delete all information related to rate plans. Delete plans linked to tenants and plan definitions. If you are using the Stripe linkage, the linkage will be removed. 
         * @summary プランに関わる情報を全削除
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async resetPlan(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.resetPlan(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * SaaSus Platform で管理する、テナントの詳細情報を更新します。  Update SaaSus Platform tenant details. 
         * @summary テナント情報を更新(Update Tenant Details)
         * @param {string} tenantId テナントID(Tenant ID)
         * @param {TenantProps} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateTenant(tenantId: string, body?: TenantProps, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateTenant(tenantId, body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * SaaSus Platform で管理しているテナントの請求先情報を更新します。  Update SaaSus Platform tenant billing information. 
         * @summary テナントの請求先情報を更新(Update Tenant Billing Information)
         * @param {string} tenantId テナントID(Tenant ID)
         * @param {BillingInfo} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateTenantBillingInfo(tenantId: string, body?: BillingInfo, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateTenantBillingInfo(tenantId, body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * テナント毎の外部IDプロバイダ経由のサインイン情報を更新します。  Update sign-in information via external identity provider per tenant. 
         * @summary テナント毎の外部IDプロバイダ更新(Update identity provider per tenant)
         * @param {string} tenantId テナントID(Tenant ID)
         * @param {UpdateTenantIdentityProviderParam} [updateTenantIdentityProviderParam] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateTenantIdentityProvider(tenantId: string, updateTenantIdentityProviderParam?: UpdateTenantIdentityProviderParam, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateTenantIdentityProvider(tenantId, updateTenantIdentityProviderParam, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * SaaSus Platform で管理しているテナントのプラン情報を更新します。  Update SaaSus Platform tenant plan information. 
         * @summary テナントのプラン情報を更新(Update Tenant Plan Information)
         * @param {string} tenantId テナントID(Tenant ID)
         * @param {PlanReservation} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateTenantPlan(tenantId: string, body?: PlanReservation, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateTenantPlan(tenantId, body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * TenantApi - factory interface
 * @export
 */
export const TenantApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = TenantApiFp(configuration)
    return {
        /**
         * SaaSus Platform で管理する、テナント情報を作成します。  Create a tenant managed by the SaaSus Platform. 
         * @summary テナントを作成(Create Tenant)
         * @param {TenantProps} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createTenant(body?: TenantProps, options?: any): AxiosPromise<Tenant> {
            return localVarFp.createTenant(body, options).then((request) => request(axios, basePath));
        },
        /**
         * billing経由でstripeへ初期情報を設定  Set Stripe initial information via billing 
         * @summary stripe初期設定(Stripe Initial Setting)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createTenantAndPricing(options?: any): AxiosPromise<void> {
            return localVarFp.createTenantAndPricing(options).then((request) => request(axios, basePath));
        },
        /**
         * stripe上の顧客情報・商品情報を削除します  Delete customer and product from Stripe. 
         * @summary stripe上の顧客情報・商品情報の削除(Delete Customer and Product From Stripe)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteStripeTenantAndPricing(options?: any): AxiosPromise<void> {
            return localVarFp.deleteStripeTenantAndPricing(options).then((request) => request(axios, basePath));
        },
        /**
         * SaaSus Platform で管理する、テナントの詳細情報を削除します。  Delete SaaSus Platform tenant. 
         * @summary テナント情報を削除(Delete Tenant)
         * @param {string} tenantId テナントID(Tenant ID)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteTenant(tenantId: string, options?: any): AxiosPromise<void> {
            return localVarFp.deleteTenant(tenantId, options).then((request) => request(axios, basePath));
        },
        /**
         * SaaSus Platform で管理する、テナントの詳細情報を取得します。  Get the details of tenant managed on the SaaSus Platform. 
         * @summary テナント情報を取得(Get Tenant Details)
         * @param {string} tenantId テナントID(Tenant ID)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTenant(tenantId: string, options?: any): AxiosPromise<TenantDetail> {
            return localVarFp.getTenant(tenantId, options).then((request) => request(axios, basePath));
        },
        /**
         * テナント毎の外部IDプロバイダ経由のサインイン情報を取得します。  Get sign-in information via external identity provider per tenant. 
         * @summary テナント毎の外部IDプロバイダ取得(Get identity provider per tenant)
         * @param {string} tenantId テナントID(Tenant ID)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTenantIdentityProviders(tenantId: string, options?: any): AxiosPromise<TenantIdentityProviders> {
            return localVarFp.getTenantIdentityProviders(tenantId, options).then((request) => request(axios, basePath));
        },
        /**
         * SaaSus Platform で管理する、テナント情報の取得を行います。  Get tenants managed by SaaSus Platform. 
         * @summary テナント一覧取得(Get Tenants)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTenants(options?: any): AxiosPromise<Tenants> {
            return localVarFp.getTenants(options).then((request) => request(axios, basePath));
        },
        /**
         * 料金プランに関わる情報を全削除します。 テナントに連携されたプランとプラン定義を削除します。 Stripe連携している場合、連携が解除されます。  Delete all information related to rate plans. Delete plans linked to tenants and plan definitions. If you are using the Stripe linkage, the linkage will be removed. 
         * @summary プランに関わる情報を全削除
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        resetPlan(options?: any): AxiosPromise<void> {
            return localVarFp.resetPlan(options).then((request) => request(axios, basePath));
        },
        /**
         * SaaSus Platform で管理する、テナントの詳細情報を更新します。  Update SaaSus Platform tenant details. 
         * @summary テナント情報を更新(Update Tenant Details)
         * @param {string} tenantId テナントID(Tenant ID)
         * @param {TenantProps} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateTenant(tenantId: string, body?: TenantProps, options?: any): AxiosPromise<void> {
            return localVarFp.updateTenant(tenantId, body, options).then((request) => request(axios, basePath));
        },
        /**
         * SaaSus Platform で管理しているテナントの請求先情報を更新します。  Update SaaSus Platform tenant billing information. 
         * @summary テナントの請求先情報を更新(Update Tenant Billing Information)
         * @param {string} tenantId テナントID(Tenant ID)
         * @param {BillingInfo} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateTenantBillingInfo(tenantId: string, body?: BillingInfo, options?: any): AxiosPromise<void> {
            return localVarFp.updateTenantBillingInfo(tenantId, body, options).then((request) => request(axios, basePath));
        },
        /**
         * テナント毎の外部IDプロバイダ経由のサインイン情報を更新します。  Update sign-in information via external identity provider per tenant. 
         * @summary テナント毎の外部IDプロバイダ更新(Update identity provider per tenant)
         * @param {string} tenantId テナントID(Tenant ID)
         * @param {UpdateTenantIdentityProviderParam} [updateTenantIdentityProviderParam] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateTenantIdentityProvider(tenantId: string, updateTenantIdentityProviderParam?: UpdateTenantIdentityProviderParam, options?: any): AxiosPromise<void> {
            return localVarFp.updateTenantIdentityProvider(tenantId, updateTenantIdentityProviderParam, options).then((request) => request(axios, basePath));
        },
        /**
         * SaaSus Platform で管理しているテナントのプラン情報を更新します。  Update SaaSus Platform tenant plan information. 
         * @summary テナントのプラン情報を更新(Update Tenant Plan Information)
         * @param {string} tenantId テナントID(Tenant ID)
         * @param {PlanReservation} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateTenantPlan(tenantId: string, body?: PlanReservation, options?: any): AxiosPromise<void> {
            return localVarFp.updateTenantPlan(tenantId, body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * TenantApi - object-oriented interface
 * @export
 * @class TenantApi
 * @extends {BaseAPI}
 */
export class TenantApi extends BaseAPI {
    /**
     * SaaSus Platform で管理する、テナント情報を作成します。  Create a tenant managed by the SaaSus Platform. 
     * @summary テナントを作成(Create Tenant)
     * @param {TenantProps} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TenantApi
     */
    public createTenant(body?: TenantProps, options?: AxiosRequestConfig) {
        return TenantApiFp(this.configuration).createTenant(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * billing経由でstripeへ初期情報を設定  Set Stripe initial information via billing 
     * @summary stripe初期設定(Stripe Initial Setting)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TenantApi
     */
    public createTenantAndPricing(options?: AxiosRequestConfig) {
        return TenantApiFp(this.configuration).createTenantAndPricing(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * stripe上の顧客情報・商品情報を削除します  Delete customer and product from Stripe. 
     * @summary stripe上の顧客情報・商品情報の削除(Delete Customer and Product From Stripe)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TenantApi
     */
    public deleteStripeTenantAndPricing(options?: AxiosRequestConfig) {
        return TenantApiFp(this.configuration).deleteStripeTenantAndPricing(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * SaaSus Platform で管理する、テナントの詳細情報を削除します。  Delete SaaSus Platform tenant. 
     * @summary テナント情報を削除(Delete Tenant)
     * @param {string} tenantId テナントID(Tenant ID)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TenantApi
     */
    public deleteTenant(tenantId: string, options?: AxiosRequestConfig) {
        return TenantApiFp(this.configuration).deleteTenant(tenantId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * SaaSus Platform で管理する、テナントの詳細情報を取得します。  Get the details of tenant managed on the SaaSus Platform. 
     * @summary テナント情報を取得(Get Tenant Details)
     * @param {string} tenantId テナントID(Tenant ID)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TenantApi
     */
    public getTenant(tenantId: string, options?: AxiosRequestConfig) {
        return TenantApiFp(this.configuration).getTenant(tenantId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * テナント毎の外部IDプロバイダ経由のサインイン情報を取得します。  Get sign-in information via external identity provider per tenant. 
     * @summary テナント毎の外部IDプロバイダ取得(Get identity provider per tenant)
     * @param {string} tenantId テナントID(Tenant ID)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TenantApi
     */
    public getTenantIdentityProviders(tenantId: string, options?: AxiosRequestConfig) {
        return TenantApiFp(this.configuration).getTenantIdentityProviders(tenantId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * SaaSus Platform で管理する、テナント情報の取得を行います。  Get tenants managed by SaaSus Platform. 
     * @summary テナント一覧取得(Get Tenants)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TenantApi
     */
    public getTenants(options?: AxiosRequestConfig) {
        return TenantApiFp(this.configuration).getTenants(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 料金プランに関わる情報を全削除します。 テナントに連携されたプランとプラン定義を削除します。 Stripe連携している場合、連携が解除されます。  Delete all information related to rate plans. Delete plans linked to tenants and plan definitions. If you are using the Stripe linkage, the linkage will be removed. 
     * @summary プランに関わる情報を全削除
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TenantApi
     */
    public resetPlan(options?: AxiosRequestConfig) {
        return TenantApiFp(this.configuration).resetPlan(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * SaaSus Platform で管理する、テナントの詳細情報を更新します。  Update SaaSus Platform tenant details. 
     * @summary テナント情報を更新(Update Tenant Details)
     * @param {string} tenantId テナントID(Tenant ID)
     * @param {TenantProps} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TenantApi
     */
    public updateTenant(tenantId: string, body?: TenantProps, options?: AxiosRequestConfig) {
        return TenantApiFp(this.configuration).updateTenant(tenantId, body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * SaaSus Platform で管理しているテナントの請求先情報を更新します。  Update SaaSus Platform tenant billing information. 
     * @summary テナントの請求先情報を更新(Update Tenant Billing Information)
     * @param {string} tenantId テナントID(Tenant ID)
     * @param {BillingInfo} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TenantApi
     */
    public updateTenantBillingInfo(tenantId: string, body?: BillingInfo, options?: AxiosRequestConfig) {
        return TenantApiFp(this.configuration).updateTenantBillingInfo(tenantId, body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * テナント毎の外部IDプロバイダ経由のサインイン情報を更新します。  Update sign-in information via external identity provider per tenant. 
     * @summary テナント毎の外部IDプロバイダ更新(Update identity provider per tenant)
     * @param {string} tenantId テナントID(Tenant ID)
     * @param {UpdateTenantIdentityProviderParam} [updateTenantIdentityProviderParam] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TenantApi
     */
    public updateTenantIdentityProvider(tenantId: string, updateTenantIdentityProviderParam?: UpdateTenantIdentityProviderParam, options?: AxiosRequestConfig) {
        return TenantApiFp(this.configuration).updateTenantIdentityProvider(tenantId, updateTenantIdentityProviderParam, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * SaaSus Platform で管理しているテナントのプラン情報を更新します。  Update SaaSus Platform tenant plan information. 
     * @summary テナントのプラン情報を更新(Update Tenant Plan Information)
     * @param {string} tenantId テナントID(Tenant ID)
     * @param {PlanReservation} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TenantApi
     */
    public updateTenantPlan(tenantId: string, body?: PlanReservation, options?: AxiosRequestConfig) {
        return TenantApiFp(this.configuration).updateTenantPlan(tenantId, body, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * TenantAttributeApi - axios parameter creator
 * @export
 */
export const TenantAttributeApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * SaaSus Platform で管理する、テナントの追加属性の登録を行います。 例えばテナントの呼び名やメモなどをを持たせることができ、SaaSからSaaSus SDK/APIを利用して取得することができます。  Register additional tenant attributes to be managed by SaaSus Platform. For example, tenant name, memo, etc., then get the attributes from SaaS using the SaaSus SDK/API. 
         * @summary テナント属性の作成(Create Tenant Attribute)
         * @param {Attribute} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createTenantAttribute: async (body?: Attribute, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/tenant-attributes`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * SaaSus Platform で管理する、テナントの追加属性の削除を行います。  Deletes tenant attributes managed by SaaSus Platform. 
         * @summary テナント属性の削除(Delete Tenant Attribute)
         * @param {string} attributeName 属性名(Attribute Name)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteTenantAttribute: async (attributeName: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'attributeName' is not null or undefined
            assertParamExists('deleteTenantAttribute', 'attributeName', attributeName)
            const localVarPath = `/tenant-attributes/{attribute_name}`
                .replace(`{${"attribute_name"}}`, encodeURIComponent(String(attributeName)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * SaaSus Platform で管理する、テナントの追加属性の定義を取得します。 例えばテナントの呼び名やメモなどをを持たせることができ、SaaSからSaaSus SDK/APIを利用して取得することができます。  Get definitions for additional tenant attributes managed by the SaaSus Platform. For example, tenant name, memo, etc., then get the attributes from SaaS using the SaaSus SDK/API. 
         * @summary テナント属性の一覧を取得(Get Tenant Attributes)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTenantAttributes: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/tenant-attributes`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TenantAttributeApi - functional programming interface
 * @export
 */
export const TenantAttributeApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = TenantAttributeApiAxiosParamCreator(configuration)
    return {
        /**
         * SaaSus Platform で管理する、テナントの追加属性の登録を行います。 例えばテナントの呼び名やメモなどをを持たせることができ、SaaSからSaaSus SDK/APIを利用して取得することができます。  Register additional tenant attributes to be managed by SaaSus Platform. For example, tenant name, memo, etc., then get the attributes from SaaS using the SaaSus SDK/API. 
         * @summary テナント属性の作成(Create Tenant Attribute)
         * @param {Attribute} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createTenantAttribute(body?: Attribute, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Attribute>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createTenantAttribute(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * SaaSus Platform で管理する、テナントの追加属性の削除を行います。  Deletes tenant attributes managed by SaaSus Platform. 
         * @summary テナント属性の削除(Delete Tenant Attribute)
         * @param {string} attributeName 属性名(Attribute Name)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteTenantAttribute(attributeName: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteTenantAttribute(attributeName, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * SaaSus Platform で管理する、テナントの追加属性の定義を取得します。 例えばテナントの呼び名やメモなどをを持たせることができ、SaaSからSaaSus SDK/APIを利用して取得することができます。  Get definitions for additional tenant attributes managed by the SaaSus Platform. For example, tenant name, memo, etc., then get the attributes from SaaS using the SaaSus SDK/API. 
         * @summary テナント属性の一覧を取得(Get Tenant Attributes)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getTenantAttributes(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TenantAttributes>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getTenantAttributes(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * TenantAttributeApi - factory interface
 * @export
 */
export const TenantAttributeApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = TenantAttributeApiFp(configuration)
    return {
        /**
         * SaaSus Platform で管理する、テナントの追加属性の登録を行います。 例えばテナントの呼び名やメモなどをを持たせることができ、SaaSからSaaSus SDK/APIを利用して取得することができます。  Register additional tenant attributes to be managed by SaaSus Platform. For example, tenant name, memo, etc., then get the attributes from SaaS using the SaaSus SDK/API. 
         * @summary テナント属性の作成(Create Tenant Attribute)
         * @param {Attribute} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createTenantAttribute(body?: Attribute, options?: any): AxiosPromise<Attribute> {
            return localVarFp.createTenantAttribute(body, options).then((request) => request(axios, basePath));
        },
        /**
         * SaaSus Platform で管理する、テナントの追加属性の削除を行います。  Deletes tenant attributes managed by SaaSus Platform. 
         * @summary テナント属性の削除(Delete Tenant Attribute)
         * @param {string} attributeName 属性名(Attribute Name)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteTenantAttribute(attributeName: string, options?: any): AxiosPromise<void> {
            return localVarFp.deleteTenantAttribute(attributeName, options).then((request) => request(axios, basePath));
        },
        /**
         * SaaSus Platform で管理する、テナントの追加属性の定義を取得します。 例えばテナントの呼び名やメモなどをを持たせることができ、SaaSからSaaSus SDK/APIを利用して取得することができます。  Get definitions for additional tenant attributes managed by the SaaSus Platform. For example, tenant name, memo, etc., then get the attributes from SaaS using the SaaSus SDK/API. 
         * @summary テナント属性の一覧を取得(Get Tenant Attributes)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTenantAttributes(options?: any): AxiosPromise<TenantAttributes> {
            return localVarFp.getTenantAttributes(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * TenantAttributeApi - object-oriented interface
 * @export
 * @class TenantAttributeApi
 * @extends {BaseAPI}
 */
export class TenantAttributeApi extends BaseAPI {
    /**
     * SaaSus Platform で管理する、テナントの追加属性の登録を行います。 例えばテナントの呼び名やメモなどをを持たせることができ、SaaSからSaaSus SDK/APIを利用して取得することができます。  Register additional tenant attributes to be managed by SaaSus Platform. For example, tenant name, memo, etc., then get the attributes from SaaS using the SaaSus SDK/API. 
     * @summary テナント属性の作成(Create Tenant Attribute)
     * @param {Attribute} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TenantAttributeApi
     */
    public createTenantAttribute(body?: Attribute, options?: AxiosRequestConfig) {
        return TenantAttributeApiFp(this.configuration).createTenantAttribute(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * SaaSus Platform で管理する、テナントの追加属性の削除を行います。  Deletes tenant attributes managed by SaaSus Platform. 
     * @summary テナント属性の削除(Delete Tenant Attribute)
     * @param {string} attributeName 属性名(Attribute Name)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TenantAttributeApi
     */
    public deleteTenantAttribute(attributeName: string, options?: AxiosRequestConfig) {
        return TenantAttributeApiFp(this.configuration).deleteTenantAttribute(attributeName, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * SaaSus Platform で管理する、テナントの追加属性の定義を取得します。 例えばテナントの呼び名やメモなどをを持たせることができ、SaaSからSaaSus SDK/APIを利用して取得することができます。  Get definitions for additional tenant attributes managed by the SaaSus Platform. For example, tenant name, memo, etc., then get the attributes from SaaS using the SaaSus SDK/API. 
     * @summary テナント属性の一覧を取得(Get Tenant Attributes)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TenantAttributeApi
     */
    public getTenantAttributes(options?: AxiosRequestConfig) {
        return TenantAttributeApiFp(this.configuration).getTenantAttributes(options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * TenantUserApi - axios parameter creator
 * @export
 */
export const TenantUserApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * テナントにユーザーを作成します。 attributesを空のオブジェクトにした場合、追加属性は空で作成されます。  Create a tenant user. If attributes is empty, the additional attributes will be created empty. 
         * @summary テナントにユーザーを作成(Create Tenant User)
         * @param {string} tenantId テナントID(Tenant ID)
         * @param {CreateTenantUserParam} [createTenantUserParam] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createTenantUser: async (tenantId: string, createTenantUserParam?: CreateTenantUserParam, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tenantId' is not null or undefined
            assertParamExists('createTenantUser', 'tenantId', tenantId)
            const localVarPath = `/tenants/{tenant_id}/users`
                .replace(`{${"tenant_id"}}`, encodeURIComponent(String(tenantId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createTenantUserParam, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * テナントのユーザーに役割(ロール)を作成します。  Create roles on tenant users. 
         * @summary テナントのユーザー情報に役割(ロール)を作成(Create Tenant User Role)
         * @param {string} tenantId テナントID(Tenant ID)
         * @param {string} userId ユーザーID(User ID)
         * @param {number} envId 環境ID(Env ID)
         * @param {CreateTenantUserRolesParam} [createTenantUserRolesParam] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createTenantUserRoles: async (tenantId: string, userId: string, envId: number, createTenantUserRolesParam?: CreateTenantUserRolesParam, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tenantId' is not null or undefined
            assertParamExists('createTenantUserRoles', 'tenantId', tenantId)
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('createTenantUserRoles', 'userId', userId)
            // verify required parameter 'envId' is not null or undefined
            assertParamExists('createTenantUserRoles', 'envId', envId)
            const localVarPath = `/tenants/{tenant_id}/users/{user_id}/envs/{env_id}/roles`
                .replace(`{${"tenant_id"}}`, encodeURIComponent(String(tenantId)))
                .replace(`{${"user_id"}}`, encodeURIComponent(String(userId)))
                .replace(`{${"env_id"}}`, encodeURIComponent(String(envId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createTenantUserRolesParam, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * テナントからユーザーを削除します。  Delete a user from your tenant. 
         * @summary テナントのユーザー情報を削除(Delete Tenant User)
         * @param {string} tenantId テナントID(Tenant ID)
         * @param {string} userId ユーザーID(User ID)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteTenantUser: async (tenantId: string, userId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tenantId' is not null or undefined
            assertParamExists('deleteTenantUser', 'tenantId', tenantId)
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('deleteTenantUser', 'userId', userId)
            const localVarPath = `/tenants/{tenant_id}/users/{user_id}`
                .replace(`{${"tenant_id"}}`, encodeURIComponent(String(tenantId)))
                .replace(`{${"user_id"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * テナントのユーザーから役割(ロール)を削除します。  Remove a role from a tenant user. 
         * @summary テナントのユーザーから役割(ロール)を削除(Remove Role From Tenant User)
         * @param {string} tenantId テナントID(Tenant ID)
         * @param {string} userId ユーザーID(User ID)
         * @param {number} envId 環境ID(Env ID)
         * @param {string} roleName 役割(ロール)名(role name)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteTenantUserRole: async (tenantId: string, userId: string, envId: number, roleName: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tenantId' is not null or undefined
            assertParamExists('deleteTenantUserRole', 'tenantId', tenantId)
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('deleteTenantUserRole', 'userId', userId)
            // verify required parameter 'envId' is not null or undefined
            assertParamExists('deleteTenantUserRole', 'envId', envId)
            // verify required parameter 'roleName' is not null or undefined
            assertParamExists('deleteTenantUserRole', 'roleName', roleName)
            const localVarPath = `/tenants/{tenant_id}/users/{user_id}/envs/{env_id}/roles/{role_name}`
                .replace(`{${"tenant_id"}}`, encodeURIComponent(String(tenantId)))
                .replace(`{${"user_id"}}`, encodeURIComponent(String(userId)))
                .replace(`{${"env_id"}}`, encodeURIComponent(String(envId)))
                .replace(`{${"role_name"}}`, encodeURIComponent(String(roleName)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ユーザーIDからテナントに所属しているユーザー情報を取得します。 複数テナントに所属している場合は別のオブジェクトとして返却されます。  Get information on user belonging to the tenant from the user ID. If the user belongs to multiple tenants, it will be returned as another object. 
         * @summary ユーザー情報を取得(Get User Info)
         * @param {string} userId ユーザーID(User ID)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllTenantUser: async (userId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('getAllTenantUser', 'userId', userId)
            const localVarPath = `/tenants/all/users/{user_id}`
                .replace(`{${"user_id"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * テナントに所属しているユーザー全件を取得します。 複数テナントに所属する同一ユーザーは別のオブジェクトとして返却されます。 idは一意ではありません。  Get all users belonging to the tenant. The same user belonging to multiple tenants will be returned as a different object. Id is not unique. 
         * @summary ユーザー一覧を取得(Get Users)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllTenantUsers: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/tenants/all/users`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * テナントのユーザーをIDから一件取得します。  Get one tenant user by specific ID. 
         * @summary テナントのユーザー情報を取得(Get Tenant User)
         * @param {string} tenantId テナントID(Tenant ID)
         * @param {string} userId ユーザーID(User ID)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTenantUser: async (tenantId: string, userId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tenantId' is not null or undefined
            assertParamExists('getTenantUser', 'tenantId', tenantId)
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('getTenantUser', 'userId', userId)
            const localVarPath = `/tenants/{tenant_id}/users/{user_id}`
                .replace(`{${"tenant_id"}}`, encodeURIComponent(String(tenantId)))
                .replace(`{${"user_id"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * テナントに所属するユーザーを全件取得します。 idは一意です。  Get all the users belonging to the tenant. Id is unique. 
         * @summary テナントのユーザー一覧を取得(Get Tenant Users)
         * @param {string} tenantId テナントID(Tenant ID)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTenantUsers: async (tenantId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tenantId' is not null or undefined
            assertParamExists('getTenantUsers', 'tenantId', tenantId)
            const localVarPath = `/tenants/{tenant_id}/users`
                .replace(`{${"tenant_id"}}`, encodeURIComponent(String(tenantId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * テナントのユーザー属性情報を更新します。  Update tenant user attributes. 
         * @summary テナントのユーザー属性情報を更新(Update Tenant User Attribute)
         * @param {string} tenantId テナントID(Tenant ID)
         * @param {string} userId ユーザーID(User ID)
         * @param {UpdateTenantUserParam} [updateTenantUserParam] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateTenantUser: async (tenantId: string, userId: string, updateTenantUserParam?: UpdateTenantUserParam, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tenantId' is not null or undefined
            assertParamExists('updateTenantUser', 'tenantId', tenantId)
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('updateTenantUser', 'userId', userId)
            const localVarPath = `/tenants/{tenant_id}/users/{user_id}`
                .replace(`{${"tenant_id"}}`, encodeURIComponent(String(tenantId)))
                .replace(`{${"user_id"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateTenantUserParam, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TenantUserApi - functional programming interface
 * @export
 */
export const TenantUserApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = TenantUserApiAxiosParamCreator(configuration)
    return {
        /**
         * テナントにユーザーを作成します。 attributesを空のオブジェクトにした場合、追加属性は空で作成されます。  Create a tenant user. If attributes is empty, the additional attributes will be created empty. 
         * @summary テナントにユーザーを作成(Create Tenant User)
         * @param {string} tenantId テナントID(Tenant ID)
         * @param {CreateTenantUserParam} [createTenantUserParam] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createTenantUser(tenantId: string, createTenantUserParam?: CreateTenantUserParam, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<User>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createTenantUser(tenantId, createTenantUserParam, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * テナントのユーザーに役割(ロール)を作成します。  Create roles on tenant users. 
         * @summary テナントのユーザー情報に役割(ロール)を作成(Create Tenant User Role)
         * @param {string} tenantId テナントID(Tenant ID)
         * @param {string} userId ユーザーID(User ID)
         * @param {number} envId 環境ID(Env ID)
         * @param {CreateTenantUserRolesParam} [createTenantUserRolesParam] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createTenantUserRoles(tenantId: string, userId: string, envId: number, createTenantUserRolesParam?: CreateTenantUserRolesParam, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createTenantUserRoles(tenantId, userId, envId, createTenantUserRolesParam, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * テナントからユーザーを削除します。  Delete a user from your tenant. 
         * @summary テナントのユーザー情報を削除(Delete Tenant User)
         * @param {string} tenantId テナントID(Tenant ID)
         * @param {string} userId ユーザーID(User ID)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteTenantUser(tenantId: string, userId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteTenantUser(tenantId, userId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * テナントのユーザーから役割(ロール)を削除します。  Remove a role from a tenant user. 
         * @summary テナントのユーザーから役割(ロール)を削除(Remove Role From Tenant User)
         * @param {string} tenantId テナントID(Tenant ID)
         * @param {string} userId ユーザーID(User ID)
         * @param {number} envId 環境ID(Env ID)
         * @param {string} roleName 役割(ロール)名(role name)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteTenantUserRole(tenantId: string, userId: string, envId: number, roleName: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteTenantUserRole(tenantId, userId, envId, roleName, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * ユーザーIDからテナントに所属しているユーザー情報を取得します。 複数テナントに所属している場合は別のオブジェクトとして返却されます。  Get information on user belonging to the tenant from the user ID. If the user belongs to multiple tenants, it will be returned as another object. 
         * @summary ユーザー情報を取得(Get User Info)
         * @param {string} userId ユーザーID(User ID)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllTenantUser(userId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Users>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllTenantUser(userId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * テナントに所属しているユーザー全件を取得します。 複数テナントに所属する同一ユーザーは別のオブジェクトとして返却されます。 idは一意ではありません。  Get all users belonging to the tenant. The same user belonging to multiple tenants will be returned as a different object. Id is not unique. 
         * @summary ユーザー一覧を取得(Get Users)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllTenantUsers(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Users>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllTenantUsers(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * テナントのユーザーをIDから一件取得します。  Get one tenant user by specific ID. 
         * @summary テナントのユーザー情報を取得(Get Tenant User)
         * @param {string} tenantId テナントID(Tenant ID)
         * @param {string} userId ユーザーID(User ID)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getTenantUser(tenantId: string, userId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<User>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getTenantUser(tenantId, userId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * テナントに所属するユーザーを全件取得します。 idは一意です。  Get all the users belonging to the tenant. Id is unique. 
         * @summary テナントのユーザー一覧を取得(Get Tenant Users)
         * @param {string} tenantId テナントID(Tenant ID)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getTenantUsers(tenantId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Users>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getTenantUsers(tenantId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * テナントのユーザー属性情報を更新します。  Update tenant user attributes. 
         * @summary テナントのユーザー属性情報を更新(Update Tenant User Attribute)
         * @param {string} tenantId テナントID(Tenant ID)
         * @param {string} userId ユーザーID(User ID)
         * @param {UpdateTenantUserParam} [updateTenantUserParam] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateTenantUser(tenantId: string, userId: string, updateTenantUserParam?: UpdateTenantUserParam, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateTenantUser(tenantId, userId, updateTenantUserParam, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * TenantUserApi - factory interface
 * @export
 */
export const TenantUserApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = TenantUserApiFp(configuration)
    return {
        /**
         * テナントにユーザーを作成します。 attributesを空のオブジェクトにした場合、追加属性は空で作成されます。  Create a tenant user. If attributes is empty, the additional attributes will be created empty. 
         * @summary テナントにユーザーを作成(Create Tenant User)
         * @param {string} tenantId テナントID(Tenant ID)
         * @param {CreateTenantUserParam} [createTenantUserParam] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createTenantUser(tenantId: string, createTenantUserParam?: CreateTenantUserParam, options?: any): AxiosPromise<User> {
            return localVarFp.createTenantUser(tenantId, createTenantUserParam, options).then((request) => request(axios, basePath));
        },
        /**
         * テナントのユーザーに役割(ロール)を作成します。  Create roles on tenant users. 
         * @summary テナントのユーザー情報に役割(ロール)を作成(Create Tenant User Role)
         * @param {string} tenantId テナントID(Tenant ID)
         * @param {string} userId ユーザーID(User ID)
         * @param {number} envId 環境ID(Env ID)
         * @param {CreateTenantUserRolesParam} [createTenantUserRolesParam] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createTenantUserRoles(tenantId: string, userId: string, envId: number, createTenantUserRolesParam?: CreateTenantUserRolesParam, options?: any): AxiosPromise<void> {
            return localVarFp.createTenantUserRoles(tenantId, userId, envId, createTenantUserRolesParam, options).then((request) => request(axios, basePath));
        },
        /**
         * テナントからユーザーを削除します。  Delete a user from your tenant. 
         * @summary テナントのユーザー情報を削除(Delete Tenant User)
         * @param {string} tenantId テナントID(Tenant ID)
         * @param {string} userId ユーザーID(User ID)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteTenantUser(tenantId: string, userId: string, options?: any): AxiosPromise<void> {
            return localVarFp.deleteTenantUser(tenantId, userId, options).then((request) => request(axios, basePath));
        },
        /**
         * テナントのユーザーから役割(ロール)を削除します。  Remove a role from a tenant user. 
         * @summary テナントのユーザーから役割(ロール)を削除(Remove Role From Tenant User)
         * @param {string} tenantId テナントID(Tenant ID)
         * @param {string} userId ユーザーID(User ID)
         * @param {number} envId 環境ID(Env ID)
         * @param {string} roleName 役割(ロール)名(role name)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteTenantUserRole(tenantId: string, userId: string, envId: number, roleName: string, options?: any): AxiosPromise<void> {
            return localVarFp.deleteTenantUserRole(tenantId, userId, envId, roleName, options).then((request) => request(axios, basePath));
        },
        /**
         * ユーザーIDからテナントに所属しているユーザー情報を取得します。 複数テナントに所属している場合は別のオブジェクトとして返却されます。  Get information on user belonging to the tenant from the user ID. If the user belongs to multiple tenants, it will be returned as another object. 
         * @summary ユーザー情報を取得(Get User Info)
         * @param {string} userId ユーザーID(User ID)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllTenantUser(userId: string, options?: any): AxiosPromise<Users> {
            return localVarFp.getAllTenantUser(userId, options).then((request) => request(axios, basePath));
        },
        /**
         * テナントに所属しているユーザー全件を取得します。 複数テナントに所属する同一ユーザーは別のオブジェクトとして返却されます。 idは一意ではありません。  Get all users belonging to the tenant. The same user belonging to multiple tenants will be returned as a different object. Id is not unique. 
         * @summary ユーザー一覧を取得(Get Users)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllTenantUsers(options?: any): AxiosPromise<Users> {
            return localVarFp.getAllTenantUsers(options).then((request) => request(axios, basePath));
        },
        /**
         * テナントのユーザーをIDから一件取得します。  Get one tenant user by specific ID. 
         * @summary テナントのユーザー情報を取得(Get Tenant User)
         * @param {string} tenantId テナントID(Tenant ID)
         * @param {string} userId ユーザーID(User ID)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTenantUser(tenantId: string, userId: string, options?: any): AxiosPromise<User> {
            return localVarFp.getTenantUser(tenantId, userId, options).then((request) => request(axios, basePath));
        },
        /**
         * テナントに所属するユーザーを全件取得します。 idは一意です。  Get all the users belonging to the tenant. Id is unique. 
         * @summary テナントのユーザー一覧を取得(Get Tenant Users)
         * @param {string} tenantId テナントID(Tenant ID)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTenantUsers(tenantId: string, options?: any): AxiosPromise<Users> {
            return localVarFp.getTenantUsers(tenantId, options).then((request) => request(axios, basePath));
        },
        /**
         * テナントのユーザー属性情報を更新します。  Update tenant user attributes. 
         * @summary テナントのユーザー属性情報を更新(Update Tenant User Attribute)
         * @param {string} tenantId テナントID(Tenant ID)
         * @param {string} userId ユーザーID(User ID)
         * @param {UpdateTenantUserParam} [updateTenantUserParam] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateTenantUser(tenantId: string, userId: string, updateTenantUserParam?: UpdateTenantUserParam, options?: any): AxiosPromise<void> {
            return localVarFp.updateTenantUser(tenantId, userId, updateTenantUserParam, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * TenantUserApi - object-oriented interface
 * @export
 * @class TenantUserApi
 * @extends {BaseAPI}
 */
export class TenantUserApi extends BaseAPI {
    /**
     * テナントにユーザーを作成します。 attributesを空のオブジェクトにした場合、追加属性は空で作成されます。  Create a tenant user. If attributes is empty, the additional attributes will be created empty. 
     * @summary テナントにユーザーを作成(Create Tenant User)
     * @param {string} tenantId テナントID(Tenant ID)
     * @param {CreateTenantUserParam} [createTenantUserParam] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TenantUserApi
     */
    public createTenantUser(tenantId: string, createTenantUserParam?: CreateTenantUserParam, options?: AxiosRequestConfig) {
        return TenantUserApiFp(this.configuration).createTenantUser(tenantId, createTenantUserParam, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * テナントのユーザーに役割(ロール)を作成します。  Create roles on tenant users. 
     * @summary テナントのユーザー情報に役割(ロール)を作成(Create Tenant User Role)
     * @param {string} tenantId テナントID(Tenant ID)
     * @param {string} userId ユーザーID(User ID)
     * @param {number} envId 環境ID(Env ID)
     * @param {CreateTenantUserRolesParam} [createTenantUserRolesParam] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TenantUserApi
     */
    public createTenantUserRoles(tenantId: string, userId: string, envId: number, createTenantUserRolesParam?: CreateTenantUserRolesParam, options?: AxiosRequestConfig) {
        return TenantUserApiFp(this.configuration).createTenantUserRoles(tenantId, userId, envId, createTenantUserRolesParam, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * テナントからユーザーを削除します。  Delete a user from your tenant. 
     * @summary テナントのユーザー情報を削除(Delete Tenant User)
     * @param {string} tenantId テナントID(Tenant ID)
     * @param {string} userId ユーザーID(User ID)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TenantUserApi
     */
    public deleteTenantUser(tenantId: string, userId: string, options?: AxiosRequestConfig) {
        return TenantUserApiFp(this.configuration).deleteTenantUser(tenantId, userId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * テナントのユーザーから役割(ロール)を削除します。  Remove a role from a tenant user. 
     * @summary テナントのユーザーから役割(ロール)を削除(Remove Role From Tenant User)
     * @param {string} tenantId テナントID(Tenant ID)
     * @param {string} userId ユーザーID(User ID)
     * @param {number} envId 環境ID(Env ID)
     * @param {string} roleName 役割(ロール)名(role name)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TenantUserApi
     */
    public deleteTenantUserRole(tenantId: string, userId: string, envId: number, roleName: string, options?: AxiosRequestConfig) {
        return TenantUserApiFp(this.configuration).deleteTenantUserRole(tenantId, userId, envId, roleName, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ユーザーIDからテナントに所属しているユーザー情報を取得します。 複数テナントに所属している場合は別のオブジェクトとして返却されます。  Get information on user belonging to the tenant from the user ID. If the user belongs to multiple tenants, it will be returned as another object. 
     * @summary ユーザー情報を取得(Get User Info)
     * @param {string} userId ユーザーID(User ID)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TenantUserApi
     */
    public getAllTenantUser(userId: string, options?: AxiosRequestConfig) {
        return TenantUserApiFp(this.configuration).getAllTenantUser(userId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * テナントに所属しているユーザー全件を取得します。 複数テナントに所属する同一ユーザーは別のオブジェクトとして返却されます。 idは一意ではありません。  Get all users belonging to the tenant. The same user belonging to multiple tenants will be returned as a different object. Id is not unique. 
     * @summary ユーザー一覧を取得(Get Users)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TenantUserApi
     */
    public getAllTenantUsers(options?: AxiosRequestConfig) {
        return TenantUserApiFp(this.configuration).getAllTenantUsers(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * テナントのユーザーをIDから一件取得します。  Get one tenant user by specific ID. 
     * @summary テナントのユーザー情報を取得(Get Tenant User)
     * @param {string} tenantId テナントID(Tenant ID)
     * @param {string} userId ユーザーID(User ID)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TenantUserApi
     */
    public getTenantUser(tenantId: string, userId: string, options?: AxiosRequestConfig) {
        return TenantUserApiFp(this.configuration).getTenantUser(tenantId, userId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * テナントに所属するユーザーを全件取得します。 idは一意です。  Get all the users belonging to the tenant. Id is unique. 
     * @summary テナントのユーザー一覧を取得(Get Tenant Users)
     * @param {string} tenantId テナントID(Tenant ID)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TenantUserApi
     */
    public getTenantUsers(tenantId: string, options?: AxiosRequestConfig) {
        return TenantUserApiFp(this.configuration).getTenantUsers(tenantId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * テナントのユーザー属性情報を更新します。  Update tenant user attributes. 
     * @summary テナントのユーザー属性情報を更新(Update Tenant User Attribute)
     * @param {string} tenantId テナントID(Tenant ID)
     * @param {string} userId ユーザーID(User ID)
     * @param {UpdateTenantUserParam} [updateTenantUserParam] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TenantUserApi
     */
    public updateTenantUser(tenantId: string, userId: string, updateTenantUserParam?: UpdateTenantUserParam, options?: AxiosRequestConfig) {
        return TenantUserApiFp(this.configuration).updateTenantUser(tenantId, userId, updateTenantUserParam, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * UserAttributeApi - axios parameter creator
 * @export
 */
export const UserAttributeApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * SaaSus Platform にて保持するユーザーの追加属性を登録します。 例えば、ユーザー名を持たせる、誕生日を持たせるなど、ユーザーに紐付いた項目の定義を行うことができます。 一方で、個人情報を SaaSus Platform 側に持たせたくない場合は、このユーザー属性定義を行わずに SaaS 側で個人情報を持つことを検討してください。  Create additional user attributes to be kept on the SaaSus Platform. For example, you can define items associated with a user, such as user name, birthday, etc. If you don\'t want personal information on the SaaS Platform side, personal information can be kept on the SaaS side without user attribute definition. 
         * @summary ユーザー属性の作成(Create User Attributes)
         * @param {Attribute} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createUserAttribute: async (body?: Attribute, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/user-attributes`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * SaaSus Platform にて保持するユーザーの追加属性を削除します。  Delete user attributes kept on the SaaSus Platform. 
         * @summary ユーザー属性の削除(Delete User Attribute)
         * @param {string} attributeName 属性名(Attribute Name)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUserAttribute: async (attributeName: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'attributeName' is not null or undefined
            assertParamExists('deleteUserAttribute', 'attributeName', attributeName)
            const localVarPath = `/user-attributes/{attribute_name}`
                .replace(`{${"attribute_name"}}`, encodeURIComponent(String(attributeName)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * SaaSus Platform にて保持するユーザーの追加属性を取得します。 例えば、ユーザー名を持たせる、誕生日を持たせるなど、ユーザーに紐付いた項目の定義を行うことができます。 一方で、個人情報を SaaSus Platform 側に持たせたくない場合は、このユーザー属性定義を行わずに SaaS 側で個人情報を持つことを検討してください。  Get additional attributes of the user saved in the SaaSus Platform. For example, you can define items associated with a user, such as user name, birthday, etc. If you don\'t want personal information on the SaaS Platform side, personal information can be kept on the SaaS side without user attribute definition. 
         * @summary ユーザー属性の一覧を取得(Get User Attributes)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserAttributes: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/user-attributes`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UserAttributeApi - functional programming interface
 * @export
 */
export const UserAttributeApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = UserAttributeApiAxiosParamCreator(configuration)
    return {
        /**
         * SaaSus Platform にて保持するユーザーの追加属性を登録します。 例えば、ユーザー名を持たせる、誕生日を持たせるなど、ユーザーに紐付いた項目の定義を行うことができます。 一方で、個人情報を SaaSus Platform 側に持たせたくない場合は、このユーザー属性定義を行わずに SaaS 側で個人情報を持つことを検討してください。  Create additional user attributes to be kept on the SaaSus Platform. For example, you can define items associated with a user, such as user name, birthday, etc. If you don\'t want personal information on the SaaS Platform side, personal information can be kept on the SaaS side without user attribute definition. 
         * @summary ユーザー属性の作成(Create User Attributes)
         * @param {Attribute} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createUserAttribute(body?: Attribute, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Attribute>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createUserAttribute(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * SaaSus Platform にて保持するユーザーの追加属性を削除します。  Delete user attributes kept on the SaaSus Platform. 
         * @summary ユーザー属性の削除(Delete User Attribute)
         * @param {string} attributeName 属性名(Attribute Name)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteUserAttribute(attributeName: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteUserAttribute(attributeName, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * SaaSus Platform にて保持するユーザーの追加属性を取得します。 例えば、ユーザー名を持たせる、誕生日を持たせるなど、ユーザーに紐付いた項目の定義を行うことができます。 一方で、個人情報を SaaSus Platform 側に持たせたくない場合は、このユーザー属性定義を行わずに SaaS 側で個人情報を持つことを検討してください。  Get additional attributes of the user saved in the SaaSus Platform. For example, you can define items associated with a user, such as user name, birthday, etc. If you don\'t want personal information on the SaaS Platform side, personal information can be kept on the SaaS side without user attribute definition. 
         * @summary ユーザー属性の一覧を取得(Get User Attributes)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUserAttributes(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserAttributes>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUserAttributes(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * UserAttributeApi - factory interface
 * @export
 */
export const UserAttributeApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = UserAttributeApiFp(configuration)
    return {
        /**
         * SaaSus Platform にて保持するユーザーの追加属性を登録します。 例えば、ユーザー名を持たせる、誕生日を持たせるなど、ユーザーに紐付いた項目の定義を行うことができます。 一方で、個人情報を SaaSus Platform 側に持たせたくない場合は、このユーザー属性定義を行わずに SaaS 側で個人情報を持つことを検討してください。  Create additional user attributes to be kept on the SaaSus Platform. For example, you can define items associated with a user, such as user name, birthday, etc. If you don\'t want personal information on the SaaS Platform side, personal information can be kept on the SaaS side without user attribute definition. 
         * @summary ユーザー属性の作成(Create User Attributes)
         * @param {Attribute} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createUserAttribute(body?: Attribute, options?: any): AxiosPromise<Attribute> {
            return localVarFp.createUserAttribute(body, options).then((request) => request(axios, basePath));
        },
        /**
         * SaaSus Platform にて保持するユーザーの追加属性を削除します。  Delete user attributes kept on the SaaSus Platform. 
         * @summary ユーザー属性の削除(Delete User Attribute)
         * @param {string} attributeName 属性名(Attribute Name)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUserAttribute(attributeName: string, options?: any): AxiosPromise<void> {
            return localVarFp.deleteUserAttribute(attributeName, options).then((request) => request(axios, basePath));
        },
        /**
         * SaaSus Platform にて保持するユーザーの追加属性を取得します。 例えば、ユーザー名を持たせる、誕生日を持たせるなど、ユーザーに紐付いた項目の定義を行うことができます。 一方で、個人情報を SaaSus Platform 側に持たせたくない場合は、このユーザー属性定義を行わずに SaaS 側で個人情報を持つことを検討してください。  Get additional attributes of the user saved in the SaaSus Platform. For example, you can define items associated with a user, such as user name, birthday, etc. If you don\'t want personal information on the SaaS Platform side, personal information can be kept on the SaaS side without user attribute definition. 
         * @summary ユーザー属性の一覧を取得(Get User Attributes)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserAttributes(options?: any): AxiosPromise<UserAttributes> {
            return localVarFp.getUserAttributes(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * UserAttributeApi - object-oriented interface
 * @export
 * @class UserAttributeApi
 * @extends {BaseAPI}
 */
export class UserAttributeApi extends BaseAPI {
    /**
     * SaaSus Platform にて保持するユーザーの追加属性を登録します。 例えば、ユーザー名を持たせる、誕生日を持たせるなど、ユーザーに紐付いた項目の定義を行うことができます。 一方で、個人情報を SaaSus Platform 側に持たせたくない場合は、このユーザー属性定義を行わずに SaaS 側で個人情報を持つことを検討してください。  Create additional user attributes to be kept on the SaaSus Platform. For example, you can define items associated with a user, such as user name, birthday, etc. If you don\'t want personal information on the SaaS Platform side, personal information can be kept on the SaaS side without user attribute definition. 
     * @summary ユーザー属性の作成(Create User Attributes)
     * @param {Attribute} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserAttributeApi
     */
    public createUserAttribute(body?: Attribute, options?: AxiosRequestConfig) {
        return UserAttributeApiFp(this.configuration).createUserAttribute(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * SaaSus Platform にて保持するユーザーの追加属性を削除します。  Delete user attributes kept on the SaaSus Platform. 
     * @summary ユーザー属性の削除(Delete User Attribute)
     * @param {string} attributeName 属性名(Attribute Name)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserAttributeApi
     */
    public deleteUserAttribute(attributeName: string, options?: AxiosRequestConfig) {
        return UserAttributeApiFp(this.configuration).deleteUserAttribute(attributeName, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * SaaSus Platform にて保持するユーザーの追加属性を取得します。 例えば、ユーザー名を持たせる、誕生日を持たせるなど、ユーザーに紐付いた項目の定義を行うことができます。 一方で、個人情報を SaaSus Platform 側に持たせたくない場合は、このユーザー属性定義を行わずに SaaS 側で個人情報を持つことを検討してください。  Get additional attributes of the user saved in the SaaSus Platform. For example, you can define items associated with a user, such as user name, birthday, etc. If you don\'t want personal information on the SaaS Platform side, personal information can be kept on the SaaS side without user attribute definition. 
     * @summary ユーザー属性の一覧を取得(Get User Attributes)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserAttributeApi
     */
    public getUserAttributes(options?: AxiosRequestConfig) {
        return UserAttributeApiFp(this.configuration).getUserAttributes(options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * UserInfoApi - axios parameter creator
 * @export
 */
export const UserInfoApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * SaaS利用ユーザ(登録ユーザ)のIDトークンを元に、ユーザ情報を取得します。 IDトークンは、SaaSus Platform生成のログイン画面からログイン時にCallback URLに渡されます。 サーバ側でそのURLからIDトークンを取得し、このAPIを呼ぶことにより、該当ユーザの情報が取得できます。 取得した上には、所属テナントや役割(ロール)、料金プランなどが含まれているため、それを元に認可の実装を行うことが可能です。  User information is obtained based on the ID token of the SaaS user (registered user). The ID token is passed to the Callback URL during login from the SaaSus Platform generated login screen. User information can be obtained from calling this API with an ID token from the URL on the server side. Since the acquired tenant, role (role), price plan, etc. are included, it is possible to implement authorization based on it. 
         * @summary ユーザー情報取得(Get User Info)
         * @param {string} token IDトークン(ID Token)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserInfo: async (token: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'token' is not null or undefined
            assertParamExists('getUserInfo', 'token', token)
            const localVarPath = `/userinfo`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (token !== undefined) {
                localVarQueryParameter['token'] = token;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UserInfoApi - functional programming interface
 * @export
 */
export const UserInfoApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = UserInfoApiAxiosParamCreator(configuration)
    return {
        /**
         * SaaS利用ユーザ(登録ユーザ)のIDトークンを元に、ユーザ情報を取得します。 IDトークンは、SaaSus Platform生成のログイン画面からログイン時にCallback URLに渡されます。 サーバ側でそのURLからIDトークンを取得し、このAPIを呼ぶことにより、該当ユーザの情報が取得できます。 取得した上には、所属テナントや役割(ロール)、料金プランなどが含まれているため、それを元に認可の実装を行うことが可能です。  User information is obtained based on the ID token of the SaaS user (registered user). The ID token is passed to the Callback URL during login from the SaaSus Platform generated login screen. User information can be obtained from calling this API with an ID token from the URL on the server side. Since the acquired tenant, role (role), price plan, etc. are included, it is possible to implement authorization based on it. 
         * @summary ユーザー情報取得(Get User Info)
         * @param {string} token IDトークン(ID Token)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUserInfo(token: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserInfo>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUserInfo(token, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * UserInfoApi - factory interface
 * @export
 */
export const UserInfoApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = UserInfoApiFp(configuration)
    return {
        /**
         * SaaS利用ユーザ(登録ユーザ)のIDトークンを元に、ユーザ情報を取得します。 IDトークンは、SaaSus Platform生成のログイン画面からログイン時にCallback URLに渡されます。 サーバ側でそのURLからIDトークンを取得し、このAPIを呼ぶことにより、該当ユーザの情報が取得できます。 取得した上には、所属テナントや役割(ロール)、料金プランなどが含まれているため、それを元に認可の実装を行うことが可能です。  User information is obtained based on the ID token of the SaaS user (registered user). The ID token is passed to the Callback URL during login from the SaaSus Platform generated login screen. User information can be obtained from calling this API with an ID token from the URL on the server side. Since the acquired tenant, role (role), price plan, etc. are included, it is possible to implement authorization based on it. 
         * @summary ユーザー情報取得(Get User Info)
         * @param {string} token IDトークン(ID Token)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserInfo(token: string, options?: any): AxiosPromise<UserInfo> {
            return localVarFp.getUserInfo(token, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * UserInfoApi - object-oriented interface
 * @export
 * @class UserInfoApi
 * @extends {BaseAPI}
 */
export class UserInfoApi extends BaseAPI {
    /**
     * SaaS利用ユーザ(登録ユーザ)のIDトークンを元に、ユーザ情報を取得します。 IDトークンは、SaaSus Platform生成のログイン画面からログイン時にCallback URLに渡されます。 サーバ側でそのURLからIDトークンを取得し、このAPIを呼ぶことにより、該当ユーザの情報が取得できます。 取得した上には、所属テナントや役割(ロール)、料金プランなどが含まれているため、それを元に認可の実装を行うことが可能です。  User information is obtained based on the ID token of the SaaS user (registered user). The ID token is passed to the Callback URL during login from the SaaSus Platform generated login screen. User information can be obtained from calling this API with an ID token from the URL on the server side. Since the acquired tenant, role (role), price plan, etc. are included, it is possible to implement authorization based on it. 
     * @summary ユーザー情報取得(Get User Info)
     * @param {string} token IDトークン(ID Token)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserInfoApi
     */
    public getUserInfo(token: string, options?: AxiosRequestConfig) {
        return UserInfoApiFp(this.configuration).getUserInfo(token, options).then((request) => request(this.axios, this.basePath));
    }
}


