/* tslint:disable */
/* eslint-disable */
/**
 * SaaSus Auth API Schema
 * スキーマ
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * アカウント認証設定 未提供の機能のため、変更・保存はできません 
 * @export
 * @interface AccountVerification
 */
export interface AccountVerification {
    /**
     * code: 検証コード link: 検証リンク ※ 未提供の機能のため、変更・保存はできません 
     * @type {string}
     * @memberof AccountVerification
     */
    'verification_method': AccountVerificationVerificationMethodEnum;
    /**
     * email: Eメール sms: SMS smsOrEmail: SMS不可の場合にEメール 
     * @type {string}
     * @memberof AccountVerification
     */
    'sending_to': AccountVerificationSendingToEnum;
}

export const AccountVerificationVerificationMethodEnum = {
    Code: 'code',
    Link: 'link'
} as const;

export type AccountVerificationVerificationMethodEnum = typeof AccountVerificationVerificationMethodEnum[keyof typeof AccountVerificationVerificationMethodEnum];
export const AccountVerificationSendingToEnum = {
    Email: 'email',
    Sms: 'sms',
    SmsOrEmail: 'smsOrEmail'
} as const;

export type AccountVerificationSendingToEnum = typeof AccountVerificationSendingToEnum[keyof typeof AccountVerificationSendingToEnum];

/**
 * 
 * @export
 * @interface ApiKeys
 */
export interface ApiKeys {
    /**
     * APIキー
     * @type {Array<string>}
     * @memberof ApiKeys
     */
    'api_keys': Array<string>;
}
/**
 * 
 * @export
 * @interface Attribute
 */
export interface Attribute {
    /**
     * 属性名
     * @type {string}
     * @memberof Attribute
     */
    'attribute_name': string;
    /**
     * 表示名
     * @type {string}
     * @memberof Attribute
     */
    'display_name': string;
    /**
     * 
     * @type {AttributeType}
     * @memberof Attribute
     */
    'attribute_type': AttributeType;
}
/**
 * 型（dateはYYYY-MM-DDの形式で使用する事ができます。）
 * @export
 * @enum {string}
 */

export const AttributeType = {
    String: 'string',
    Number: 'number',
    Bool: 'bool',
    Date: 'date'
} as const;

export type AttributeType = typeof AttributeType[keyof typeof AttributeType];


/**
 * 
 * @export
 * @interface AuthInfo
 */
export interface AuthInfo {
    /**
     * 認証後遷移先
     * @type {string}
     * @memberof AuthInfo
     */
    'callback_url': string;
}
/**
 * 
 * @export
 * @interface AuthorizationTempCode
 */
export interface AuthorizationTempCode {
    /**
     * 
     * @type {string}
     * @memberof AuthorizationTempCode
     */
    'code': string;
}
/**
 * 中国の寧夏、北京を除く全てのAWSリージョンが選択可能です。
 * @export
 * @enum {string}
 */

export const AwsRegion = {
    UsEast1: 'us-east-1',
    UsEast2: 'us-east-2',
    UsWest1: 'us-west-1',
    UsWest2: 'us-west-2',
    AfSouth1: 'af-south-1',
    ApEast1: 'ap-east-1',
    ApSouth1: 'ap-south-1',
    ApNortheast1: 'ap-northeast-1',
    ApNortheast2: 'ap-northeast-2',
    ApNortheast3: 'ap-northeast-3',
    ApSoutheast1: 'ap-southeast-1',
    ApSoutheast2: 'ap-southeast-2',
    ApSoutheast3: 'ap-southeast-3',
    CaCentral1: 'ca-central-1',
    EuCentral1: 'eu-central-1',
    EuNorth1: 'eu-north-1',
    EuSouth1: 'eu-south-1',
    EuWest1: 'eu-west-1',
    EuWest2: 'eu-west-2',
    EuWest3: 'eu-west-3',
    MeSouth1: 'me-south-1',
    SaEast1: 'sa-east-1'
} as const;

export type AwsRegion = typeof AwsRegion[keyof typeof AwsRegion];


/**
 * 
 * @export
 * @interface BasicInfo
 */
export interface BasicInfo {
    /**
     * ドメイン名
     * @type {string}
     * @memberof BasicInfo
     */
    'domain_name': string;
    /**
     * DNSレコードの検証結果
     * @type {boolean}
     * @memberof BasicInfo
     */
    'is_dns_validated': boolean;
    /**
     * 
     * @type {DnsRecord}
     * @memberof BasicInfo
     */
    'certificate_dns_record': DnsRecord;
    /**
     * 
     * @type {DnsRecord}
     * @memberof BasicInfo
     */
    'cloud_front_dns_record': DnsRecord;
    /**
     * DKIM DNS レコード
     * @type {Array<DnsRecord>}
     * @memberof BasicInfo
     */
    'dkim_dns_records': Array<DnsRecord>;
    /**
     * ドメイン名
     * @type {string}
     * @memberof BasicInfo
     */
    'default_domain_name': string;
}
/**
 * 
 * @export
 * @interface ClientSecret
 */
export interface ClientSecret {
    /**
     * クライアントシークレット
     * @type {string}
     * @memberof ClientSecret
     */
    'client_secret': string;
}
/**
 * 
 * @export
 * @interface CreateSaasUserParam
 */
export interface CreateSaasUserParam {
    /**
     * メールアドレス
     * @type {string}
     * @memberof CreateSaasUserParam
     */
    'email': string;
    /**
     * 
     * @type {string}
     * @memberof CreateSaasUserParam
     */
    'password': string;
}
/**
 * 
 * @export
 * @interface CreateSecretCodeParam
 */
export interface CreateSecretCodeParam {
    /**
     * アクセストークン
     * @type {string}
     * @memberof CreateSecretCodeParam
     */
    'access_token': string;
}
/**
 * 
 * @export
 * @interface CreateTenantUserParam
 */
export interface CreateTenantUserParam {
    /**
     * メールアドレス
     * @type {string}
     * @memberof CreateTenantUserParam
     */
    'email': string;
    /**
     * 属性情報（SaaSus コンソールでテナント属性定義を行い設定した情報）
     * @type {{ [key: string]: any; }}
     * @memberof CreateTenantUserParam
     */
    'attributes': { [key: string]: any; };
}
/**
 * 
 * @export
 * @interface CreateTenantUserRolesParam
 */
export interface CreateTenantUserRolesParam {
    /**
     * 役割(ロール)情報
     * @type {Array<string>}
     * @memberof CreateTenantUserRolesParam
     */
    'role_names': Array<string>;
}
/**
 * 
 * @export
 * @interface Credentials
 */
export interface Credentials {
    /**
     * IDトークン
     * @type {string}
     * @memberof Credentials
     */
    'id_token': string;
    /**
     * アクセストークン
     * @type {string}
     * @memberof Credentials
     */
    'access_token': string;
    /**
     * リフレッシュトークン
     * @type {string}
     * @memberof Credentials
     */
    'refresh_token'?: string;
}
/**
 * 
 * @export
 * @interface CustomizePageProps
 */
export interface CustomizePageProps {
    /**
     * 画面のHTMLを編集できます ※ 未提供の機能のため、変更・保存はできません 
     * @type {string}
     * @memberof CustomizePageProps
     */
    'html_contents': string;
    /**
     * 利用規約の同意チェックボックスを表示するが設定されているか
     * @type {boolean}
     * @memberof CustomizePageProps
     */
    'is_terms_of_service': boolean;
    /**
     * プライバシーポリシーチェックボックスを表示するが設定されているか
     * @type {boolean}
     * @memberof CustomizePageProps
     */
    'is_privacy_policy': boolean;
}
/**
 * 
 * @export
 * @interface CustomizePageSettings
 */
export interface CustomizePageSettings {
    /**
     * サービスアイコン
     * @type {string}
     * @memberof CustomizePageSettings
     */
    'icon': string;
    /**
     * ファビコン
     * @type {string}
     * @memberof CustomizePageSettings
     */
    'favicon': string;
    /**
     * サービス名
     * @type {string}
     * @memberof CustomizePageSettings
     */
    'title': string;
    /**
     * 利用規約URL
     * @type {string}
     * @memberof CustomizePageSettings
     */
    'terms_of_service_url': string;
    /**
     * プライバシーポリシーURL
     * @type {string}
     * @memberof CustomizePageSettings
     */
    'privacy_policy_url': string;
    /**
     * Google Tag Manager コンテナ ID
     * @type {string}
     * @memberof CustomizePageSettings
     */
    'google_tag_manager_container_id': string;
}
/**
 * 
 * @export
 * @interface CustomizePageSettingsAllOf
 */
export interface CustomizePageSettingsAllOf {
    /**
     * サービスアイコン
     * @type {string}
     * @memberof CustomizePageSettingsAllOf
     */
    'icon': string;
    /**
     * ファビコン
     * @type {string}
     * @memberof CustomizePageSettingsAllOf
     */
    'favicon': string;
}
/**
 * 
 * @export
 * @interface CustomizePageSettingsProps
 */
export interface CustomizePageSettingsProps {
    /**
     * サービス名
     * @type {string}
     * @memberof CustomizePageSettingsProps
     */
    'title': string;
    /**
     * 利用規約URL
     * @type {string}
     * @memberof CustomizePageSettingsProps
     */
    'terms_of_service_url': string;
    /**
     * プライバシーポリシーURL
     * @type {string}
     * @memberof CustomizePageSettingsProps
     */
    'privacy_policy_url': string;
    /**
     * Google Tag Manager コンテナ ID
     * @type {string}
     * @memberof CustomizePageSettingsProps
     */
    'google_tag_manager_container_id': string;
}
/**
 * 
 * @export
 * @interface CustomizePages
 */
export interface CustomizePages {
    /**
     * 
     * @type {CustomizePageProps}
     * @memberof CustomizePages
     */
    'sign_up_page': CustomizePageProps;
    /**
     * 
     * @type {CustomizePageProps}
     * @memberof CustomizePages
     */
    'sign_in_page': CustomizePageProps;
    /**
     * 
     * @type {CustomizePageProps}
     * @memberof CustomizePages
     */
    'password_reset_page': CustomizePageProps;
}
/**
 * 信頼済みデバイスの記憶の設定
 * @export
 * @interface DeviceConfiguration
 */
export interface DeviceConfiguration {
    /**
     * always: 常に記憶する userOptIn: ユーザーオプトイン no: 記憶しない 
     * @type {string}
     * @memberof DeviceConfiguration
     */
    'device_remembering': DeviceConfigurationDeviceRememberingEnum;
}

export const DeviceConfigurationDeviceRememberingEnum = {
    Always: 'always',
    UserOptIn: 'userOptIn',
    No: 'no'
} as const;

export type DeviceConfigurationDeviceRememberingEnum = typeof DeviceConfigurationDeviceRememberingEnum[keyof typeof DeviceConfigurationDeviceRememberingEnum];

/**
 * 
 * @export
 * @interface DnsRecord
 */
export interface DnsRecord {
    /**
     * CNAMEリソースレコード
     * @type {string}
     * @memberof DnsRecord
     */
    'type': DnsRecordTypeEnum;
    /**
     * レコード名
     * @type {string}
     * @memberof DnsRecord
     */
    'name': string;
    /**
     * 値
     * @type {string}
     * @memberof DnsRecord
     */
    'value': string;
}

export const DnsRecordTypeEnum = {
    Cname: 'CNAME'
} as const;

export type DnsRecordTypeEnum = typeof DnsRecordTypeEnum[keyof typeof DnsRecordTypeEnum];

/**
 * 環境情報
 * @export
 * @interface Env
 */
export interface Env {
    /**
     * 
     * @type {number}
     * @memberof Env
     */
    'id': number;
    /**
     * 環境名
     * @type {string}
     * @memberof Env
     */
    'name': string;
}
/**
 * env一覧
 * @export
 * @interface Envs
 */
export interface Envs {
    /**
     * 
     * @type {Array<Env>}
     * @memberof Envs
     */
    'envs': Array<Env>;
}
/**
 * 
 * @export
 * @interface EventBridgeSettings
 */
export interface EventBridgeSettings {
    /**
     * AWSアカウントID
     * @type {string}
     * @memberof EventBridgeSettings
     */
    'aws_account_id': string;
    /**
     * 
     * @type {AwsRegion}
     * @memberof EventBridgeSettings
     */
    'aws_region': AwsRegion;
}
/**
 * 
 * @export
 * @interface IdentityProviderProps
 */
export interface IdentityProviderProps {
    /**
     * 
     * @type {string}
     * @memberof IdentityProviderProps
     */
    'application_id': string;
    /**
     * 
     * @type {string}
     * @memberof IdentityProviderProps
     */
    'application_secret': string;
    /**
     * 
     * @type {string}
     * @memberof IdentityProviderProps
     */
    'approval_scope': string;
}
/**
 * 
 * @export
 * @interface IdentityProviders
 */
export interface IdentityProviders {
    /**
     * 
     * @type {IdentityProviderProps}
     * @memberof IdentityProviders
     */
    'google': IdentityProviderProps;
}
/**
 * 
 * @export
 * @interface MessageTemplate
 */
export interface MessageTemplate {
    /**
     * タイトル
     * @type {string}
     * @memberof MessageTemplate
     */
    'subject': string;
    /**
     * メッセージ
     * @type {string}
     * @memberof MessageTemplate
     */
    'message': string;
}
/**
 * MFAデバイス認証設定 未提供の機能のため、変更・保存はできません 
 * @export
 * @interface MfaConfiguration
 */
export interface MfaConfiguration {
    /**
     * on: 全ユーザーがログイン時に適用 optional: MFA要素が有効になっている個別ユーザーに適用 ※ パラメータは現在optionalで固定となります。 
     * @type {string}
     * @memberof MfaConfiguration
     */
    'mfa_configuration': MfaConfigurationMfaConfigurationEnum;
}

export const MfaConfigurationMfaConfigurationEnum = {
    On: 'on',
    Optional: 'optional'
} as const;

export type MfaConfigurationMfaConfigurationEnum = typeof MfaConfigurationMfaConfigurationEnum[keyof typeof MfaConfigurationMfaConfigurationEnum];

/**
 * 
 * @export
 * @interface MfaPreference
 */
export interface MfaPreference {
    /**
     * MFAを有効にするか否か
     * @type {boolean}
     * @memberof MfaPreference
     */
    'enabled': boolean;
    /**
     * MFAの方法(enabledがtrueの場合は必須)
     * @type {string}
     * @memberof MfaPreference
     */
    'method'?: MfaPreferenceMethodEnum;
}

export const MfaPreferenceMethodEnum = {
    SoftwareToken: 'softwareToken'
} as const;

export type MfaPreferenceMethodEnum = typeof MfaPreferenceMethodEnum[keyof typeof MfaPreferenceMethodEnum];

/**
 * 
 * @export
 * @interface ModelError
 */
export interface ModelError {
    /**
     * permission_denied
     * @type {string}
     * @memberof ModelError
     */
    'type': string;
    /**
     * Error message
     * @type {string}
     * @memberof ModelError
     */
    'message': string;
    /**
     * 
     * @type {{ [key: string]: any; }}
     * @memberof ModelError
     */
    'data'?: { [key: string]: any; };
}
/**
 * 
 * @export
 * @interface NotificationMessages
 */
export interface NotificationMessages {
    /**
     * 
     * @type {MessageTemplate}
     * @memberof NotificationMessages
     */
    'sign_up': MessageTemplate;
    /**
     * 
     * @type {MessageTemplate}
     * @memberof NotificationMessages
     */
    'create_user': MessageTemplate;
    /**
     * 
     * @type {MessageTemplate}
     * @memberof NotificationMessages
     */
    'resend_code': MessageTemplate;
    /**
     * 
     * @type {MessageTemplate}
     * @memberof NotificationMessages
     */
    'forgot_password': MessageTemplate;
    /**
     * 
     * @type {MessageTemplate}
     * @memberof NotificationMessages
     */
    'update_user_attribute': MessageTemplate;
    /**
     * 
     * @type {MessageTemplate}
     * @memberof NotificationMessages
     */
    'verify_user_attribute': MessageTemplate;
    /**
     * 
     * @type {MessageTemplate}
     * @memberof NotificationMessages
     */
    'authentication_mfa': MessageTemplate;
}
/**
 * パスワードポリシー
 * @export
 * @interface PasswordPolicy
 */
export interface PasswordPolicy {
    /**
     * 最小文字数
     * @type {number}
     * @memberof PasswordPolicy
     */
    'minimum_length': number;
    /**
     * 一文字以上の小文字を含むが設定されているか
     * @type {boolean}
     * @memberof PasswordPolicy
     */
    'is_require_lowercase': boolean;
    /**
     * 一文字以上の数字を含むが設定されているか
     * @type {boolean}
     * @memberof PasswordPolicy
     */
    'is_require_numbers': boolean;
    /**
     * 一文字以上の特殊文字を含むが設定されているか
     * @type {boolean}
     * @memberof PasswordPolicy
     */
    'is_require_symbols': boolean;
    /**
     * 一文字以上の大文字を含むが設定されているか
     * @type {boolean}
     * @memberof PasswordPolicy
     */
    'is_require_uppercase': boolean;
    /**
     * 仮パスワードの有効期限
     * @type {number}
     * @memberof PasswordPolicy
     */
    'temporary_password_validity_days': number;
}
/**
 * 
 * @export
 * @interface PlanHistories
 */
export interface PlanHistories {
    /**
     * 料金プラン履歴
     * @type {Array<PlanHistory>}
     * @memberof PlanHistories
     */
    'plan_histories': Array<PlanHistory>;
}
/**
 * 
 * @export
 * @interface PlanHistory
 */
export interface PlanHistory {
    /**
     * 
     * @type {string}
     * @memberof PlanHistory
     */
    'plan_id': string;
    /**
     * 登録日
     * @type {string}
     * @memberof PlanHistory
     */
    'plan_applied_at': string;
}
/**
 * reCAPTCHA認証設定 ※ 未提供の機能のため、変更・保存はできません 
 * @export
 * @interface RecaptchaProps
 */
export interface RecaptchaProps {
    /**
     * Site key
     * @type {string}
     * @memberof RecaptchaProps
     */
    'site_key': string;
    /**
     * Secret key
     * @type {string}
     * @memberof RecaptchaProps
     */
    'secret_key': string;
}
/**
 * 役割(ロール)情報
 * @export
 * @interface Role
 */
export interface Role {
    /**
     * 役割(ロール)名
     * @type {string}
     * @memberof Role
     */
    'role_name': string;
    /**
     * 役割(ロール)表示名
     * @type {string}
     * @memberof Role
     */
    'display_name': string;
}
/**
 * 
 * @export
 * @interface Roles
 */
export interface Roles {
    /**
     * 
     * @type {Array<Role>}
     * @memberof Roles
     */
    'roles': Array<Role>;
}
/**
 * 
 * @export
 * @interface SaasID
 */
export interface SaasID {
    /**
     * 
     * @type {string}
     * @memberof SaasID
     */
    'tenant_id': string;
    /**
     * 
     * @type {number}
     * @memberof SaasID
     */
    'env_id': number;
    /**
     * saas id
     * @type {string}
     * @memberof SaasID
     */
    'saas_id': string;
}
/**
 * 
 * @export
 * @interface SaasUser
 */
export interface SaasUser {
    /**
     * 
     * @type {string}
     * @memberof SaasUser
     */
    'id': string;
    /**
     * メールアドレス
     * @type {string}
     * @memberof SaasUser
     */
    'email': string;
}
/**
 * 
 * @export
 * @interface SaasUsers
 */
export interface SaasUsers {
    /**
     * 
     * @type {Array<SaasUser>}
     * @memberof SaasUsers
     */
    'users': Array<SaasUser>;
}
/**
 * セルフサインアップを許可設定
 * @export
 * @interface SelfRegist
 */
export interface SelfRegist {
    /**
     * 
     * @type {boolean}
     * @memberof SelfRegist
     */
    'enable': boolean;
}
/**
 * 
 * @export
 * @interface SignInSettings
 */
export interface SignInSettings {
    /**
     * 
     * @type {PasswordPolicy}
     * @memberof SignInSettings
     */
    'password_policy': PasswordPolicy;
    /**
     * 
     * @type {DeviceConfiguration}
     * @memberof SignInSettings
     */
    'device_configuration': DeviceConfiguration;
    /**
     * 
     * @type {MfaConfiguration}
     * @memberof SignInSettings
     */
    'mfa_configuration': MfaConfiguration;
    /**
     * 
     * @type {RecaptchaProps}
     * @memberof SignInSettings
     */
    'recaptcha_props': RecaptchaProps;
    /**
     * 
     * @type {AccountVerification}
     * @memberof SignInSettings
     */
    'account_verification': AccountVerification;
    /**
     * 
     * @type {SelfRegist}
     * @memberof SignInSettings
     */
    'self_regist': SelfRegist;
}
/**
 * 
 * @export
 * @interface SoftwareTokenSecretCode
 */
export interface SoftwareTokenSecretCode {
    /**
     * シークレットコード
     * @type {string}
     * @memberof SoftwareTokenSecretCode
     */
    'secret_code': string;
}
/**
 * 
 * @export
 * @interface Tenant
 */
export interface Tenant {
    /**
     * 
     * @type {string}
     * @memberof Tenant
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof Tenant
     */
    'plan_id'?: string;
    /**
     * テナント名
     * @type {string}
     * @memberof Tenant
     */
    'name': string;
    /**
     * 属性情報
     * @type {{ [key: string]: any; }}
     * @memberof Tenant
     */
    'attributes': { [key: string]: any; };
    /**
     * 
     * @type {string}
     * @memberof Tenant
     */
    'next_plan_id'?: string;
    /**
     * 次回料金プラン開始日
     * @type {string}
     * @memberof Tenant
     */
    'using_next_plan_from'?: string;
    /**
     * 事務管理部門スタッフメールアドレス
     * @type {string}
     * @memberof Tenant
     */
    'back_office_staff_email': string;
    /**
     * 料金プラン履歴
     * @type {Array<PlanHistory>}
     * @memberof Tenant
     */
    'plan_histories': Array<PlanHistory>;
}
/**
 * 
 * @export
 * @interface TenantAllOf
 */
export interface TenantAllOf {
    /**
     * 
     * @type {string}
     * @memberof TenantAllOf
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof TenantAllOf
     */
    'plan_id'?: string;
}
/**
 * 
 * @export
 * @interface TenantAttributes
 */
export interface TenantAttributes {
    /**
     * テナント属性定義
     * @type {Array<Attribute>}
     * @memberof TenantAttributes
     */
    'tenant_attributes': Array<Attribute>;
}
/**
 * 
 * @export
 * @interface TenantProps
 */
export interface TenantProps {
    /**
     * テナント名
     * @type {string}
     * @memberof TenantProps
     */
    'name': string;
    /**
     * 属性情報
     * @type {{ [key: string]: any; }}
     * @memberof TenantProps
     */
    'attributes': { [key: string]: any; };
    /**
     * 
     * @type {string}
     * @memberof TenantProps
     */
    'next_plan_id'?: string;
    /**
     * 次回料金プラン開始日
     * @type {string}
     * @memberof TenantProps
     */
    'using_next_plan_from'?: string;
    /**
     * 事務管理部門スタッフメールアドレス
     * @type {string}
     * @memberof TenantProps
     */
    'back_office_staff_email': string;
}
/**
 * テナント情報
 * @export
 * @interface Tenants
 */
export interface Tenants {
    /**
     * 
     * @type {Array<Tenant>}
     * @memberof Tenants
     */
    'tenants': Array<Tenant>;
}
/**
 * 
 * @export
 * @interface UpdateBasicInfoParam
 */
export interface UpdateBasicInfoParam {
    /**
     * 
     * @type {string}
     * @memberof UpdateBasicInfoParam
     */
    'domain_name': string;
}
/**
 * 
 * @export
 * @interface UpdateCustomizePageSettingsParam
 */
export interface UpdateCustomizePageSettingsParam {
    /**
     * サービスアイコン
     * @type {string}
     * @memberof UpdateCustomizePageSettingsParam
     */
    'icon': string;
    /**
     * ファビコン
     * @type {string}
     * @memberof UpdateCustomizePageSettingsParam
     */
    'favicon': string;
    /**
     * サービス名
     * @type {string}
     * @memberof UpdateCustomizePageSettingsParam
     */
    'title': string;
    /**
     * 利用規約URL
     * @type {string}
     * @memberof UpdateCustomizePageSettingsParam
     */
    'terms_of_service_url': string;
    /**
     * プライバシーポリシーURL
     * @type {string}
     * @memberof UpdateCustomizePageSettingsParam
     */
    'privacy_policy_url': string;
    /**
     * Google Tag Manager コンテナ ID
     * @type {string}
     * @memberof UpdateCustomizePageSettingsParam
     */
    'google_tag_manager_container_id': string;
}
/**
 * 
 * @export
 * @interface UpdateCustomizePageSettingsParamAllOf
 */
export interface UpdateCustomizePageSettingsParamAllOf {
    /**
     * サービスアイコン
     * @type {string}
     * @memberof UpdateCustomizePageSettingsParamAllOf
     */
    'icon': string;
    /**
     * ファビコン
     * @type {string}
     * @memberof UpdateCustomizePageSettingsParamAllOf
     */
    'favicon': string;
}
/**
 * 
 * @export
 * @interface UpdateCustomizePagesParam
 */
export interface UpdateCustomizePagesParam {
    /**
     * 
     * @type {CustomizePageProps}
     * @memberof UpdateCustomizePagesParam
     */
    'sign_up_page'?: CustomizePageProps;
    /**
     * 
     * @type {CustomizePageProps}
     * @memberof UpdateCustomizePagesParam
     */
    'sign_in_page'?: CustomizePageProps;
    /**
     * 
     * @type {CustomizePageProps}
     * @memberof UpdateCustomizePagesParam
     */
    'password_reset_page'?: CustomizePageProps;
}
/**
 * 
 * @export
 * @interface UpdateEnvParam
 */
export interface UpdateEnvParam {
    /**
     * 
     * @type {string}
     * @memberof UpdateEnvParam
     */
    'name': string;
}
/**
 * 
 * @export
 * @interface UpdateIdentityProviderParam
 */
export interface UpdateIdentityProviderParam {
    /**
     * 
     * @type {string}
     * @memberof UpdateIdentityProviderParam
     */
    'provider': UpdateIdentityProviderParamProviderEnum;
    /**
     * 
     * @type {IdentityProviderProps}
     * @memberof UpdateIdentityProviderParam
     */
    'identity_provider_props'?: IdentityProviderProps;
}

export const UpdateIdentityProviderParamProviderEnum = {
    Google: 'Google'
} as const;

export type UpdateIdentityProviderParamProviderEnum = typeof UpdateIdentityProviderParamProviderEnum[keyof typeof UpdateIdentityProviderParamProviderEnum];

/**
 * 
 * @export
 * @interface UpdateNotificationMessagesParam
 */
export interface UpdateNotificationMessagesParam {
    /**
     * 
     * @type {MessageTemplate}
     * @memberof UpdateNotificationMessagesParam
     */
    'sign_up'?: MessageTemplate;
    /**
     * 
     * @type {MessageTemplate}
     * @memberof UpdateNotificationMessagesParam
     */
    'create_user'?: MessageTemplate;
    /**
     * 
     * @type {MessageTemplate}
     * @memberof UpdateNotificationMessagesParam
     */
    'resend_code'?: MessageTemplate;
    /**
     * 
     * @type {MessageTemplate}
     * @memberof UpdateNotificationMessagesParam
     */
    'forgot_password'?: MessageTemplate;
    /**
     * 
     * @type {MessageTemplate}
     * @memberof UpdateNotificationMessagesParam
     */
    'update_user_attribute'?: MessageTemplate;
    /**
     * 
     * @type {MessageTemplate}
     * @memberof UpdateNotificationMessagesParam
     */
    'verify_user_attribute'?: MessageTemplate;
    /**
     * 
     * @type {MessageTemplate}
     * @memberof UpdateNotificationMessagesParam
     */
    'authentication_mfa'?: MessageTemplate;
}
/**
 * 
 * @export
 * @interface UpdateSaasUserEmailParam
 */
export interface UpdateSaasUserEmailParam {
    /**
     * 
     * @type {string}
     * @memberof UpdateSaasUserEmailParam
     */
    'email': string;
}
/**
 * 
 * @export
 * @interface UpdateSaasUserPasswordParam
 */
export interface UpdateSaasUserPasswordParam {
    /**
     * 
     * @type {string}
     * @memberof UpdateSaasUserPasswordParam
     */
    'password': string;
}
/**
 * 
 * @export
 * @interface UpdateSignInSettingsParam
 */
export interface UpdateSignInSettingsParam {
    /**
     * 
     * @type {PasswordPolicy}
     * @memberof UpdateSignInSettingsParam
     */
    'password_policy'?: PasswordPolicy;
    /**
     * 
     * @type {DeviceConfiguration}
     * @memberof UpdateSignInSettingsParam
     */
    'device_configuration'?: DeviceConfiguration;
    /**
     * 
     * @type {MfaConfiguration}
     * @memberof UpdateSignInSettingsParam
     */
    'mfa_configuration'?: MfaConfiguration;
    /**
     * 
     * @type {RecaptchaProps}
     * @memberof UpdateSignInSettingsParam
     */
    'recaptcha_props'?: RecaptchaProps;
    /**
     * 
     * @type {AccountVerification}
     * @memberof UpdateSignInSettingsParam
     */
    'account_verification'?: AccountVerification;
    /**
     * 
     * @type {SelfRegist}
     * @memberof UpdateSignInSettingsParam
     */
    'self_regist'?: SelfRegist;
}
/**
 * 
 * @export
 * @interface UpdateSoftwareTokenParam
 */
export interface UpdateSoftwareTokenParam {
    /**
     * アクセストークン
     * @type {string}
     * @memberof UpdateSoftwareTokenParam
     */
    'access_token': string;
    /**
     * 検証コード
     * @type {string}
     * @memberof UpdateSoftwareTokenParam
     */
    'verification_code': string;
}
/**
 * 
 * @export
 * @interface UpdateTenantUserParam
 */
export interface UpdateTenantUserParam {
    /**
     * 属性情報（SaaSus コンソールでテナント属性定義を行い設定した情報）
     * @type {{ [key: string]: any; }}
     * @memberof UpdateTenantUserParam
     */
    'attributes': { [key: string]: any; };
}
/**
 * 
 * @export
 * @interface User
 */
export interface User {
    /**
     * ユーザーID
     * @type {string}
     * @memberof User
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    'tenant_id': string;
    /**
     * テナント名
     * @type {string}
     * @memberof User
     */
    'tenant_name': string;
    /**
     * メールアドレス
     * @type {string}
     * @memberof User
     */
    'email': string;
    /**
     * 属性情報（SaaSus コンソールでテナント属性定義を行い設定された情報を取得します）
     * @type {{ [key: string]: any; }}
     * @memberof User
     */
    'attributes': { [key: string]: any; };
    /**
     * 
     * @type {Array<UserAvailableEnv>}
     * @memberof User
     */
    'envs': Array<UserAvailableEnv>;
}
/**
 * 
 * @export
 * @interface UserAttributes
 */
export interface UserAttributes {
    /**
     * ユーザー属性定義
     * @type {Array<Attribute>}
     * @memberof UserAttributes
     */
    'user_attributes': Array<Attribute>;
}
/**
 * 
 * @export
 * @interface UserAvailableEnv
 */
export interface UserAvailableEnv {
    /**
     * 
     * @type {number}
     * @memberof UserAvailableEnv
     */
    'id': number;
    /**
     * 環境名
     * @type {string}
     * @memberof UserAvailableEnv
     */
    'name': string;
    /**
     * 役割(ロール)情報
     * @type {Array<Role>}
     * @memberof UserAvailableEnv
     */
    'roles': Array<Role>;
}
/**
 * 
 * @export
 * @interface UserAvailableTenant
 */
export interface UserAvailableTenant {
    /**
     * 
     * @type {string}
     * @memberof UserAvailableTenant
     */
    'id': string;
    /**
     * テナント名
     * @type {string}
     * @memberof UserAvailableTenant
     */
    'name': string;
    /**
     * 
     * @type {boolean}
     * @memberof UserAvailableTenant
     */
    'completed_sign_up': boolean;
    /**
     * 環境情報、役割(ロール)情報
     * @type {Array<UserAvailableEnv>}
     * @memberof UserAvailableTenant
     */
    'envs': Array<UserAvailableEnv>;
    /**
     * 
     * @type {{ [key: string]: any; }}
     * @memberof UserAvailableTenant
     */
    'user_attribute': { [key: string]: any; };
    /**
     * 
     * @type {string}
     * @memberof UserAvailableTenant
     */
    'back_office_staff_email': string;
    /**
     * 
     * @type {string}
     * @memberof UserAvailableTenant
     */
    'plan_id'?: string;
}
/**
 * 
 * @export
 * @interface UserInfo
 */
export interface UserInfo {
    /**
     * 
     * @type {string}
     * @memberof UserInfo
     */
    'id': string;
    /**
     * メールアドレス
     * @type {string}
     * @memberof UserInfo
     */
    'email': string;
    /**
     * テナント情報
     * @type {Array<UserAvailableTenant>}
     * @memberof UserInfo
     */
    'tenants': Array<UserAvailableTenant>;
}
/**
 * 
 * @export
 * @interface Users
 */
export interface Users {
    /**
     * 
     * @type {Array<User>}
     * @memberof Users
     */
    'users': Array<User>;
}

/**
 * AuthInfoApi - axios parameter creator
 * @export
 */
export const AuthInfoApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * ログイン後に認証情報を渡す SaaS の URL を取得します。 ここで取得した URL へ認証情報を渡し、SaaSus SDK を利用してこの Callback の実装をすることが可能となります。 
         * @summary 認証情報を取得
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAuthInfo: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/auth-info`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * cognitoに設定している外部プロバイダ経由のサインイン情報取得
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getIdentityProviders: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/identity-providers`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ユーザーパスワードの要件設定を取得します。 アルファベット、数字、記号の組み合わせで、桁数を長くすれば解読されづらい安全なパスワードを設定することが可能となります。 
         * @summary パスワード要件を取得
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSignInSettings: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/sign-in-settings`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ログイン後に認証情報を渡す SaaS の URL を登録します。 ここで登録した URL に認証情報を渡し、SaaSus SDK を利用してこの Callback の実装をすることが可能となります。 
         * @summary 認証情報を更新
         * @param {AuthInfo} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateAuthInfo: async (body?: AuthInfo, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/auth-info`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 外部IDプロバイダのサインイン情報更新
         * @param {UpdateIdentityProviderParam} [updateIdentityProviderParam] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateIdentityProvider: async (updateIdentityProviderParam?: UpdateIdentityProviderParam, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/identity-providers`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateIdentityProviderParam, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ユーザーパスワードの要件設定を更新します。 アルファベット、数字、記号の組み合わせで、桁数を長くすれば解読されづらい安全なパスワードを設定することが可能となります。 
         * @summary パスワード要件を更新
         * @param {UpdateSignInSettingsParam} [updateSignInSettingsParam] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateSignInSettings: async (updateSignInSettingsParam?: UpdateSignInSettingsParam, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/sign-in-settings`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateSignInSettingsParam, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AuthInfoApi - functional programming interface
 * @export
 */
export const AuthInfoApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AuthInfoApiAxiosParamCreator(configuration)
    return {
        /**
         * ログイン後に認証情報を渡す SaaS の URL を取得します。 ここで取得した URL へ認証情報を渡し、SaaSus SDK を利用してこの Callback の実装をすることが可能となります。 
         * @summary 認証情報を取得
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAuthInfo(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AuthInfo>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAuthInfo(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * cognitoに設定している外部プロバイダ経由のサインイン情報取得
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getIdentityProviders(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IdentityProviders>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getIdentityProviders(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * ユーザーパスワードの要件設定を取得します。 アルファベット、数字、記号の組み合わせで、桁数を長くすれば解読されづらい安全なパスワードを設定することが可能となります。 
         * @summary パスワード要件を取得
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSignInSettings(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SignInSettings>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSignInSettings(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * ログイン後に認証情報を渡す SaaS の URL を登録します。 ここで登録した URL に認証情報を渡し、SaaSus SDK を利用してこの Callback の実装をすることが可能となります。 
         * @summary 認証情報を更新
         * @param {AuthInfo} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateAuthInfo(body?: AuthInfo, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateAuthInfo(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 外部IDプロバイダのサインイン情報更新
         * @param {UpdateIdentityProviderParam} [updateIdentityProviderParam] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateIdentityProvider(updateIdentityProviderParam?: UpdateIdentityProviderParam, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateIdentityProvider(updateIdentityProviderParam, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * ユーザーパスワードの要件設定を更新します。 アルファベット、数字、記号の組み合わせで、桁数を長くすれば解読されづらい安全なパスワードを設定することが可能となります。 
         * @summary パスワード要件を更新
         * @param {UpdateSignInSettingsParam} [updateSignInSettingsParam] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateSignInSettings(updateSignInSettingsParam?: UpdateSignInSettingsParam, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateSignInSettings(updateSignInSettingsParam, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * AuthInfoApi - factory interface
 * @export
 */
export const AuthInfoApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AuthInfoApiFp(configuration)
    return {
        /**
         * ログイン後に認証情報を渡す SaaS の URL を取得します。 ここで取得した URL へ認証情報を渡し、SaaSus SDK を利用してこの Callback の実装をすることが可能となります。 
         * @summary 認証情報を取得
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAuthInfo(options?: any): AxiosPromise<AuthInfo> {
            return localVarFp.getAuthInfo(options).then((request) => request(axios, basePath));
        },
        /**
         * cognitoに設定している外部プロバイダ経由のサインイン情報取得
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getIdentityProviders(options?: any): AxiosPromise<IdentityProviders> {
            return localVarFp.getIdentityProviders(options).then((request) => request(axios, basePath));
        },
        /**
         * ユーザーパスワードの要件設定を取得します。 アルファベット、数字、記号の組み合わせで、桁数を長くすれば解読されづらい安全なパスワードを設定することが可能となります。 
         * @summary パスワード要件を取得
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSignInSettings(options?: any): AxiosPromise<SignInSettings> {
            return localVarFp.getSignInSettings(options).then((request) => request(axios, basePath));
        },
        /**
         * ログイン後に認証情報を渡す SaaS の URL を登録します。 ここで登録した URL に認証情報を渡し、SaaSus SDK を利用してこの Callback の実装をすることが可能となります。 
         * @summary 認証情報を更新
         * @param {AuthInfo} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateAuthInfo(body?: AuthInfo, options?: any): AxiosPromise<void> {
            return localVarFp.updateAuthInfo(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 外部IDプロバイダのサインイン情報更新
         * @param {UpdateIdentityProviderParam} [updateIdentityProviderParam] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateIdentityProvider(updateIdentityProviderParam?: UpdateIdentityProviderParam, options?: any): AxiosPromise<void> {
            return localVarFp.updateIdentityProvider(updateIdentityProviderParam, options).then((request) => request(axios, basePath));
        },
        /**
         * ユーザーパスワードの要件設定を更新します。 アルファベット、数字、記号の組み合わせで、桁数を長くすれば解読されづらい安全なパスワードを設定することが可能となります。 
         * @summary パスワード要件を更新
         * @param {UpdateSignInSettingsParam} [updateSignInSettingsParam] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateSignInSettings(updateSignInSettingsParam?: UpdateSignInSettingsParam, options?: any): AxiosPromise<void> {
            return localVarFp.updateSignInSettings(updateSignInSettingsParam, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AuthInfoApi - object-oriented interface
 * @export
 * @class AuthInfoApi
 * @extends {BaseAPI}
 */
export class AuthInfoApi extends BaseAPI {
    /**
     * ログイン後に認証情報を渡す SaaS の URL を取得します。 ここで取得した URL へ認証情報を渡し、SaaSus SDK を利用してこの Callback の実装をすることが可能となります。 
     * @summary 認証情報を取得
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthInfoApi
     */
    public getAuthInfo(options?: AxiosRequestConfig) {
        return AuthInfoApiFp(this.configuration).getAuthInfo(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * cognitoに設定している外部プロバイダ経由のサインイン情報取得
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthInfoApi
     */
    public getIdentityProviders(options?: AxiosRequestConfig) {
        return AuthInfoApiFp(this.configuration).getIdentityProviders(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ユーザーパスワードの要件設定を取得します。 アルファベット、数字、記号の組み合わせで、桁数を長くすれば解読されづらい安全なパスワードを設定することが可能となります。 
     * @summary パスワード要件を取得
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthInfoApi
     */
    public getSignInSettings(options?: AxiosRequestConfig) {
        return AuthInfoApiFp(this.configuration).getSignInSettings(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ログイン後に認証情報を渡す SaaS の URL を登録します。 ここで登録した URL に認証情報を渡し、SaaSus SDK を利用してこの Callback の実装をすることが可能となります。 
     * @summary 認証情報を更新
     * @param {AuthInfo} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthInfoApi
     */
    public updateAuthInfo(body?: AuthInfo, options?: AxiosRequestConfig) {
        return AuthInfoApiFp(this.configuration).updateAuthInfo(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 外部IDプロバイダのサインイン情報更新
     * @param {UpdateIdentityProviderParam} [updateIdentityProviderParam] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthInfoApi
     */
    public updateIdentityProvider(updateIdentityProviderParam?: UpdateIdentityProviderParam, options?: AxiosRequestConfig) {
        return AuthInfoApiFp(this.configuration).updateIdentityProvider(updateIdentityProviderParam, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ユーザーパスワードの要件設定を更新します。 アルファベット、数字、記号の組み合わせで、桁数を長くすれば解読されづらい安全なパスワードを設定することが可能となります。 
     * @summary パスワード要件を更新
     * @param {UpdateSignInSettingsParam} [updateSignInSettingsParam] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthInfoApi
     */
    public updateSignInSettings(updateSignInSettingsParam?: UpdateSignInSettingsParam, options?: AxiosRequestConfig) {
        return AuthInfoApiFp(this.configuration).updateSignInSettings(updateSignInSettingsParam, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * BasicInfoApi - axios parameter creator
 * @export
 */
export const BasicInfoApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 監視対象となっている全ホストの状態を Amazon EventBridge 経由で提供するための設定をテストする為のテストイベントを送信します 
         * @summary イベント連携のテスト送信
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createEventBridgeTestEvent: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/eventbridge/test-event`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 監視対象となっている全ホストの状態を Amazon EventBridge 経由で提供するための設定を解除します 
         * @summary イベント連携設定を削除
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteEventBridgeSettings: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/eventbridge/settings`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 各種通知メールテンプレートを取得します。
         * @summary 通知メールテンプレートを取得
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findNotificationMessages: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/notification-messages`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * SaaSusID を元に設定されているドメイン名と CNAME レコードを取得します。 取得した CNAME レコードを DNS に設定することで、ログイン画面を生成します。 
         * @summary 基本設定情報の取得
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBasicInfo: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/basic-info`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 認証認可基本情報を取得します。
         * @summary 認証認可基本情報取得
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCustomizePageSettings: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/customize-page-settings`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 認証系画面設定情報（新規登録・ログイン・パスワードリセット等）を取得します。
         * @summary 認証系画面設定情報取得
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCustomizePages: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/customize-pages`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 監視対象となっている全ホストの状態をリアルタイムにAmazon EventBridge 経由で提供するための設定を取得します 
         * @summary イベント連携設定を取得
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEventBridgeSettings: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/eventbridge/settings`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 監視対象となっている全ホストの状態を Amazon EventBridge 経由で提供するための設定を更新します 
         * @summary イベント連携設定を更新
         * @param {EventBridgeSettings} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        saveEventBridgeSettings: async (body?: EventBridgeSettings, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/eventbridge/settings`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * SaaSus ID を元にパラメータとして設定したドメイン名を設定更新します。 CNAME レコードが生成されますので、 DNS に設定して下さい。 既に稼働中の SaaS アプリケーションに設定している場合には、動作に影響があります。 
         * @summary 基本設定情報の更新
         * @param {UpdateBasicInfoParam} [updateBasicInfoParam] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateBasicInfo: async (updateBasicInfoParam?: UpdateBasicInfoParam, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/basic-info`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateBasicInfoParam, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 認証認可基本情報を更新します。
         * @summary 認証認可基本情報更新
         * @param {UpdateCustomizePageSettingsParam} [updateCustomizePageSettingsParam] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateCustomizePageSettings: async (updateCustomizePageSettingsParam?: UpdateCustomizePageSettingsParam, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/customize-page-settings`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateCustomizePageSettingsParam, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 認証系画面設定情報（新規登録・ログイン・パスワードリセット等）を更新します。
         * @summary 認証系画面設定情報設定
         * @param {UpdateCustomizePagesParam} [updateCustomizePagesParam] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateCustomizePages: async (updateCustomizePagesParam?: UpdateCustomizePagesParam, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/customize-pages`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateCustomizePagesParam, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 各種通知メールテンプレート更新します。
         * @summary 通知メールテンプレートを更新
         * @param {UpdateNotificationMessagesParam} [updateNotificationMessagesParam] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateNotificationMessages: async (updateNotificationMessagesParam?: UpdateNotificationMessagesParam, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/notification-messages`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateNotificationMessagesParam, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * BasicInfoApi - functional programming interface
 * @export
 */
export const BasicInfoApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = BasicInfoApiAxiosParamCreator(configuration)
    return {
        /**
         * 監視対象となっている全ホストの状態を Amazon EventBridge 経由で提供するための設定をテストする為のテストイベントを送信します 
         * @summary イベント連携のテスト送信
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createEventBridgeTestEvent(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createEventBridgeTestEvent(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 監視対象となっている全ホストの状態を Amazon EventBridge 経由で提供するための設定を解除します 
         * @summary イベント連携設定を削除
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteEventBridgeSettings(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteEventBridgeSettings(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 各種通知メールテンプレートを取得します。
         * @summary 通知メールテンプレートを取得
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async findNotificationMessages(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<NotificationMessages>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.findNotificationMessages(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * SaaSusID を元に設定されているドメイン名と CNAME レコードを取得します。 取得した CNAME レコードを DNS に設定することで、ログイン画面を生成します。 
         * @summary 基本設定情報の取得
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getBasicInfo(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BasicInfo>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getBasicInfo(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 認証認可基本情報を取得します。
         * @summary 認証認可基本情報取得
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCustomizePageSettings(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CustomizePageSettings>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCustomizePageSettings(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 認証系画面設定情報（新規登録・ログイン・パスワードリセット等）を取得します。
         * @summary 認証系画面設定情報取得
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCustomizePages(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CustomizePages>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCustomizePages(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 監視対象となっている全ホストの状態をリアルタイムにAmazon EventBridge 経由で提供するための設定を取得します 
         * @summary イベント連携設定を取得
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getEventBridgeSettings(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EventBridgeSettings>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getEventBridgeSettings(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 監視対象となっている全ホストの状態を Amazon EventBridge 経由で提供するための設定を更新します 
         * @summary イベント連携設定を更新
         * @param {EventBridgeSettings} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async saveEventBridgeSettings(body?: EventBridgeSettings, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.saveEventBridgeSettings(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * SaaSus ID を元にパラメータとして設定したドメイン名を設定更新します。 CNAME レコードが生成されますので、 DNS に設定して下さい。 既に稼働中の SaaS アプリケーションに設定している場合には、動作に影響があります。 
         * @summary 基本設定情報の更新
         * @param {UpdateBasicInfoParam} [updateBasicInfoParam] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateBasicInfo(updateBasicInfoParam?: UpdateBasicInfoParam, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateBasicInfo(updateBasicInfoParam, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 認証認可基本情報を更新します。
         * @summary 認証認可基本情報更新
         * @param {UpdateCustomizePageSettingsParam} [updateCustomizePageSettingsParam] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateCustomizePageSettings(updateCustomizePageSettingsParam?: UpdateCustomizePageSettingsParam, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateCustomizePageSettings(updateCustomizePageSettingsParam, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 認証系画面設定情報（新規登録・ログイン・パスワードリセット等）を更新します。
         * @summary 認証系画面設定情報設定
         * @param {UpdateCustomizePagesParam} [updateCustomizePagesParam] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateCustomizePages(updateCustomizePagesParam?: UpdateCustomizePagesParam, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateCustomizePages(updateCustomizePagesParam, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 各種通知メールテンプレート更新します。
         * @summary 通知メールテンプレートを更新
         * @param {UpdateNotificationMessagesParam} [updateNotificationMessagesParam] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateNotificationMessages(updateNotificationMessagesParam?: UpdateNotificationMessagesParam, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateNotificationMessages(updateNotificationMessagesParam, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * BasicInfoApi - factory interface
 * @export
 */
export const BasicInfoApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = BasicInfoApiFp(configuration)
    return {
        /**
         * 監視対象となっている全ホストの状態を Amazon EventBridge 経由で提供するための設定をテストする為のテストイベントを送信します 
         * @summary イベント連携のテスト送信
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createEventBridgeTestEvent(options?: any): AxiosPromise<void> {
            return localVarFp.createEventBridgeTestEvent(options).then((request) => request(axios, basePath));
        },
        /**
         * 監視対象となっている全ホストの状態を Amazon EventBridge 経由で提供するための設定を解除します 
         * @summary イベント連携設定を削除
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteEventBridgeSettings(options?: any): AxiosPromise<void> {
            return localVarFp.deleteEventBridgeSettings(options).then((request) => request(axios, basePath));
        },
        /**
         * 各種通知メールテンプレートを取得します。
         * @summary 通知メールテンプレートを取得
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findNotificationMessages(options?: any): AxiosPromise<NotificationMessages> {
            return localVarFp.findNotificationMessages(options).then((request) => request(axios, basePath));
        },
        /**
         * SaaSusID を元に設定されているドメイン名と CNAME レコードを取得します。 取得した CNAME レコードを DNS に設定することで、ログイン画面を生成します。 
         * @summary 基本設定情報の取得
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBasicInfo(options?: any): AxiosPromise<BasicInfo> {
            return localVarFp.getBasicInfo(options).then((request) => request(axios, basePath));
        },
        /**
         * 認証認可基本情報を取得します。
         * @summary 認証認可基本情報取得
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCustomizePageSettings(options?: any): AxiosPromise<CustomizePageSettings> {
            return localVarFp.getCustomizePageSettings(options).then((request) => request(axios, basePath));
        },
        /**
         * 認証系画面設定情報（新規登録・ログイン・パスワードリセット等）を取得します。
         * @summary 認証系画面設定情報取得
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCustomizePages(options?: any): AxiosPromise<CustomizePages> {
            return localVarFp.getCustomizePages(options).then((request) => request(axios, basePath));
        },
        /**
         * 監視対象となっている全ホストの状態をリアルタイムにAmazon EventBridge 経由で提供するための設定を取得します 
         * @summary イベント連携設定を取得
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEventBridgeSettings(options?: any): AxiosPromise<EventBridgeSettings> {
            return localVarFp.getEventBridgeSettings(options).then((request) => request(axios, basePath));
        },
        /**
         * 監視対象となっている全ホストの状態を Amazon EventBridge 経由で提供するための設定を更新します 
         * @summary イベント連携設定を更新
         * @param {EventBridgeSettings} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        saveEventBridgeSettings(body?: EventBridgeSettings, options?: any): AxiosPromise<void> {
            return localVarFp.saveEventBridgeSettings(body, options).then((request) => request(axios, basePath));
        },
        /**
         * SaaSus ID を元にパラメータとして設定したドメイン名を設定更新します。 CNAME レコードが生成されますので、 DNS に設定して下さい。 既に稼働中の SaaS アプリケーションに設定している場合には、動作に影響があります。 
         * @summary 基本設定情報の更新
         * @param {UpdateBasicInfoParam} [updateBasicInfoParam] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateBasicInfo(updateBasicInfoParam?: UpdateBasicInfoParam, options?: any): AxiosPromise<void> {
            return localVarFp.updateBasicInfo(updateBasicInfoParam, options).then((request) => request(axios, basePath));
        },
        /**
         * 認証認可基本情報を更新します。
         * @summary 認証認可基本情報更新
         * @param {UpdateCustomizePageSettingsParam} [updateCustomizePageSettingsParam] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateCustomizePageSettings(updateCustomizePageSettingsParam?: UpdateCustomizePageSettingsParam, options?: any): AxiosPromise<void> {
            return localVarFp.updateCustomizePageSettings(updateCustomizePageSettingsParam, options).then((request) => request(axios, basePath));
        },
        /**
         * 認証系画面設定情報（新規登録・ログイン・パスワードリセット等）を更新します。
         * @summary 認証系画面設定情報設定
         * @param {UpdateCustomizePagesParam} [updateCustomizePagesParam] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateCustomizePages(updateCustomizePagesParam?: UpdateCustomizePagesParam, options?: any): AxiosPromise<void> {
            return localVarFp.updateCustomizePages(updateCustomizePagesParam, options).then((request) => request(axios, basePath));
        },
        /**
         * 各種通知メールテンプレート更新します。
         * @summary 通知メールテンプレートを更新
         * @param {UpdateNotificationMessagesParam} [updateNotificationMessagesParam] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateNotificationMessages(updateNotificationMessagesParam?: UpdateNotificationMessagesParam, options?: any): AxiosPromise<void> {
            return localVarFp.updateNotificationMessages(updateNotificationMessagesParam, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * BasicInfoApi - object-oriented interface
 * @export
 * @class BasicInfoApi
 * @extends {BaseAPI}
 */
export class BasicInfoApi extends BaseAPI {
    /**
     * 監視対象となっている全ホストの状態を Amazon EventBridge 経由で提供するための設定をテストする為のテストイベントを送信します 
     * @summary イベント連携のテスト送信
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BasicInfoApi
     */
    public createEventBridgeTestEvent(options?: AxiosRequestConfig) {
        return BasicInfoApiFp(this.configuration).createEventBridgeTestEvent(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 監視対象となっている全ホストの状態を Amazon EventBridge 経由で提供するための設定を解除します 
     * @summary イベント連携設定を削除
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BasicInfoApi
     */
    public deleteEventBridgeSettings(options?: AxiosRequestConfig) {
        return BasicInfoApiFp(this.configuration).deleteEventBridgeSettings(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 各種通知メールテンプレートを取得します。
     * @summary 通知メールテンプレートを取得
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BasicInfoApi
     */
    public findNotificationMessages(options?: AxiosRequestConfig) {
        return BasicInfoApiFp(this.configuration).findNotificationMessages(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * SaaSusID を元に設定されているドメイン名と CNAME レコードを取得します。 取得した CNAME レコードを DNS に設定することで、ログイン画面を生成します。 
     * @summary 基本設定情報の取得
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BasicInfoApi
     */
    public getBasicInfo(options?: AxiosRequestConfig) {
        return BasicInfoApiFp(this.configuration).getBasicInfo(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 認証認可基本情報を取得します。
     * @summary 認証認可基本情報取得
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BasicInfoApi
     */
    public getCustomizePageSettings(options?: AxiosRequestConfig) {
        return BasicInfoApiFp(this.configuration).getCustomizePageSettings(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 認証系画面設定情報（新規登録・ログイン・パスワードリセット等）を取得します。
     * @summary 認証系画面設定情報取得
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BasicInfoApi
     */
    public getCustomizePages(options?: AxiosRequestConfig) {
        return BasicInfoApiFp(this.configuration).getCustomizePages(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 監視対象となっている全ホストの状態をリアルタイムにAmazon EventBridge 経由で提供するための設定を取得します 
     * @summary イベント連携設定を取得
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BasicInfoApi
     */
    public getEventBridgeSettings(options?: AxiosRequestConfig) {
        return BasicInfoApiFp(this.configuration).getEventBridgeSettings(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 監視対象となっている全ホストの状態を Amazon EventBridge 経由で提供するための設定を更新します 
     * @summary イベント連携設定を更新
     * @param {EventBridgeSettings} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BasicInfoApi
     */
    public saveEventBridgeSettings(body?: EventBridgeSettings, options?: AxiosRequestConfig) {
        return BasicInfoApiFp(this.configuration).saveEventBridgeSettings(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * SaaSus ID を元にパラメータとして設定したドメイン名を設定更新します。 CNAME レコードが生成されますので、 DNS に設定して下さい。 既に稼働中の SaaS アプリケーションに設定している場合には、動作に影響があります。 
     * @summary 基本設定情報の更新
     * @param {UpdateBasicInfoParam} [updateBasicInfoParam] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BasicInfoApi
     */
    public updateBasicInfo(updateBasicInfoParam?: UpdateBasicInfoParam, options?: AxiosRequestConfig) {
        return BasicInfoApiFp(this.configuration).updateBasicInfo(updateBasicInfoParam, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 認証認可基本情報を更新します。
     * @summary 認証認可基本情報更新
     * @param {UpdateCustomizePageSettingsParam} [updateCustomizePageSettingsParam] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BasicInfoApi
     */
    public updateCustomizePageSettings(updateCustomizePageSettingsParam?: UpdateCustomizePageSettingsParam, options?: AxiosRequestConfig) {
        return BasicInfoApiFp(this.configuration).updateCustomizePageSettings(updateCustomizePageSettingsParam, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 認証系画面設定情報（新規登録・ログイン・パスワードリセット等）を更新します。
     * @summary 認証系画面設定情報設定
     * @param {UpdateCustomizePagesParam} [updateCustomizePagesParam] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BasicInfoApi
     */
    public updateCustomizePages(updateCustomizePagesParam?: UpdateCustomizePagesParam, options?: AxiosRequestConfig) {
        return BasicInfoApiFp(this.configuration).updateCustomizePages(updateCustomizePagesParam, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 各種通知メールテンプレート更新します。
     * @summary 通知メールテンプレートを更新
     * @param {UpdateNotificationMessagesParam} [updateNotificationMessagesParam] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BasicInfoApi
     */
    public updateNotificationMessages(updateNotificationMessagesParam?: UpdateNotificationMessagesParam, options?: AxiosRequestConfig) {
        return BasicInfoApiFp(this.configuration).updateNotificationMessages(updateNotificationMessagesParam, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * CredentialApi - axios parameter creator
 * @export
 */
export const CredentialApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 引数のIDトークン・アクセストークン・リフレッシュトークンを一時保存し取得用の一時コードを返却する。 一時コードの有効期間は発行から10秒です。 
         * @summary 認証・認可情報の保存
         * @param {Credentials} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAuthCredentials: async (body?: Credentials, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/credentials`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 一時コードを利用してIDトークン・アクセストークン・リフレッシュトークンを取得する。
         * @summary 認証・認可情報の取得
         * @param {string} code 一時コード
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAuthCredentials: async (code: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'code' is not null or undefined
            assertParamExists('getAuthCredentials', 'code', code)
            const localVarPath = `/credentials`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (code !== undefined) {
                localVarQueryParameter['code'] = code;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CredentialApi - functional programming interface
 * @export
 */
export const CredentialApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CredentialApiAxiosParamCreator(configuration)
    return {
        /**
         * 引数のIDトークン・アクセストークン・リフレッシュトークンを一時保存し取得用の一時コードを返却する。 一時コードの有効期間は発行から10秒です。 
         * @summary 認証・認可情報の保存
         * @param {Credentials} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createAuthCredentials(body?: Credentials, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AuthorizationTempCode>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createAuthCredentials(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 一時コードを利用してIDトークン・アクセストークン・リフレッシュトークンを取得する。
         * @summary 認証・認可情報の取得
         * @param {string} code 一時コード
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAuthCredentials(code: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Credentials>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAuthCredentials(code, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * CredentialApi - factory interface
 * @export
 */
export const CredentialApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CredentialApiFp(configuration)
    return {
        /**
         * 引数のIDトークン・アクセストークン・リフレッシュトークンを一時保存し取得用の一時コードを返却する。 一時コードの有効期間は発行から10秒です。 
         * @summary 認証・認可情報の保存
         * @param {Credentials} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAuthCredentials(body?: Credentials, options?: any): AxiosPromise<AuthorizationTempCode> {
            return localVarFp.createAuthCredentials(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 一時コードを利用してIDトークン・アクセストークン・リフレッシュトークンを取得する。
         * @summary 認証・認可情報の取得
         * @param {string} code 一時コード
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAuthCredentials(code: string, options?: any): AxiosPromise<Credentials> {
            return localVarFp.getAuthCredentials(code, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CredentialApi - object-oriented interface
 * @export
 * @class CredentialApi
 * @extends {BaseAPI}
 */
export class CredentialApi extends BaseAPI {
    /**
     * 引数のIDトークン・アクセストークン・リフレッシュトークンを一時保存し取得用の一時コードを返却する。 一時コードの有効期間は発行から10秒です。 
     * @summary 認証・認可情報の保存
     * @param {Credentials} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CredentialApi
     */
    public createAuthCredentials(body?: Credentials, options?: AxiosRequestConfig) {
        return CredentialApiFp(this.configuration).createAuthCredentials(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 一時コードを利用してIDトークン・アクセストークン・リフレッシュトークンを取得する。
     * @summary 認証・認可情報の取得
     * @param {string} code 一時コード
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CredentialApi
     */
    public getAuthCredentials(code: string, options?: AxiosRequestConfig) {
        return CredentialApiFp(this.configuration).getAuthCredentials(code, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * EnvApi - axios parameter creator
 * @export
 */
export const EnvApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 連携のテストや開発用環境や実際の運用で利用する環境など複数の環境を定義することができるようになっており、 環境情報を作成します。 
         * @summary 環境情報を作成
         * @param {Env} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createEnv: async (body?: Env, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/envs`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 環境情報を削除します。
         * @summary 環境情報を削除
         * @param {number} envId 環境ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteEnv: async (envId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'envId' is not null or undefined
            assertParamExists('deleteEnv', 'envId', envId)
            const localVarPath = `/envs/{env_id}`
                .replace(`{${"env_id"}}`, encodeURIComponent(String(envId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 環境情報の詳細を取得します。
         * @summary 環境情報の取得
         * @param {number} envId 環境ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEnv: async (envId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'envId' is not null or undefined
            assertParamExists('getEnv', 'envId', envId)
            const localVarPath = `/envs/{env_id}`
                .replace(`{${"env_id"}}`, encodeURIComponent(String(envId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 連携のテストや開発用環境や実際の運用で利用する環境など複数の環境を定義することができるようになっており、 登録されている環境情報を取得します。 
         * @summary 環境情報一覧を取得
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEnvs: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/envs`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 環境情報を更新します。
         * @summary 環境情報を更新
         * @param {number} envId 環境ID
         * @param {UpdateEnvParam} [updateEnvParam] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateEnv: async (envId: number, updateEnvParam?: UpdateEnvParam, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'envId' is not null or undefined
            assertParamExists('updateEnv', 'envId', envId)
            const localVarPath = `/envs/{env_id}`
                .replace(`{${"env_id"}}`, encodeURIComponent(String(envId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateEnvParam, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * EnvApi - functional programming interface
 * @export
 */
export const EnvApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = EnvApiAxiosParamCreator(configuration)
    return {
        /**
         * 連携のテストや開発用環境や実際の運用で利用する環境など複数の環境を定義することができるようになっており、 環境情報を作成します。 
         * @summary 環境情報を作成
         * @param {Env} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createEnv(body?: Env, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Env>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createEnv(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 環境情報を削除します。
         * @summary 環境情報を削除
         * @param {number} envId 環境ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteEnv(envId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteEnv(envId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 環境情報の詳細を取得します。
         * @summary 環境情報の取得
         * @param {number} envId 環境ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getEnv(envId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Env>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getEnv(envId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 連携のテストや開発用環境や実際の運用で利用する環境など複数の環境を定義することができるようになっており、 登録されている環境情報を取得します。 
         * @summary 環境情報一覧を取得
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getEnvs(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Envs>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getEnvs(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 環境情報を更新します。
         * @summary 環境情報を更新
         * @param {number} envId 環境ID
         * @param {UpdateEnvParam} [updateEnvParam] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateEnv(envId: number, updateEnvParam?: UpdateEnvParam, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateEnv(envId, updateEnvParam, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * EnvApi - factory interface
 * @export
 */
export const EnvApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = EnvApiFp(configuration)
    return {
        /**
         * 連携のテストや開発用環境や実際の運用で利用する環境など複数の環境を定義することができるようになっており、 環境情報を作成します。 
         * @summary 環境情報を作成
         * @param {Env} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createEnv(body?: Env, options?: any): AxiosPromise<Env> {
            return localVarFp.createEnv(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 環境情報を削除します。
         * @summary 環境情報を削除
         * @param {number} envId 環境ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteEnv(envId: number, options?: any): AxiosPromise<void> {
            return localVarFp.deleteEnv(envId, options).then((request) => request(axios, basePath));
        },
        /**
         * 環境情報の詳細を取得します。
         * @summary 環境情報の取得
         * @param {number} envId 環境ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEnv(envId: number, options?: any): AxiosPromise<Env> {
            return localVarFp.getEnv(envId, options).then((request) => request(axios, basePath));
        },
        /**
         * 連携のテストや開発用環境や実際の運用で利用する環境など複数の環境を定義することができるようになっており、 登録されている環境情報を取得します。 
         * @summary 環境情報一覧を取得
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEnvs(options?: any): AxiosPromise<Envs> {
            return localVarFp.getEnvs(options).then((request) => request(axios, basePath));
        },
        /**
         * 環境情報を更新します。
         * @summary 環境情報を更新
         * @param {number} envId 環境ID
         * @param {UpdateEnvParam} [updateEnvParam] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateEnv(envId: number, updateEnvParam?: UpdateEnvParam, options?: any): AxiosPromise<void> {
            return localVarFp.updateEnv(envId, updateEnvParam, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * EnvApi - object-oriented interface
 * @export
 * @class EnvApi
 * @extends {BaseAPI}
 */
export class EnvApi extends BaseAPI {
    /**
     * 連携のテストや開発用環境や実際の運用で利用する環境など複数の環境を定義することができるようになっており、 環境情報を作成します。 
     * @summary 環境情報を作成
     * @param {Env} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EnvApi
     */
    public createEnv(body?: Env, options?: AxiosRequestConfig) {
        return EnvApiFp(this.configuration).createEnv(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 環境情報を削除します。
     * @summary 環境情報を削除
     * @param {number} envId 環境ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EnvApi
     */
    public deleteEnv(envId: number, options?: AxiosRequestConfig) {
        return EnvApiFp(this.configuration).deleteEnv(envId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 環境情報の詳細を取得します。
     * @summary 環境情報の取得
     * @param {number} envId 環境ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EnvApi
     */
    public getEnv(envId: number, options?: AxiosRequestConfig) {
        return EnvApiFp(this.configuration).getEnv(envId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 連携のテストや開発用環境や実際の運用で利用する環境など複数の環境を定義することができるようになっており、 登録されている環境情報を取得します。 
     * @summary 環境情報一覧を取得
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EnvApi
     */
    public getEnvs(options?: AxiosRequestConfig) {
        return EnvApiFp(this.configuration).getEnvs(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 環境情報を更新します。
     * @summary 環境情報を更新
     * @param {number} envId 環境ID
     * @param {UpdateEnvParam} [updateEnvParam] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EnvApi
     */
    public updateEnv(envId: number, updateEnvParam?: UpdateEnvParam, options?: AxiosRequestConfig) {
        return EnvApiFp(this.configuration).updateEnv(envId, updateEnvParam, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * RoleApi - axios parameter creator
 * @export
 */
export const RoleApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 役割(ロール)を作成します。 ここで作成した役割をユーザーに付与することによって、SaaS側で役割ベースの認可を実装することが用意になります。 また、同じユーザーでも、属するテナント・環境ごとに持っている役割を変えることが可能です。 
         * @summary 役割(ロール)を作成
         * @param {Role} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createRole: async (body?: Role, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/roles`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 役割(ロール)を削除します。
         * @summary 役割(ロール)を削除
         * @param {string} roleName 役割(ロール)名
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteRole: async (roleName: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'roleName' is not null or undefined
            assertParamExists('deleteRole', 'roleName', roleName)
            const localVarPath = `/roles/{role_name}`
                .replace(`{${"role_name"}}`, encodeURIComponent(String(roleName)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 登録されている役割(ロール)を一覧として取得します。 ここで定義した役割をユーザーに付与することによって、SaaS側で役割ベースの認可を実装することが用意になります。 また、同じユーザーでも、属するテナント・環境ごとに持っている役割を変えることが可能です。 
         * @summary 役割(ロール)一覧を取得
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRoles: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/roles`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * RoleApi - functional programming interface
 * @export
 */
export const RoleApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = RoleApiAxiosParamCreator(configuration)
    return {
        /**
         * 役割(ロール)を作成します。 ここで作成した役割をユーザーに付与することによって、SaaS側で役割ベースの認可を実装することが用意になります。 また、同じユーザーでも、属するテナント・環境ごとに持っている役割を変えることが可能です。 
         * @summary 役割(ロール)を作成
         * @param {Role} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createRole(body?: Role, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Role>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createRole(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 役割(ロール)を削除します。
         * @summary 役割(ロール)を削除
         * @param {string} roleName 役割(ロール)名
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteRole(roleName: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteRole(roleName, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 登録されている役割(ロール)を一覧として取得します。 ここで定義した役割をユーザーに付与することによって、SaaS側で役割ベースの認可を実装することが用意になります。 また、同じユーザーでも、属するテナント・環境ごとに持っている役割を変えることが可能です。 
         * @summary 役割(ロール)一覧を取得
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getRoles(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Roles>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getRoles(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * RoleApi - factory interface
 * @export
 */
export const RoleApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = RoleApiFp(configuration)
    return {
        /**
         * 役割(ロール)を作成します。 ここで作成した役割をユーザーに付与することによって、SaaS側で役割ベースの認可を実装することが用意になります。 また、同じユーザーでも、属するテナント・環境ごとに持っている役割を変えることが可能です。 
         * @summary 役割(ロール)を作成
         * @param {Role} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createRole(body?: Role, options?: any): AxiosPromise<Role> {
            return localVarFp.createRole(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 役割(ロール)を削除します。
         * @summary 役割(ロール)を削除
         * @param {string} roleName 役割(ロール)名
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteRole(roleName: string, options?: any): AxiosPromise<void> {
            return localVarFp.deleteRole(roleName, options).then((request) => request(axios, basePath));
        },
        /**
         * 登録されている役割(ロール)を一覧として取得します。 ここで定義した役割をユーザーに付与することによって、SaaS側で役割ベースの認可を実装することが用意になります。 また、同じユーザーでも、属するテナント・環境ごとに持っている役割を変えることが可能です。 
         * @summary 役割(ロール)一覧を取得
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRoles(options?: any): AxiosPromise<Roles> {
            return localVarFp.getRoles(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * RoleApi - object-oriented interface
 * @export
 * @class RoleApi
 * @extends {BaseAPI}
 */
export class RoleApi extends BaseAPI {
    /**
     * 役割(ロール)を作成します。 ここで作成した役割をユーザーに付与することによって、SaaS側で役割ベースの認可を実装することが用意になります。 また、同じユーザーでも、属するテナント・環境ごとに持っている役割を変えることが可能です。 
     * @summary 役割(ロール)を作成
     * @param {Role} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RoleApi
     */
    public createRole(body?: Role, options?: AxiosRequestConfig) {
        return RoleApiFp(this.configuration).createRole(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 役割(ロール)を削除します。
     * @summary 役割(ロール)を削除
     * @param {string} roleName 役割(ロール)名
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RoleApi
     */
    public deleteRole(roleName: string, options?: AxiosRequestConfig) {
        return RoleApiFp(this.configuration).deleteRole(roleName, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 登録されている役割(ロール)を一覧として取得します。 ここで定義した役割をユーザーに付与することによって、SaaS側で役割ベースの認可を実装することが用意になります。 また、同じユーザーでも、属するテナント・環境ごとに持っている役割を変えることが可能です。 
     * @summary 役割(ロール)一覧を取得
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RoleApi
     */
    public getRoles(options?: AxiosRequestConfig) {
        return RoleApiFp(this.configuration).getRoles(options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * SaasUserApi - axios parameter creator
 * @export
 */
export const SaasUserApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * SaaSにユーザーを作成します。
         * @summary SaaSにユーザーを作成
         * @param {CreateSaasUserParam} [createSaasUserParam] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createSaaSUser: async (createSaasUserParam?: CreateSaasUserParam, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/users`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createSaasUserParam, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 認証アプリケーション登録用のシークレットコードを作成します。
         * @summary 認証アプリケーション登録用のシークレットコードを作成
         * @param {string} userId ユーザーID
         * @param {CreateSecretCodeParam} [createSecretCodeParam] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createSecretCode: async (userId: string, createSecretCodeParam?: CreateSecretCodeParam, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('createSecretCode', 'userId', userId)
            const localVarPath = `/users/{user_id}/mfa/software-token/secret-code`
                .replace(`{${"user_id"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createSecretCodeParam, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ユーザーIDを元に一致するユーザーをテナントからすべて削除し、SaaSからも削除します。
         * @summary ユーザー情報を削除
         * @param {string} userId ユーザーID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteSaaSUser: async (userId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('deleteSaaSUser', 'userId', userId)
            const localVarPath = `/users/{user_id}`
                .replace(`{${"user_id"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ユーザーIDからユーザー情報を取得します。
         * @summary ユーザー情報を取得
         * @param {string} userId ユーザーID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSaaSUser: async (userId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('getSaaSUser', 'userId', userId)
            const localVarPath = `/users/{user_id}`
                .replace(`{${"user_id"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * SaaSのユーザー全件を取得します。
         * @summary ユーザー一覧を取得
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSaaSUsers: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/users`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ユーザーのMFA設定を取得します。
         * @summary ユーザーのMFA設定を取得
         * @param {string} userId ユーザーID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserMfaPreference: async (userId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('getUserMfaPreference', 'userId', userId)
            const localVarPath = `/users/{user_id}/mfa/preference`
                .replace(`{${"user_id"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ユーザーのメールアドレスを変更します。
         * @summary メールアドレスを変更
         * @param {string} userId ユーザーID
         * @param {UpdateSaasUserEmailParam} [updateSaasUserEmailParam] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateSaasUserEmail: async (userId: string, updateSaasUserEmailParam?: UpdateSaasUserEmailParam, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('updateSaasUserEmail', 'userId', userId)
            const localVarPath = `/users/{user_id}/email`
                .replace(`{${"user_id"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateSaasUserEmailParam, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ユーザーのログインパスワードを変更します。
         * @summary パスワードを変更
         * @param {string} userId ユーザーID
         * @param {UpdateSaasUserPasswordParam} [updateSaasUserPasswordParam] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateSaasUserPassword: async (userId: string, updateSaasUserPasswordParam?: UpdateSaasUserPasswordParam, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('updateSaasUserPassword', 'userId', userId)
            const localVarPath = `/users/{user_id}/password`
                .replace(`{${"user_id"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateSaasUserPasswordParam, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 認証アプリケーションを登録します。
         * @summary 認証アプリケーションを登録
         * @param {string} userId ユーザーID
         * @param {UpdateSoftwareTokenParam} [updateSoftwareTokenParam] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateSoftwareToken: async (userId: string, updateSoftwareTokenParam?: UpdateSoftwareTokenParam, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('updateSoftwareToken', 'userId', userId)
            const localVarPath = `/users/{user_id}/mfa/software-token`
                .replace(`{${"user_id"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateSoftwareTokenParam, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ユーザーのMFA設定を更新します。
         * @summary ユーザーのMFA設定を更新
         * @param {string} userId ユーザーID
         * @param {MfaPreference} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUserMfaPreference: async (userId: string, body?: MfaPreference, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('updateUserMfaPreference', 'userId', userId)
            const localVarPath = `/users/{user_id}/mfa/preference`
                .replace(`{${"user_id"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SaasUserApi - functional programming interface
 * @export
 */
export const SaasUserApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = SaasUserApiAxiosParamCreator(configuration)
    return {
        /**
         * SaaSにユーザーを作成します。
         * @summary SaaSにユーザーを作成
         * @param {CreateSaasUserParam} [createSaasUserParam] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createSaaSUser(createSaasUserParam?: CreateSaasUserParam, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SaasUser>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createSaaSUser(createSaasUserParam, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 認証アプリケーション登録用のシークレットコードを作成します。
         * @summary 認証アプリケーション登録用のシークレットコードを作成
         * @param {string} userId ユーザーID
         * @param {CreateSecretCodeParam} [createSecretCodeParam] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createSecretCode(userId: string, createSecretCodeParam?: CreateSecretCodeParam, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SoftwareTokenSecretCode>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createSecretCode(userId, createSecretCodeParam, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * ユーザーIDを元に一致するユーザーをテナントからすべて削除し、SaaSからも削除します。
         * @summary ユーザー情報を削除
         * @param {string} userId ユーザーID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteSaaSUser(userId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteSaaSUser(userId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * ユーザーIDからユーザー情報を取得します。
         * @summary ユーザー情報を取得
         * @param {string} userId ユーザーID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSaaSUser(userId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SaasUser>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSaaSUser(userId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * SaaSのユーザー全件を取得します。
         * @summary ユーザー一覧を取得
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSaaSUsers(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SaasUsers>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSaaSUsers(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * ユーザーのMFA設定を取得します。
         * @summary ユーザーのMFA設定を取得
         * @param {string} userId ユーザーID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUserMfaPreference(userId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MfaPreference>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUserMfaPreference(userId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * ユーザーのメールアドレスを変更します。
         * @summary メールアドレスを変更
         * @param {string} userId ユーザーID
         * @param {UpdateSaasUserEmailParam} [updateSaasUserEmailParam] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateSaasUserEmail(userId: string, updateSaasUserEmailParam?: UpdateSaasUserEmailParam, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateSaasUserEmail(userId, updateSaasUserEmailParam, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * ユーザーのログインパスワードを変更します。
         * @summary パスワードを変更
         * @param {string} userId ユーザーID
         * @param {UpdateSaasUserPasswordParam} [updateSaasUserPasswordParam] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateSaasUserPassword(userId: string, updateSaasUserPasswordParam?: UpdateSaasUserPasswordParam, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateSaasUserPassword(userId, updateSaasUserPasswordParam, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 認証アプリケーションを登録します。
         * @summary 認証アプリケーションを登録
         * @param {string} userId ユーザーID
         * @param {UpdateSoftwareTokenParam} [updateSoftwareTokenParam] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateSoftwareToken(userId: string, updateSoftwareTokenParam?: UpdateSoftwareTokenParam, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateSoftwareToken(userId, updateSoftwareTokenParam, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * ユーザーのMFA設定を更新します。
         * @summary ユーザーのMFA設定を更新
         * @param {string} userId ユーザーID
         * @param {MfaPreference} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateUserMfaPreference(userId: string, body?: MfaPreference, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateUserMfaPreference(userId, body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * SaasUserApi - factory interface
 * @export
 */
export const SaasUserApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = SaasUserApiFp(configuration)
    return {
        /**
         * SaaSにユーザーを作成します。
         * @summary SaaSにユーザーを作成
         * @param {CreateSaasUserParam} [createSaasUserParam] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createSaaSUser(createSaasUserParam?: CreateSaasUserParam, options?: any): AxiosPromise<SaasUser> {
            return localVarFp.createSaaSUser(createSaasUserParam, options).then((request) => request(axios, basePath));
        },
        /**
         * 認証アプリケーション登録用のシークレットコードを作成します。
         * @summary 認証アプリケーション登録用のシークレットコードを作成
         * @param {string} userId ユーザーID
         * @param {CreateSecretCodeParam} [createSecretCodeParam] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createSecretCode(userId: string, createSecretCodeParam?: CreateSecretCodeParam, options?: any): AxiosPromise<SoftwareTokenSecretCode> {
            return localVarFp.createSecretCode(userId, createSecretCodeParam, options).then((request) => request(axios, basePath));
        },
        /**
         * ユーザーIDを元に一致するユーザーをテナントからすべて削除し、SaaSからも削除します。
         * @summary ユーザー情報を削除
         * @param {string} userId ユーザーID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteSaaSUser(userId: string, options?: any): AxiosPromise<void> {
            return localVarFp.deleteSaaSUser(userId, options).then((request) => request(axios, basePath));
        },
        /**
         * ユーザーIDからユーザー情報を取得します。
         * @summary ユーザー情報を取得
         * @param {string} userId ユーザーID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSaaSUser(userId: string, options?: any): AxiosPromise<SaasUser> {
            return localVarFp.getSaaSUser(userId, options).then((request) => request(axios, basePath));
        },
        /**
         * SaaSのユーザー全件を取得します。
         * @summary ユーザー一覧を取得
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSaaSUsers(options?: any): AxiosPromise<SaasUsers> {
            return localVarFp.getSaaSUsers(options).then((request) => request(axios, basePath));
        },
        /**
         * ユーザーのMFA設定を取得します。
         * @summary ユーザーのMFA設定を取得
         * @param {string} userId ユーザーID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserMfaPreference(userId: string, options?: any): AxiosPromise<MfaPreference> {
            return localVarFp.getUserMfaPreference(userId, options).then((request) => request(axios, basePath));
        },
        /**
         * ユーザーのメールアドレスを変更します。
         * @summary メールアドレスを変更
         * @param {string} userId ユーザーID
         * @param {UpdateSaasUserEmailParam} [updateSaasUserEmailParam] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateSaasUserEmail(userId: string, updateSaasUserEmailParam?: UpdateSaasUserEmailParam, options?: any): AxiosPromise<void> {
            return localVarFp.updateSaasUserEmail(userId, updateSaasUserEmailParam, options).then((request) => request(axios, basePath));
        },
        /**
         * ユーザーのログインパスワードを変更します。
         * @summary パスワードを変更
         * @param {string} userId ユーザーID
         * @param {UpdateSaasUserPasswordParam} [updateSaasUserPasswordParam] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateSaasUserPassword(userId: string, updateSaasUserPasswordParam?: UpdateSaasUserPasswordParam, options?: any): AxiosPromise<void> {
            return localVarFp.updateSaasUserPassword(userId, updateSaasUserPasswordParam, options).then((request) => request(axios, basePath));
        },
        /**
         * 認証アプリケーションを登録します。
         * @summary 認証アプリケーションを登録
         * @param {string} userId ユーザーID
         * @param {UpdateSoftwareTokenParam} [updateSoftwareTokenParam] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateSoftwareToken(userId: string, updateSoftwareTokenParam?: UpdateSoftwareTokenParam, options?: any): AxiosPromise<void> {
            return localVarFp.updateSoftwareToken(userId, updateSoftwareTokenParam, options).then((request) => request(axios, basePath));
        },
        /**
         * ユーザーのMFA設定を更新します。
         * @summary ユーザーのMFA設定を更新
         * @param {string} userId ユーザーID
         * @param {MfaPreference} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUserMfaPreference(userId: string, body?: MfaPreference, options?: any): AxiosPromise<void> {
            return localVarFp.updateUserMfaPreference(userId, body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * SaasUserApi - object-oriented interface
 * @export
 * @class SaasUserApi
 * @extends {BaseAPI}
 */
export class SaasUserApi extends BaseAPI {
    /**
     * SaaSにユーザーを作成します。
     * @summary SaaSにユーザーを作成
     * @param {CreateSaasUserParam} [createSaasUserParam] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SaasUserApi
     */
    public createSaaSUser(createSaasUserParam?: CreateSaasUserParam, options?: AxiosRequestConfig) {
        return SaasUserApiFp(this.configuration).createSaaSUser(createSaasUserParam, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 認証アプリケーション登録用のシークレットコードを作成します。
     * @summary 認証アプリケーション登録用のシークレットコードを作成
     * @param {string} userId ユーザーID
     * @param {CreateSecretCodeParam} [createSecretCodeParam] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SaasUserApi
     */
    public createSecretCode(userId: string, createSecretCodeParam?: CreateSecretCodeParam, options?: AxiosRequestConfig) {
        return SaasUserApiFp(this.configuration).createSecretCode(userId, createSecretCodeParam, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ユーザーIDを元に一致するユーザーをテナントからすべて削除し、SaaSからも削除します。
     * @summary ユーザー情報を削除
     * @param {string} userId ユーザーID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SaasUserApi
     */
    public deleteSaaSUser(userId: string, options?: AxiosRequestConfig) {
        return SaasUserApiFp(this.configuration).deleteSaaSUser(userId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ユーザーIDからユーザー情報を取得します。
     * @summary ユーザー情報を取得
     * @param {string} userId ユーザーID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SaasUserApi
     */
    public getSaaSUser(userId: string, options?: AxiosRequestConfig) {
        return SaasUserApiFp(this.configuration).getSaaSUser(userId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * SaaSのユーザー全件を取得します。
     * @summary ユーザー一覧を取得
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SaasUserApi
     */
    public getSaaSUsers(options?: AxiosRequestConfig) {
        return SaasUserApiFp(this.configuration).getSaaSUsers(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ユーザーのMFA設定を取得します。
     * @summary ユーザーのMFA設定を取得
     * @param {string} userId ユーザーID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SaasUserApi
     */
    public getUserMfaPreference(userId: string, options?: AxiosRequestConfig) {
        return SaasUserApiFp(this.configuration).getUserMfaPreference(userId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ユーザーのメールアドレスを変更します。
     * @summary メールアドレスを変更
     * @param {string} userId ユーザーID
     * @param {UpdateSaasUserEmailParam} [updateSaasUserEmailParam] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SaasUserApi
     */
    public updateSaasUserEmail(userId: string, updateSaasUserEmailParam?: UpdateSaasUserEmailParam, options?: AxiosRequestConfig) {
        return SaasUserApiFp(this.configuration).updateSaasUserEmail(userId, updateSaasUserEmailParam, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ユーザーのログインパスワードを変更します。
     * @summary パスワードを変更
     * @param {string} userId ユーザーID
     * @param {UpdateSaasUserPasswordParam} [updateSaasUserPasswordParam] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SaasUserApi
     */
    public updateSaasUserPassword(userId: string, updateSaasUserPasswordParam?: UpdateSaasUserPasswordParam, options?: AxiosRequestConfig) {
        return SaasUserApiFp(this.configuration).updateSaasUserPassword(userId, updateSaasUserPasswordParam, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 認証アプリケーションを登録します。
     * @summary 認証アプリケーションを登録
     * @param {string} userId ユーザーID
     * @param {UpdateSoftwareTokenParam} [updateSoftwareTokenParam] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SaasUserApi
     */
    public updateSoftwareToken(userId: string, updateSoftwareTokenParam?: UpdateSoftwareTokenParam, options?: AxiosRequestConfig) {
        return SaasUserApiFp(this.configuration).updateSoftwareToken(userId, updateSoftwareTokenParam, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ユーザーのMFA設定を更新します。
     * @summary ユーザーのMFA設定を更新
     * @param {string} userId ユーザーID
     * @param {MfaPreference} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SaasUserApi
     */
    public updateUserMfaPreference(userId: string, body?: MfaPreference, options?: AxiosRequestConfig) {
        return SaasUserApiFp(this.configuration).updateUserMfaPreference(userId, body, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * SaasusTenantApi - axios parameter creator
 * @export
 */
export const SaasusTenantApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * サーバサイド用に API キーを発行します。最大 2 つまで発行できます。
         * @summary APIキーを作成
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createApiKey: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/apikeys`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * サーバサイド用の API キーを削除します。
         * @summary APIキーを削除
         * @param {string} apiKey APIキー
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteApiKey: async (apiKey: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'apiKey' is not null or undefined
            assertParamExists('deleteApiKey', 'apiKey', apiKey)
            const localVarPath = `/apikeys/{api_key}`
                .replace(`{${"api_key"}}`, encodeURIComponent(String(apiKey)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * サーバサイド用に API キーを取得します。最大 2 つまで発行できます。
         * @summary APIキー一覧を取得
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiKeys: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/apikeys`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * クライアントへのすべての API リクエストでアプリが使用する固定文字列を取得します。 
         * @summary クライアントシークレットを取得
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getClientSecret: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/client-secret`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * テナントのSaasIDを取得します。 SaaSus API および SaaSus SDK にて利用します。 
         * @summary SaasIDを取得
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSaasID: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/saasid`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * クライアントへのすべての API リクエストでアプリが使用する固定文字列を再発行します。 既に稼働中のSaaSアプリケーションに設定している場合には、動作に影響があります。 
         * @summary クライアントシークレットを更新
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateClientSecret: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/client-secret`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * テナントのSaasIDを更新します。 SaaSus API および SaaSus SDK にて利用します。 既に稼働中の SaaS アプリケーションに設定している場合には、動作に影響があります。 
         * @summary SaasIDを更新
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateSaasID: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/saasid`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SaasusTenantApi - functional programming interface
 * @export
 */
export const SaasusTenantApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = SaasusTenantApiAxiosParamCreator(configuration)
    return {
        /**
         * サーバサイド用に API キーを発行します。最大 2 つまで発行できます。
         * @summary APIキーを作成
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createApiKey(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createApiKey(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * サーバサイド用の API キーを削除します。
         * @summary APIキーを削除
         * @param {string} apiKey APIキー
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteApiKey(apiKey: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteApiKey(apiKey, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * サーバサイド用に API キーを取得します。最大 2 つまで発行できます。
         * @summary APIキー一覧を取得
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getApiKeys(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiKeys>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getApiKeys(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * クライアントへのすべての API リクエストでアプリが使用する固定文字列を取得します。 
         * @summary クライアントシークレットを取得
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getClientSecret(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ClientSecret>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getClientSecret(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * テナントのSaasIDを取得します。 SaaSus API および SaaSus SDK にて利用します。 
         * @summary SaasIDを取得
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSaasID(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SaasID>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSaasID(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * クライアントへのすべての API リクエストでアプリが使用する固定文字列を再発行します。 既に稼働中のSaaSアプリケーションに設定している場合には、動作に影響があります。 
         * @summary クライアントシークレットを更新
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateClientSecret(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateClientSecret(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * テナントのSaasIDを更新します。 SaaSus API および SaaSus SDK にて利用します。 既に稼働中の SaaS アプリケーションに設定している場合には、動作に影響があります。 
         * @summary SaasIDを更新
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateSaasID(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateSaasID(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * SaasusTenantApi - factory interface
 * @export
 */
export const SaasusTenantApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = SaasusTenantApiFp(configuration)
    return {
        /**
         * サーバサイド用に API キーを発行します。最大 2 つまで発行できます。
         * @summary APIキーを作成
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createApiKey(options?: any): AxiosPromise<void> {
            return localVarFp.createApiKey(options).then((request) => request(axios, basePath));
        },
        /**
         * サーバサイド用の API キーを削除します。
         * @summary APIキーを削除
         * @param {string} apiKey APIキー
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteApiKey(apiKey: string, options?: any): AxiosPromise<void> {
            return localVarFp.deleteApiKey(apiKey, options).then((request) => request(axios, basePath));
        },
        /**
         * サーバサイド用に API キーを取得します。最大 2 つまで発行できます。
         * @summary APIキー一覧を取得
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiKeys(options?: any): AxiosPromise<ApiKeys> {
            return localVarFp.getApiKeys(options).then((request) => request(axios, basePath));
        },
        /**
         * クライアントへのすべての API リクエストでアプリが使用する固定文字列を取得します。 
         * @summary クライアントシークレットを取得
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getClientSecret(options?: any): AxiosPromise<ClientSecret> {
            return localVarFp.getClientSecret(options).then((request) => request(axios, basePath));
        },
        /**
         * テナントのSaasIDを取得します。 SaaSus API および SaaSus SDK にて利用します。 
         * @summary SaasIDを取得
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSaasID(options?: any): AxiosPromise<SaasID> {
            return localVarFp.getSaasID(options).then((request) => request(axios, basePath));
        },
        /**
         * クライアントへのすべての API リクエストでアプリが使用する固定文字列を再発行します。 既に稼働中のSaaSアプリケーションに設定している場合には、動作に影響があります。 
         * @summary クライアントシークレットを更新
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateClientSecret(options?: any): AxiosPromise<void> {
            return localVarFp.updateClientSecret(options).then((request) => request(axios, basePath));
        },
        /**
         * テナントのSaasIDを更新します。 SaaSus API および SaaSus SDK にて利用します。 既に稼働中の SaaS アプリケーションに設定している場合には、動作に影響があります。 
         * @summary SaasIDを更新
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateSaasID(options?: any): AxiosPromise<void> {
            return localVarFp.updateSaasID(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * SaasusTenantApi - object-oriented interface
 * @export
 * @class SaasusTenantApi
 * @extends {BaseAPI}
 */
export class SaasusTenantApi extends BaseAPI {
    /**
     * サーバサイド用に API キーを発行します。最大 2 つまで発行できます。
     * @summary APIキーを作成
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SaasusTenantApi
     */
    public createApiKey(options?: AxiosRequestConfig) {
        return SaasusTenantApiFp(this.configuration).createApiKey(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * サーバサイド用の API キーを削除します。
     * @summary APIキーを削除
     * @param {string} apiKey APIキー
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SaasusTenantApi
     */
    public deleteApiKey(apiKey: string, options?: AxiosRequestConfig) {
        return SaasusTenantApiFp(this.configuration).deleteApiKey(apiKey, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * サーバサイド用に API キーを取得します。最大 2 つまで発行できます。
     * @summary APIキー一覧を取得
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SaasusTenantApi
     */
    public getApiKeys(options?: AxiosRequestConfig) {
        return SaasusTenantApiFp(this.configuration).getApiKeys(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * クライアントへのすべての API リクエストでアプリが使用する固定文字列を取得します。 
     * @summary クライアントシークレットを取得
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SaasusTenantApi
     */
    public getClientSecret(options?: AxiosRequestConfig) {
        return SaasusTenantApiFp(this.configuration).getClientSecret(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * テナントのSaasIDを取得します。 SaaSus API および SaaSus SDK にて利用します。 
     * @summary SaasIDを取得
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SaasusTenantApi
     */
    public getSaasID(options?: AxiosRequestConfig) {
        return SaasusTenantApiFp(this.configuration).getSaasID(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * クライアントへのすべての API リクエストでアプリが使用する固定文字列を再発行します。 既に稼働中のSaaSアプリケーションに設定している場合には、動作に影響があります。 
     * @summary クライアントシークレットを更新
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SaasusTenantApi
     */
    public updateClientSecret(options?: AxiosRequestConfig) {
        return SaasusTenantApiFp(this.configuration).updateClientSecret(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * テナントのSaasIDを更新します。 SaaSus API および SaaSus SDK にて利用します。 既に稼働中の SaaS アプリケーションに設定している場合には、動作に影響があります。 
     * @summary SaasIDを更新
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SaasusTenantApi
     */
    public updateSaasID(options?: AxiosRequestConfig) {
        return SaasusTenantApiFp(this.configuration).updateSaasID(options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * TenantApi - axios parameter creator
 * @export
 */
export const TenantApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * SaaSus Platform で管理する、テナント情報を作成します。 
         * @summary テナントを作成
         * @param {TenantProps} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createTenant: async (body?: TenantProps, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/tenants`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * billing経由でstripeへ初期情報を設定
         * @summary stripe初期設定
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createTenantAndPricing: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/stripe/init`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * SaaSus Platform で管理する、テナントの詳細情報を削除します。 
         * @summary テナント情報を削除
         * @param {string} tenantId テナントID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteTenant: async (tenantId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tenantId' is not null or undefined
            assertParamExists('deleteTenant', 'tenantId', tenantId)
            const localVarPath = `/tenants/{tenant_id}`
                .replace(`{${"tenant_id"}}`, encodeURIComponent(String(tenantId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * SaaSus Platform で管理する、テナントの詳細情報を取得します。 
         * @summary テナント情報を取得
         * @param {string} tenantId テナントID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTenant: async (tenantId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tenantId' is not null or undefined
            assertParamExists('getTenant', 'tenantId', tenantId)
            const localVarPath = `/tenants/{tenant_id}`
                .replace(`{${"tenant_id"}}`, encodeURIComponent(String(tenantId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * SaaSus Platform で管理する、テナント情報の取得を行います。 
         * @summary テナント一覧取得
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTenants: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/tenants`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * SaaSus Platform で管理する、テナントの詳細情報を更新します。 
         * @summary テナント情報を更新
         * @param {string} tenantId テナントID
         * @param {TenantProps} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateTenant: async (tenantId: string, body?: TenantProps, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tenantId' is not null or undefined
            assertParamExists('updateTenant', 'tenantId', tenantId)
            const localVarPath = `/tenants/{tenant_id}`
                .replace(`{${"tenant_id"}}`, encodeURIComponent(String(tenantId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TenantApi - functional programming interface
 * @export
 */
export const TenantApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = TenantApiAxiosParamCreator(configuration)
    return {
        /**
         * SaaSus Platform で管理する、テナント情報を作成します。 
         * @summary テナントを作成
         * @param {TenantProps} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createTenant(body?: TenantProps, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Tenant>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createTenant(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * billing経由でstripeへ初期情報を設定
         * @summary stripe初期設定
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createTenantAndPricing(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createTenantAndPricing(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * SaaSus Platform で管理する、テナントの詳細情報を削除します。 
         * @summary テナント情報を削除
         * @param {string} tenantId テナントID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteTenant(tenantId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteTenant(tenantId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * SaaSus Platform で管理する、テナントの詳細情報を取得します。 
         * @summary テナント情報を取得
         * @param {string} tenantId テナントID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getTenant(tenantId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Tenant>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getTenant(tenantId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * SaaSus Platform で管理する、テナント情報の取得を行います。 
         * @summary テナント一覧取得
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getTenants(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Tenants>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getTenants(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * SaaSus Platform で管理する、テナントの詳細情報を更新します。 
         * @summary テナント情報を更新
         * @param {string} tenantId テナントID
         * @param {TenantProps} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateTenant(tenantId: string, body?: TenantProps, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateTenant(tenantId, body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * TenantApi - factory interface
 * @export
 */
export const TenantApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = TenantApiFp(configuration)
    return {
        /**
         * SaaSus Platform で管理する、テナント情報を作成します。 
         * @summary テナントを作成
         * @param {TenantProps} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createTenant(body?: TenantProps, options?: any): AxiosPromise<Tenant> {
            return localVarFp.createTenant(body, options).then((request) => request(axios, basePath));
        },
        /**
         * billing経由でstripeへ初期情報を設定
         * @summary stripe初期設定
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createTenantAndPricing(options?: any): AxiosPromise<void> {
            return localVarFp.createTenantAndPricing(options).then((request) => request(axios, basePath));
        },
        /**
         * SaaSus Platform で管理する、テナントの詳細情報を削除します。 
         * @summary テナント情報を削除
         * @param {string} tenantId テナントID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteTenant(tenantId: string, options?: any): AxiosPromise<void> {
            return localVarFp.deleteTenant(tenantId, options).then((request) => request(axios, basePath));
        },
        /**
         * SaaSus Platform で管理する、テナントの詳細情報を取得します。 
         * @summary テナント情報を取得
         * @param {string} tenantId テナントID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTenant(tenantId: string, options?: any): AxiosPromise<Tenant> {
            return localVarFp.getTenant(tenantId, options).then((request) => request(axios, basePath));
        },
        /**
         * SaaSus Platform で管理する、テナント情報の取得を行います。 
         * @summary テナント一覧取得
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTenants(options?: any): AxiosPromise<Tenants> {
            return localVarFp.getTenants(options).then((request) => request(axios, basePath));
        },
        /**
         * SaaSus Platform で管理する、テナントの詳細情報を更新します。 
         * @summary テナント情報を更新
         * @param {string} tenantId テナントID
         * @param {TenantProps} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateTenant(tenantId: string, body?: TenantProps, options?: any): AxiosPromise<void> {
            return localVarFp.updateTenant(tenantId, body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * TenantApi - object-oriented interface
 * @export
 * @class TenantApi
 * @extends {BaseAPI}
 */
export class TenantApi extends BaseAPI {
    /**
     * SaaSus Platform で管理する、テナント情報を作成します。 
     * @summary テナントを作成
     * @param {TenantProps} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TenantApi
     */
    public createTenant(body?: TenantProps, options?: AxiosRequestConfig) {
        return TenantApiFp(this.configuration).createTenant(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * billing経由でstripeへ初期情報を設定
     * @summary stripe初期設定
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TenantApi
     */
    public createTenantAndPricing(options?: AxiosRequestConfig) {
        return TenantApiFp(this.configuration).createTenantAndPricing(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * SaaSus Platform で管理する、テナントの詳細情報を削除します。 
     * @summary テナント情報を削除
     * @param {string} tenantId テナントID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TenantApi
     */
    public deleteTenant(tenantId: string, options?: AxiosRequestConfig) {
        return TenantApiFp(this.configuration).deleteTenant(tenantId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * SaaSus Platform で管理する、テナントの詳細情報を取得します。 
     * @summary テナント情報を取得
     * @param {string} tenantId テナントID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TenantApi
     */
    public getTenant(tenantId: string, options?: AxiosRequestConfig) {
        return TenantApiFp(this.configuration).getTenant(tenantId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * SaaSus Platform で管理する、テナント情報の取得を行います。 
     * @summary テナント一覧取得
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TenantApi
     */
    public getTenants(options?: AxiosRequestConfig) {
        return TenantApiFp(this.configuration).getTenants(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * SaaSus Platform で管理する、テナントの詳細情報を更新します。 
     * @summary テナント情報を更新
     * @param {string} tenantId テナントID
     * @param {TenantProps} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TenantApi
     */
    public updateTenant(tenantId: string, body?: TenantProps, options?: AxiosRequestConfig) {
        return TenantApiFp(this.configuration).updateTenant(tenantId, body, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * TenantAttributeApi - axios parameter creator
 * @export
 */
export const TenantAttributeApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * SaaSus Platform で管理する、テナントの追加属性の登録を行います。 例えばテナントの呼び名やメモなどをを持たせることができ、SaaSからSaaSus SDK/APIを利用して取得することができます。 
         * @summary テナント属性の作成
         * @param {Attribute} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createTenantAttribute: async (body?: Attribute, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/tenant-attributes`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * SaaSus Platform で管理する、テナントの追加属性の削除を行います。 
         * @summary テナント属性の削除
         * @param {string} attributeName 属性名
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteTenantAttribute: async (attributeName: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'attributeName' is not null or undefined
            assertParamExists('deleteTenantAttribute', 'attributeName', attributeName)
            const localVarPath = `/tenant-attributes/{attribute_name}`
                .replace(`{${"attribute_name"}}`, encodeURIComponent(String(attributeName)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * SaaSus Platform で管理する、テナントの追加属性の定義を取得します。 例えばテナントの呼び名やメモなどをを持たせることができ、SaaSからSaaSus SDK/APIを利用して取得することができます。 
         * @summary テナント属性の一覧を取得
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTenantAttributes: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/tenant-attributes`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TenantAttributeApi - functional programming interface
 * @export
 */
export const TenantAttributeApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = TenantAttributeApiAxiosParamCreator(configuration)
    return {
        /**
         * SaaSus Platform で管理する、テナントの追加属性の登録を行います。 例えばテナントの呼び名やメモなどをを持たせることができ、SaaSからSaaSus SDK/APIを利用して取得することができます。 
         * @summary テナント属性の作成
         * @param {Attribute} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createTenantAttribute(body?: Attribute, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Attribute>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createTenantAttribute(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * SaaSus Platform で管理する、テナントの追加属性の削除を行います。 
         * @summary テナント属性の削除
         * @param {string} attributeName 属性名
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteTenantAttribute(attributeName: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteTenantAttribute(attributeName, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * SaaSus Platform で管理する、テナントの追加属性の定義を取得します。 例えばテナントの呼び名やメモなどをを持たせることができ、SaaSからSaaSus SDK/APIを利用して取得することができます。 
         * @summary テナント属性の一覧を取得
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getTenantAttributes(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TenantAttributes>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getTenantAttributes(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * TenantAttributeApi - factory interface
 * @export
 */
export const TenantAttributeApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = TenantAttributeApiFp(configuration)
    return {
        /**
         * SaaSus Platform で管理する、テナントの追加属性の登録を行います。 例えばテナントの呼び名やメモなどをを持たせることができ、SaaSからSaaSus SDK/APIを利用して取得することができます。 
         * @summary テナント属性の作成
         * @param {Attribute} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createTenantAttribute(body?: Attribute, options?: any): AxiosPromise<Attribute> {
            return localVarFp.createTenantAttribute(body, options).then((request) => request(axios, basePath));
        },
        /**
         * SaaSus Platform で管理する、テナントの追加属性の削除を行います。 
         * @summary テナント属性の削除
         * @param {string} attributeName 属性名
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteTenantAttribute(attributeName: string, options?: any): AxiosPromise<void> {
            return localVarFp.deleteTenantAttribute(attributeName, options).then((request) => request(axios, basePath));
        },
        /**
         * SaaSus Platform で管理する、テナントの追加属性の定義を取得します。 例えばテナントの呼び名やメモなどをを持たせることができ、SaaSからSaaSus SDK/APIを利用して取得することができます。 
         * @summary テナント属性の一覧を取得
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTenantAttributes(options?: any): AxiosPromise<TenantAttributes> {
            return localVarFp.getTenantAttributes(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * TenantAttributeApi - object-oriented interface
 * @export
 * @class TenantAttributeApi
 * @extends {BaseAPI}
 */
export class TenantAttributeApi extends BaseAPI {
    /**
     * SaaSus Platform で管理する、テナントの追加属性の登録を行います。 例えばテナントの呼び名やメモなどをを持たせることができ、SaaSからSaaSus SDK/APIを利用して取得することができます。 
     * @summary テナント属性の作成
     * @param {Attribute} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TenantAttributeApi
     */
    public createTenantAttribute(body?: Attribute, options?: AxiosRequestConfig) {
        return TenantAttributeApiFp(this.configuration).createTenantAttribute(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * SaaSus Platform で管理する、テナントの追加属性の削除を行います。 
     * @summary テナント属性の削除
     * @param {string} attributeName 属性名
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TenantAttributeApi
     */
    public deleteTenantAttribute(attributeName: string, options?: AxiosRequestConfig) {
        return TenantAttributeApiFp(this.configuration).deleteTenantAttribute(attributeName, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * SaaSus Platform で管理する、テナントの追加属性の定義を取得します。 例えばテナントの呼び名やメモなどをを持たせることができ、SaaSからSaaSus SDK/APIを利用して取得することができます。 
     * @summary テナント属性の一覧を取得
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TenantAttributeApi
     */
    public getTenantAttributes(options?: AxiosRequestConfig) {
        return TenantAttributeApiFp(this.configuration).getTenantAttributes(options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * TenantUserApi - axios parameter creator
 * @export
 */
export const TenantUserApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * テナントにユーザーを作成します。attributesを空のオブジェクトにした場合、追加属性は空で作成されます。
         * @summary テナントにユーザーを作成
         * @param {string} tenantId テナントID
         * @param {CreateTenantUserParam} [createTenantUserParam] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createTenantUser: async (tenantId: string, createTenantUserParam?: CreateTenantUserParam, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tenantId' is not null or undefined
            assertParamExists('createTenantUser', 'tenantId', tenantId)
            const localVarPath = `/tenants/{tenant_id}/users`
                .replace(`{${"tenant_id"}}`, encodeURIComponent(String(tenantId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createTenantUserParam, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * テナントのユーザーに役割(ロール)を作成します。
         * @summary テナントのユーザー情報に役割(ロール)を作成
         * @param {string} tenantId テナントID
         * @param {string} userId ユーザーID
         * @param {number} envId 環境ID
         * @param {CreateTenantUserRolesParam} [createTenantUserRolesParam] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createTenantUserRoles: async (tenantId: string, userId: string, envId: number, createTenantUserRolesParam?: CreateTenantUserRolesParam, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tenantId' is not null or undefined
            assertParamExists('createTenantUserRoles', 'tenantId', tenantId)
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('createTenantUserRoles', 'userId', userId)
            // verify required parameter 'envId' is not null or undefined
            assertParamExists('createTenantUserRoles', 'envId', envId)
            const localVarPath = `/tenants/{tenant_id}/users/{user_id}/envs/{env_id}/roles`
                .replace(`{${"tenant_id"}}`, encodeURIComponent(String(tenantId)))
                .replace(`{${"user_id"}}`, encodeURIComponent(String(userId)))
                .replace(`{${"env_id"}}`, encodeURIComponent(String(envId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createTenantUserRolesParam, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * テナントからユーザーを削除します。
         * @summary テナントのユーザー情報を削除
         * @param {string} tenantId テナントID
         * @param {string} userId ユーザーID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteTenantUser: async (tenantId: string, userId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tenantId' is not null or undefined
            assertParamExists('deleteTenantUser', 'tenantId', tenantId)
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('deleteTenantUser', 'userId', userId)
            const localVarPath = `/tenants/{tenant_id}/users/{user_id}`
                .replace(`{${"tenant_id"}}`, encodeURIComponent(String(tenantId)))
                .replace(`{${"user_id"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * テナントのユーザーから役割(ロール)を削除します。
         * @summary テナントのユーザーから役割(ロール)を削除
         * @param {string} tenantId テナントID
         * @param {string} userId ユーザーID
         * @param {number} envId 環境ID
         * @param {string} roleName 役割(ロール)名
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteTenantUserRole: async (tenantId: string, userId: string, envId: number, roleName: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tenantId' is not null or undefined
            assertParamExists('deleteTenantUserRole', 'tenantId', tenantId)
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('deleteTenantUserRole', 'userId', userId)
            // verify required parameter 'envId' is not null or undefined
            assertParamExists('deleteTenantUserRole', 'envId', envId)
            // verify required parameter 'roleName' is not null or undefined
            assertParamExists('deleteTenantUserRole', 'roleName', roleName)
            const localVarPath = `/tenants/{tenant_id}/users/{user_id}/envs/{env_id}/roles/{role_name}`
                .replace(`{${"tenant_id"}}`, encodeURIComponent(String(tenantId)))
                .replace(`{${"user_id"}}`, encodeURIComponent(String(userId)))
                .replace(`{${"env_id"}}`, encodeURIComponent(String(envId)))
                .replace(`{${"role_name"}}`, encodeURIComponent(String(roleName)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ユーザーIDからテナントに所属しているユーザー情報を取得します。複数テナントに所属している場合は別のオブジェクトとして返却されます。
         * @summary ユーザー情報を取得
         * @param {string} userId ユーザーID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllTenantUser: async (userId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('getAllTenantUser', 'userId', userId)
            const localVarPath = `/tenants/all/users/{user_id}`
                .replace(`{${"user_id"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * テナントに所属しているユーザー全件を取得します。複数テナントに所属する同一ユーザーは別のオブジェクトとして返却されます。idは一意ではありません。
         * @summary ユーザー一覧を取得
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllTenantUsers: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/tenants/all/users`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * テナントのユーザーをIDから一件取得します。
         * @summary テナントのユーザー情報を取得
         * @param {string} tenantId テナントID
         * @param {string} userId ユーザーID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTenantUser: async (tenantId: string, userId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tenantId' is not null or undefined
            assertParamExists('getTenantUser', 'tenantId', tenantId)
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('getTenantUser', 'userId', userId)
            const localVarPath = `/tenants/{tenant_id}/users/{user_id}`
                .replace(`{${"tenant_id"}}`, encodeURIComponent(String(tenantId)))
                .replace(`{${"user_id"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * テナントに所属するユーザーを全件取得します。 idは一意です。
         * @summary テナントのユーザー一覧を取得
         * @param {string} tenantId テナントID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTenantUsers: async (tenantId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tenantId' is not null or undefined
            assertParamExists('getTenantUsers', 'tenantId', tenantId)
            const localVarPath = `/tenants/{tenant_id}/users`
                .replace(`{${"tenant_id"}}`, encodeURIComponent(String(tenantId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * テナントのユーザー属性情報を更新します。
         * @summary テナントのユーザー属性情報を更新
         * @param {string} tenantId テナントID
         * @param {string} userId ユーザーID
         * @param {UpdateTenantUserParam} [updateTenantUserParam] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateTenantUser: async (tenantId: string, userId: string, updateTenantUserParam?: UpdateTenantUserParam, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tenantId' is not null or undefined
            assertParamExists('updateTenantUser', 'tenantId', tenantId)
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('updateTenantUser', 'userId', userId)
            const localVarPath = `/tenants/{tenant_id}/users/{user_id}`
                .replace(`{${"tenant_id"}}`, encodeURIComponent(String(tenantId)))
                .replace(`{${"user_id"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateTenantUserParam, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TenantUserApi - functional programming interface
 * @export
 */
export const TenantUserApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = TenantUserApiAxiosParamCreator(configuration)
    return {
        /**
         * テナントにユーザーを作成します。attributesを空のオブジェクトにした場合、追加属性は空で作成されます。
         * @summary テナントにユーザーを作成
         * @param {string} tenantId テナントID
         * @param {CreateTenantUserParam} [createTenantUserParam] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createTenantUser(tenantId: string, createTenantUserParam?: CreateTenantUserParam, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<User>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createTenantUser(tenantId, createTenantUserParam, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * テナントのユーザーに役割(ロール)を作成します。
         * @summary テナントのユーザー情報に役割(ロール)を作成
         * @param {string} tenantId テナントID
         * @param {string} userId ユーザーID
         * @param {number} envId 環境ID
         * @param {CreateTenantUserRolesParam} [createTenantUserRolesParam] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createTenantUserRoles(tenantId: string, userId: string, envId: number, createTenantUserRolesParam?: CreateTenantUserRolesParam, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createTenantUserRoles(tenantId, userId, envId, createTenantUserRolesParam, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * テナントからユーザーを削除します。
         * @summary テナントのユーザー情報を削除
         * @param {string} tenantId テナントID
         * @param {string} userId ユーザーID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteTenantUser(tenantId: string, userId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteTenantUser(tenantId, userId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * テナントのユーザーから役割(ロール)を削除します。
         * @summary テナントのユーザーから役割(ロール)を削除
         * @param {string} tenantId テナントID
         * @param {string} userId ユーザーID
         * @param {number} envId 環境ID
         * @param {string} roleName 役割(ロール)名
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteTenantUserRole(tenantId: string, userId: string, envId: number, roleName: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteTenantUserRole(tenantId, userId, envId, roleName, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * ユーザーIDからテナントに所属しているユーザー情報を取得します。複数テナントに所属している場合は別のオブジェクトとして返却されます。
         * @summary ユーザー情報を取得
         * @param {string} userId ユーザーID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllTenantUser(userId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Users>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllTenantUser(userId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * テナントに所属しているユーザー全件を取得します。複数テナントに所属する同一ユーザーは別のオブジェクトとして返却されます。idは一意ではありません。
         * @summary ユーザー一覧を取得
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllTenantUsers(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Users>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllTenantUsers(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * テナントのユーザーをIDから一件取得します。
         * @summary テナントのユーザー情報を取得
         * @param {string} tenantId テナントID
         * @param {string} userId ユーザーID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getTenantUser(tenantId: string, userId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<User>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getTenantUser(tenantId, userId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * テナントに所属するユーザーを全件取得します。 idは一意です。
         * @summary テナントのユーザー一覧を取得
         * @param {string} tenantId テナントID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getTenantUsers(tenantId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Users>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getTenantUsers(tenantId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * テナントのユーザー属性情報を更新します。
         * @summary テナントのユーザー属性情報を更新
         * @param {string} tenantId テナントID
         * @param {string} userId ユーザーID
         * @param {UpdateTenantUserParam} [updateTenantUserParam] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateTenantUser(tenantId: string, userId: string, updateTenantUserParam?: UpdateTenantUserParam, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateTenantUser(tenantId, userId, updateTenantUserParam, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * TenantUserApi - factory interface
 * @export
 */
export const TenantUserApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = TenantUserApiFp(configuration)
    return {
        /**
         * テナントにユーザーを作成します。attributesを空のオブジェクトにした場合、追加属性は空で作成されます。
         * @summary テナントにユーザーを作成
         * @param {string} tenantId テナントID
         * @param {CreateTenantUserParam} [createTenantUserParam] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createTenantUser(tenantId: string, createTenantUserParam?: CreateTenantUserParam, options?: any): AxiosPromise<User> {
            return localVarFp.createTenantUser(tenantId, createTenantUserParam, options).then((request) => request(axios, basePath));
        },
        /**
         * テナントのユーザーに役割(ロール)を作成します。
         * @summary テナントのユーザー情報に役割(ロール)を作成
         * @param {string} tenantId テナントID
         * @param {string} userId ユーザーID
         * @param {number} envId 環境ID
         * @param {CreateTenantUserRolesParam} [createTenantUserRolesParam] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createTenantUserRoles(tenantId: string, userId: string, envId: number, createTenantUserRolesParam?: CreateTenantUserRolesParam, options?: any): AxiosPromise<void> {
            return localVarFp.createTenantUserRoles(tenantId, userId, envId, createTenantUserRolesParam, options).then((request) => request(axios, basePath));
        },
        /**
         * テナントからユーザーを削除します。
         * @summary テナントのユーザー情報を削除
         * @param {string} tenantId テナントID
         * @param {string} userId ユーザーID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteTenantUser(tenantId: string, userId: string, options?: any): AxiosPromise<void> {
            return localVarFp.deleteTenantUser(tenantId, userId, options).then((request) => request(axios, basePath));
        },
        /**
         * テナントのユーザーから役割(ロール)を削除します。
         * @summary テナントのユーザーから役割(ロール)を削除
         * @param {string} tenantId テナントID
         * @param {string} userId ユーザーID
         * @param {number} envId 環境ID
         * @param {string} roleName 役割(ロール)名
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteTenantUserRole(tenantId: string, userId: string, envId: number, roleName: string, options?: any): AxiosPromise<void> {
            return localVarFp.deleteTenantUserRole(tenantId, userId, envId, roleName, options).then((request) => request(axios, basePath));
        },
        /**
         * ユーザーIDからテナントに所属しているユーザー情報を取得します。複数テナントに所属している場合は別のオブジェクトとして返却されます。
         * @summary ユーザー情報を取得
         * @param {string} userId ユーザーID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllTenantUser(userId: string, options?: any): AxiosPromise<Users> {
            return localVarFp.getAllTenantUser(userId, options).then((request) => request(axios, basePath));
        },
        /**
         * テナントに所属しているユーザー全件を取得します。複数テナントに所属する同一ユーザーは別のオブジェクトとして返却されます。idは一意ではありません。
         * @summary ユーザー一覧を取得
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllTenantUsers(options?: any): AxiosPromise<Users> {
            return localVarFp.getAllTenantUsers(options).then((request) => request(axios, basePath));
        },
        /**
         * テナントのユーザーをIDから一件取得します。
         * @summary テナントのユーザー情報を取得
         * @param {string} tenantId テナントID
         * @param {string} userId ユーザーID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTenantUser(tenantId: string, userId: string, options?: any): AxiosPromise<User> {
            return localVarFp.getTenantUser(tenantId, userId, options).then((request) => request(axios, basePath));
        },
        /**
         * テナントに所属するユーザーを全件取得します。 idは一意です。
         * @summary テナントのユーザー一覧を取得
         * @param {string} tenantId テナントID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTenantUsers(tenantId: string, options?: any): AxiosPromise<Users> {
            return localVarFp.getTenantUsers(tenantId, options).then((request) => request(axios, basePath));
        },
        /**
         * テナントのユーザー属性情報を更新します。
         * @summary テナントのユーザー属性情報を更新
         * @param {string} tenantId テナントID
         * @param {string} userId ユーザーID
         * @param {UpdateTenantUserParam} [updateTenantUserParam] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateTenantUser(tenantId: string, userId: string, updateTenantUserParam?: UpdateTenantUserParam, options?: any): AxiosPromise<void> {
            return localVarFp.updateTenantUser(tenantId, userId, updateTenantUserParam, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * TenantUserApi - object-oriented interface
 * @export
 * @class TenantUserApi
 * @extends {BaseAPI}
 */
export class TenantUserApi extends BaseAPI {
    /**
     * テナントにユーザーを作成します。attributesを空のオブジェクトにした場合、追加属性は空で作成されます。
     * @summary テナントにユーザーを作成
     * @param {string} tenantId テナントID
     * @param {CreateTenantUserParam} [createTenantUserParam] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TenantUserApi
     */
    public createTenantUser(tenantId: string, createTenantUserParam?: CreateTenantUserParam, options?: AxiosRequestConfig) {
        return TenantUserApiFp(this.configuration).createTenantUser(tenantId, createTenantUserParam, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * テナントのユーザーに役割(ロール)を作成します。
     * @summary テナントのユーザー情報に役割(ロール)を作成
     * @param {string} tenantId テナントID
     * @param {string} userId ユーザーID
     * @param {number} envId 環境ID
     * @param {CreateTenantUserRolesParam} [createTenantUserRolesParam] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TenantUserApi
     */
    public createTenantUserRoles(tenantId: string, userId: string, envId: number, createTenantUserRolesParam?: CreateTenantUserRolesParam, options?: AxiosRequestConfig) {
        return TenantUserApiFp(this.configuration).createTenantUserRoles(tenantId, userId, envId, createTenantUserRolesParam, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * テナントからユーザーを削除します。
     * @summary テナントのユーザー情報を削除
     * @param {string} tenantId テナントID
     * @param {string} userId ユーザーID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TenantUserApi
     */
    public deleteTenantUser(tenantId: string, userId: string, options?: AxiosRequestConfig) {
        return TenantUserApiFp(this.configuration).deleteTenantUser(tenantId, userId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * テナントのユーザーから役割(ロール)を削除します。
     * @summary テナントのユーザーから役割(ロール)を削除
     * @param {string} tenantId テナントID
     * @param {string} userId ユーザーID
     * @param {number} envId 環境ID
     * @param {string} roleName 役割(ロール)名
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TenantUserApi
     */
    public deleteTenantUserRole(tenantId: string, userId: string, envId: number, roleName: string, options?: AxiosRequestConfig) {
        return TenantUserApiFp(this.configuration).deleteTenantUserRole(tenantId, userId, envId, roleName, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ユーザーIDからテナントに所属しているユーザー情報を取得します。複数テナントに所属している場合は別のオブジェクトとして返却されます。
     * @summary ユーザー情報を取得
     * @param {string} userId ユーザーID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TenantUserApi
     */
    public getAllTenantUser(userId: string, options?: AxiosRequestConfig) {
        return TenantUserApiFp(this.configuration).getAllTenantUser(userId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * テナントに所属しているユーザー全件を取得します。複数テナントに所属する同一ユーザーは別のオブジェクトとして返却されます。idは一意ではありません。
     * @summary ユーザー一覧を取得
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TenantUserApi
     */
    public getAllTenantUsers(options?: AxiosRequestConfig) {
        return TenantUserApiFp(this.configuration).getAllTenantUsers(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * テナントのユーザーをIDから一件取得します。
     * @summary テナントのユーザー情報を取得
     * @param {string} tenantId テナントID
     * @param {string} userId ユーザーID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TenantUserApi
     */
    public getTenantUser(tenantId: string, userId: string, options?: AxiosRequestConfig) {
        return TenantUserApiFp(this.configuration).getTenantUser(tenantId, userId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * テナントに所属するユーザーを全件取得します。 idは一意です。
     * @summary テナントのユーザー一覧を取得
     * @param {string} tenantId テナントID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TenantUserApi
     */
    public getTenantUsers(tenantId: string, options?: AxiosRequestConfig) {
        return TenantUserApiFp(this.configuration).getTenantUsers(tenantId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * テナントのユーザー属性情報を更新します。
     * @summary テナントのユーザー属性情報を更新
     * @param {string} tenantId テナントID
     * @param {string} userId ユーザーID
     * @param {UpdateTenantUserParam} [updateTenantUserParam] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TenantUserApi
     */
    public updateTenantUser(tenantId: string, userId: string, updateTenantUserParam?: UpdateTenantUserParam, options?: AxiosRequestConfig) {
        return TenantUserApiFp(this.configuration).updateTenantUser(tenantId, userId, updateTenantUserParam, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * UserAttributeApi - axios parameter creator
 * @export
 */
export const UserAttributeApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * SaaSus Platform にて保持するユーザーの追加属性を登録します。 例えば、ユーザー名を持たせる、誕生日を持たせるなど、ユーザーに紐付いた項目の定義を行うことができます。 一方で、個人情報を SaaSus Platform 側に持たせたくない場合は、このユーザー属性定義を行わずに SaaS 側で個人情報を持つことを検討してください。 
         * @summary ユーザー属性の作成
         * @param {Attribute} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createUserAttribute: async (body?: Attribute, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/user-attributes`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * SaaSus Platform にて保持するユーザーの追加属性を削除します。 
         * @summary ユーザー属性の削除
         * @param {string} attributeName 属性名
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUserAttribute: async (attributeName: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'attributeName' is not null or undefined
            assertParamExists('deleteUserAttribute', 'attributeName', attributeName)
            const localVarPath = `/user-attributes/{attribute_name}`
                .replace(`{${"attribute_name"}}`, encodeURIComponent(String(attributeName)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * SaaSus Platform にて保持するユーザーの追加属性を取得します。 例えば、ユーザー名を持たせる、誕生日を持たせるなど、ユーザーに紐付いた項目の定義を行うことができます。 一方で、個人情報を SaaSus Platform 側に持たせたくない場合は、このユーザー属性定義を行わずに SaaS 側で個人情報を持つことを検討してください。 
         * @summary ユーザー属性の一覧を取得
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserAttributes: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/user-attributes`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UserAttributeApi - functional programming interface
 * @export
 */
export const UserAttributeApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = UserAttributeApiAxiosParamCreator(configuration)
    return {
        /**
         * SaaSus Platform にて保持するユーザーの追加属性を登録します。 例えば、ユーザー名を持たせる、誕生日を持たせるなど、ユーザーに紐付いた項目の定義を行うことができます。 一方で、個人情報を SaaSus Platform 側に持たせたくない場合は、このユーザー属性定義を行わずに SaaS 側で個人情報を持つことを検討してください。 
         * @summary ユーザー属性の作成
         * @param {Attribute} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createUserAttribute(body?: Attribute, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Attribute>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createUserAttribute(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * SaaSus Platform にて保持するユーザーの追加属性を削除します。 
         * @summary ユーザー属性の削除
         * @param {string} attributeName 属性名
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteUserAttribute(attributeName: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteUserAttribute(attributeName, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * SaaSus Platform にて保持するユーザーの追加属性を取得します。 例えば、ユーザー名を持たせる、誕生日を持たせるなど、ユーザーに紐付いた項目の定義を行うことができます。 一方で、個人情報を SaaSus Platform 側に持たせたくない場合は、このユーザー属性定義を行わずに SaaS 側で個人情報を持つことを検討してください。 
         * @summary ユーザー属性の一覧を取得
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUserAttributes(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserAttributes>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUserAttributes(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * UserAttributeApi - factory interface
 * @export
 */
export const UserAttributeApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = UserAttributeApiFp(configuration)
    return {
        /**
         * SaaSus Platform にて保持するユーザーの追加属性を登録します。 例えば、ユーザー名を持たせる、誕生日を持たせるなど、ユーザーに紐付いた項目の定義を行うことができます。 一方で、個人情報を SaaSus Platform 側に持たせたくない場合は、このユーザー属性定義を行わずに SaaS 側で個人情報を持つことを検討してください。 
         * @summary ユーザー属性の作成
         * @param {Attribute} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createUserAttribute(body?: Attribute, options?: any): AxiosPromise<Attribute> {
            return localVarFp.createUserAttribute(body, options).then((request) => request(axios, basePath));
        },
        /**
         * SaaSus Platform にて保持するユーザーの追加属性を削除します。 
         * @summary ユーザー属性の削除
         * @param {string} attributeName 属性名
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUserAttribute(attributeName: string, options?: any): AxiosPromise<void> {
            return localVarFp.deleteUserAttribute(attributeName, options).then((request) => request(axios, basePath));
        },
        /**
         * SaaSus Platform にて保持するユーザーの追加属性を取得します。 例えば、ユーザー名を持たせる、誕生日を持たせるなど、ユーザーに紐付いた項目の定義を行うことができます。 一方で、個人情報を SaaSus Platform 側に持たせたくない場合は、このユーザー属性定義を行わずに SaaS 側で個人情報を持つことを検討してください。 
         * @summary ユーザー属性の一覧を取得
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserAttributes(options?: any): AxiosPromise<UserAttributes> {
            return localVarFp.getUserAttributes(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * UserAttributeApi - object-oriented interface
 * @export
 * @class UserAttributeApi
 * @extends {BaseAPI}
 */
export class UserAttributeApi extends BaseAPI {
    /**
     * SaaSus Platform にて保持するユーザーの追加属性を登録します。 例えば、ユーザー名を持たせる、誕生日を持たせるなど、ユーザーに紐付いた項目の定義を行うことができます。 一方で、個人情報を SaaSus Platform 側に持たせたくない場合は、このユーザー属性定義を行わずに SaaS 側で個人情報を持つことを検討してください。 
     * @summary ユーザー属性の作成
     * @param {Attribute} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserAttributeApi
     */
    public createUserAttribute(body?: Attribute, options?: AxiosRequestConfig) {
        return UserAttributeApiFp(this.configuration).createUserAttribute(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * SaaSus Platform にて保持するユーザーの追加属性を削除します。 
     * @summary ユーザー属性の削除
     * @param {string} attributeName 属性名
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserAttributeApi
     */
    public deleteUserAttribute(attributeName: string, options?: AxiosRequestConfig) {
        return UserAttributeApiFp(this.configuration).deleteUserAttribute(attributeName, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * SaaSus Platform にて保持するユーザーの追加属性を取得します。 例えば、ユーザー名を持たせる、誕生日を持たせるなど、ユーザーに紐付いた項目の定義を行うことができます。 一方で、個人情報を SaaSus Platform 側に持たせたくない場合は、このユーザー属性定義を行わずに SaaS 側で個人情報を持つことを検討してください。 
     * @summary ユーザー属性の一覧を取得
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserAttributeApi
     */
    public getUserAttributes(options?: AxiosRequestConfig) {
        return UserAttributeApiFp(this.configuration).getUserAttributes(options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * UserInfoApi - axios parameter creator
 * @export
 */
export const UserInfoApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * SaaS利用ユーザ(登録ユーザ)のIDトークンを元に、ユーザ情報を取得します。 IDトークンは、SaaSus Platform生成のログイン画面からログイン時にCallback URLに渡されます。 サーバ側でそのURLからIDトークンを取得し、このAPIを呼ぶことにより、該当ユーザの情報が取得できます。 取得した上には、所属テナントや役割(ロール)、料金プランなどが含まれているため、それを元に認可の実装を行うことが可能です。 
         * @summary ユーザー情報取得
         * @param {string} token IDトークン
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserInfo: async (token: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'token' is not null or undefined
            assertParamExists('getUserInfo', 'token', token)
            const localVarPath = `/userinfo`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (token !== undefined) {
                localVarQueryParameter['token'] = token;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UserInfoApi - functional programming interface
 * @export
 */
export const UserInfoApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = UserInfoApiAxiosParamCreator(configuration)
    return {
        /**
         * SaaS利用ユーザ(登録ユーザ)のIDトークンを元に、ユーザ情報を取得します。 IDトークンは、SaaSus Platform生成のログイン画面からログイン時にCallback URLに渡されます。 サーバ側でそのURLからIDトークンを取得し、このAPIを呼ぶことにより、該当ユーザの情報が取得できます。 取得した上には、所属テナントや役割(ロール)、料金プランなどが含まれているため、それを元に認可の実装を行うことが可能です。 
         * @summary ユーザー情報取得
         * @param {string} token IDトークン
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUserInfo(token: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserInfo>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUserInfo(token, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * UserInfoApi - factory interface
 * @export
 */
export const UserInfoApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = UserInfoApiFp(configuration)
    return {
        /**
         * SaaS利用ユーザ(登録ユーザ)のIDトークンを元に、ユーザ情報を取得します。 IDトークンは、SaaSus Platform生成のログイン画面からログイン時にCallback URLに渡されます。 サーバ側でそのURLからIDトークンを取得し、このAPIを呼ぶことにより、該当ユーザの情報が取得できます。 取得した上には、所属テナントや役割(ロール)、料金プランなどが含まれているため、それを元に認可の実装を行うことが可能です。 
         * @summary ユーザー情報取得
         * @param {string} token IDトークン
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserInfo(token: string, options?: any): AxiosPromise<UserInfo> {
            return localVarFp.getUserInfo(token, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * UserInfoApi - object-oriented interface
 * @export
 * @class UserInfoApi
 * @extends {BaseAPI}
 */
export class UserInfoApi extends BaseAPI {
    /**
     * SaaS利用ユーザ(登録ユーザ)のIDトークンを元に、ユーザ情報を取得します。 IDトークンは、SaaSus Platform生成のログイン画面からログイン時にCallback URLに渡されます。 サーバ側でそのURLからIDトークンを取得し、このAPIを呼ぶことにより、該当ユーザの情報が取得できます。 取得した上には、所属テナントや役割(ロール)、料金プランなどが含まれているため、それを元に認可の実装を行うことが可能です。 
     * @summary ユーザー情報取得
     * @param {string} token IDトークン
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserInfoApi
     */
    public getUserInfo(token: string, options?: AxiosRequestConfig) {
        return UserInfoApiFp(this.configuration).getUserInfo(token, options).then((request) => request(this.axios, this.basePath));
    }
}


