/* tslint:disable */
/* eslint-disable */
/**
 * SaaSus ApiLog API Schema
 * SaaSus ApiLog API Schema
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface ApiLog
 */
export interface ApiLog {
    /**
     * Trace ID
     * @type {string}
     * @memberof ApiLog
     */
    'trace_id': string;
    /**
     * 
     * @type {string}
     * @memberof ApiLog
     */
    'api_log_id': string;
    /**
     * Epoch second of API log registration timestamp
     * @type {number}
     * @memberof ApiLog
     */
    'created_at': number;
    /**
     * API log registration date
     * @type {string}
     * @memberof ApiLog
     */
    'created_date': string;
    /**
     * Epoch second of planned API log deletion
     * @type {number}
     * @memberof ApiLog
     */
    'ttl': number;
    /**
     * Request method
     * @type {string}
     * @memberof ApiLog
     */
    'request_method': string;
    /**
     * 
     * @type {string}
     * @memberof ApiLog
     */
    'saas_id': string;
    /**
     * API Key
     * @type {string}
     * @memberof ApiLog
     */
    'api_key': string;
    /**
     * Response status
     * @type {string}
     * @memberof ApiLog
     */
    'response_status': string;
    /**
     * Request URI
     * @type {string}
     * @memberof ApiLog
     */
    'request_uri': string;
    /**
     * Client IP Address
     * @type {string}
     * @memberof ApiLog
     */
    'remote_address': string;
    /**
     * The referrer of the request
     * @type {string}
     * @memberof ApiLog
     */
    'referer': string;
    /**
     * The body of the request
     * @type {string}
     * @memberof ApiLog
     */
    'request_body': string;
    /**
     * The body of the response
     * @type {string}
     * @memberof ApiLog
     */
    'response_body': string;
}
/**
 * 
 * @export
 * @interface ApiLogAllOf
 */
export interface ApiLogAllOf {
    /**
     * Trace ID
     * @type {string}
     * @memberof ApiLogAllOf
     */
    'trace_id': string;
    /**
     * 
     * @type {string}
     * @memberof ApiLogAllOf
     */
    'api_log_id': string;
    /**
     * Epoch second of API log registration timestamp
     * @type {number}
     * @memberof ApiLogAllOf
     */
    'created_at': number;
    /**
     * API log registration date
     * @type {string}
     * @memberof ApiLogAllOf
     */
    'created_date': string;
    /**
     * Epoch second of planned API log deletion
     * @type {number}
     * @memberof ApiLogAllOf
     */
    'ttl': number;
    /**
     * Request method
     * @type {string}
     * @memberof ApiLogAllOf
     */
    'request_method': string;
    /**
     * 
     * @type {string}
     * @memberof ApiLogAllOf
     */
    'saas_id': string;
    /**
     * API Key
     * @type {string}
     * @memberof ApiLogAllOf
     */
    'api_key': string;
    /**
     * Response status
     * @type {string}
     * @memberof ApiLogAllOf
     */
    'response_status': string;
    /**
     * Request URI
     * @type {string}
     * @memberof ApiLogAllOf
     */
    'request_uri': string;
    /**
     * Client IP Address
     * @type {string}
     * @memberof ApiLogAllOf
     */
    'remote_address': string;
    /**
     * The referrer of the request
     * @type {string}
     * @memberof ApiLogAllOf
     */
    'referer': string;
    /**
     * The body of the request
     * @type {string}
     * @memberof ApiLogAllOf
     */
    'request_body': string;
    /**
     * The body of the response
     * @type {string}
     * @memberof ApiLogAllOf
     */
    'response_body': string;
}
/**
 * 
 * @export
 * @interface ApiLogs
 */
export interface ApiLogs {
    /**
     * 
     * @type {Array<ApiLog>}
     * @memberof ApiLogs
     */
    'api_logs': Array<ApiLog>;
    /**
     * Cursor for cursor pagination
     * @type {string}
     * @memberof ApiLogs
     */
    'cursor'?: string;
}
/**
 * 
 * @export
 * @interface ModelError
 */
export interface ModelError {
    /**
     * permission_denied
     * @type {string}
     * @memberof ModelError
     */
    'type': string;
    /**
     * Error message
     * @type {string}
     * @memberof ModelError
     */
    'message': string;
}

/**
 * ApiLogApi - axios parameter creator
 * @export
 */
export const ApiLogApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Retrieve the log of the API execution with the specified ID.
         * @summary Get API execution log
         * @param {string} apiLogId API Log ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLog: async (apiLogId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'apiLogId' is not null or undefined
            assertParamExists('getLog', 'apiLogId', apiLogId)
            const localVarPath = `/logs/{api_log_id}`
                .replace(`{${"api_log_id"}}`, encodeURIComponent(String(apiLogId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve the log of all API executions.
         * @summary Get API execution log list
         * @param {string} [createdDate] The date, in format of YYYY-MM-DD, to retrieve the log.
         * @param {string} [createdAt] The datetime, in ISO 8601 format, to retrieve the log.
         * @param {number} [limit] Maximum number of logs to retrieve.
         * @param {string} [cursor] Cursor for cursor pagination.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLogs: async (createdDate?: string, createdAt?: string, limit?: number, cursor?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/logs`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (createdDate !== undefined) {
                localVarQueryParameter['created_date'] = (createdDate as any instanceof Date) ?
                    (createdDate as any).toISOString().substr(0,10) :
                    createdDate;
            }

            if (createdAt !== undefined) {
                localVarQueryParameter['created_at'] = (createdAt as any instanceof Date) ?
                    (createdAt as any).toISOString() :
                    createdAt;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (cursor !== undefined) {
                localVarQueryParameter['cursor'] = cursor;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ApiLogApi - functional programming interface
 * @export
 */
export const ApiLogApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ApiLogApiAxiosParamCreator(configuration)
    return {
        /**
         * Retrieve the log of the API execution with the specified ID.
         * @summary Get API execution log
         * @param {string} apiLogId API Log ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getLog(apiLogId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiLog>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getLog(apiLogId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieve the log of all API executions.
         * @summary Get API execution log list
         * @param {string} [createdDate] The date, in format of YYYY-MM-DD, to retrieve the log.
         * @param {string} [createdAt] The datetime, in ISO 8601 format, to retrieve the log.
         * @param {number} [limit] Maximum number of logs to retrieve.
         * @param {string} [cursor] Cursor for cursor pagination.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getLogs(createdDate?: string, createdAt?: string, limit?: number, cursor?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiLogs>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getLogs(createdDate, createdAt, limit, cursor, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ApiLogApi - factory interface
 * @export
 */
export const ApiLogApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ApiLogApiFp(configuration)
    return {
        /**
         * Retrieve the log of the API execution with the specified ID.
         * @summary Get API execution log
         * @param {string} apiLogId API Log ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLog(apiLogId: string, options?: any): AxiosPromise<ApiLog> {
            return localVarFp.getLog(apiLogId, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve the log of all API executions.
         * @summary Get API execution log list
         * @param {string} [createdDate] The date, in format of YYYY-MM-DD, to retrieve the log.
         * @param {string} [createdAt] The datetime, in ISO 8601 format, to retrieve the log.
         * @param {number} [limit] Maximum number of logs to retrieve.
         * @param {string} [cursor] Cursor for cursor pagination.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLogs(createdDate?: string, createdAt?: string, limit?: number, cursor?: string, options?: any): AxiosPromise<ApiLogs> {
            return localVarFp.getLogs(createdDate, createdAt, limit, cursor, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ApiLogApi - object-oriented interface
 * @export
 * @class ApiLogApi
 * @extends {BaseAPI}
 */
export class ApiLogApi extends BaseAPI {
    /**
     * Retrieve the log of the API execution with the specified ID.
     * @summary Get API execution log
     * @param {string} apiLogId API Log ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApiLogApi
     */
    public getLog(apiLogId: string, options?: AxiosRequestConfig) {
        return ApiLogApiFp(this.configuration).getLog(apiLogId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieve the log of all API executions.
     * @summary Get API execution log list
     * @param {string} [createdDate] The date, in format of YYYY-MM-DD, to retrieve the log.
     * @param {string} [createdAt] The datetime, in ISO 8601 format, to retrieve the log.
     * @param {number} [limit] Maximum number of logs to retrieve.
     * @param {string} [cursor] Cursor for cursor pagination.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApiLogApi
     */
    public getLogs(createdDate?: string, createdAt?: string, limit?: number, cursor?: string, options?: AxiosRequestConfig) {
        return ApiLogApiFp(this.configuration).getLogs(createdDate, createdAt, limit, cursor, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * ErrorApi - axios parameter creator
 * @export
 */
export const ErrorApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * This endpoint is used for testing purposes. Returns a server error with status code 500. 
         * @summary Returns a server error with status code 500
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        returnInternalServerError: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/errors/internal-server-error`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ErrorApi - functional programming interface
 * @export
 */
export const ErrorApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ErrorApiAxiosParamCreator(configuration)
    return {
        /**
         * This endpoint is used for testing purposes. Returns a server error with status code 500. 
         * @summary Returns a server error with status code 500
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async returnInternalServerError(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.returnInternalServerError(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ErrorApi - factory interface
 * @export
 */
export const ErrorApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ErrorApiFp(configuration)
    return {
        /**
         * This endpoint is used for testing purposes. Returns a server error with status code 500. 
         * @summary Returns a server error with status code 500
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        returnInternalServerError(options?: any): AxiosPromise<void> {
            return localVarFp.returnInternalServerError(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ErrorApi - object-oriented interface
 * @export
 * @class ErrorApi
 * @extends {BaseAPI}
 */
export class ErrorApi extends BaseAPI {
    /**
     * This endpoint is used for testing purposes. Returns a server error with status code 500. 
     * @summary Returns a server error with status code 500
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ErrorApi
     */
    public returnInternalServerError(options?: AxiosRequestConfig) {
        return ErrorApiFp(this.configuration).returnInternalServerError(options).then((request) => request(this.axios, this.basePath));
    }
}


